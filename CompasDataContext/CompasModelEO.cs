//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region Метаданные связи EDM

[assembly: EdmRelationshipAttribute("CompasModel", "FK_ConfigurationParameters_SecurityInstallations", "SecurityInstallation", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Compas.Model.SecurityInstallation), "ConfigurationParameter", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.ConfigurationParameter), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_SecurityUserConfigurations_SecurityModes", "SecurityMode", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.SecurityMode), "ConfigurationParameter", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.ConfigurationParameter), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_SecurityUserConfigurations_SecurityUsers", "SecurityUser", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Compas.Model.SecurityUser), "ConfigurationParameter", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.ConfigurationParameter), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_ContractorCards_Contractors", "Contractor", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.Contractor), "ContractorCard", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.ContractorCard), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_ContractorCards_WareCards", "WareCard", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.WareCard), "ContractorCard", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.ContractorCard), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_ContractorContractorTypes_Contractors", "Contractor", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.Contractor), "ContractorContractorType", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.ContractorContractorType), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_ContractorContractorTypes_ContractorTypes", "ContractorType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.ContractorType), "ContractorContractorType", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.ContractorContractorType), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_CWContractorCars_Contractors", "Contractor", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.Contractor), "CWContractorCar", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.CWContractorCar), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareDocuments_Contractors", "Contractor", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Compas.Model.Contractor), "WareDocument", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareDocument), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareDocumentDetails_RefCurrencies", "Currency", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.Currency), "WareDocumentDetail", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareDocumentDetail), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareDocumentPayments_Currencies", "Currency", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.Currency), "WareDocumentPayment", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareDocumentPayment), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareDocuments_Currencies", "Currency", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.Currency), "WareDocument", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareDocument), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_CWCarModels_CWCarBrands", "CWCarBrand", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.CWCarBrand), "CWCarModel", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.CWCarModel), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_CWCars_CWCarBrands", "CWCarBrand", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Compas.Model.CWCarBrand), "CWCar", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.CWCar), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_CWCarModels_CWCategories", "CWCategory", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Compas.Model.CWCategory), "CWCarModel", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.CWCarModel), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_CWCars_CWCarModels", "CWCarModel", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Compas.Model.CWCarModel), "CWCar", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.CWCar), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_CWCars_CWCategories", "CWCategory", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Compas.Model.CWCategory), "CWCar", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.CWCar), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_CWContractorCars_CWCars", "CWCar", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.CWCar), "CWContractorCar", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.CWContractorCar), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareCardCars_CWCars", "CWCar", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.CWCar), "WareCardCar", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareCardCar), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareDocumentCars_CWCars", "CWCar", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.CWCar), "WareDocumentCar", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareDocumentCar), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareOrderCars_CWCars", "CWCar", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.CWCar), "WareOrderCar", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareOrderCar), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareDocuments_Enterprises", "Enterprise", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Compas.Model.Enterprise), "WareDocument", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareDocument), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_Actions_Categories", "SecurityCategory", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.SecurityCategory), "SecurityAction", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.SecurityAction), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_RoleActions_Actions", "SecurityAction", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.SecurityAction), "SecurityRoleAction", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.SecurityRoleAction), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_RoleActions_Roles", "SecurityRole", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.SecurityRole), "SecurityRoleAction", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.SecurityRoleAction), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_UserRoles_Roles", "SecurityRole", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.SecurityRole), "SecurityUserRole", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.SecurityUserRole), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_UserRoles_Users", "SecurityUser", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.SecurityUser), "SecurityUserRole", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.SecurityUserRole), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_Employees_Users", "SecurityUser", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Compas.Model.SecurityUser), "StaffEmployee", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.StaffEmployee), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareDocumentPayments_SecurityUsers", "SecurityUser", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.SecurityUser), "WareDocumentPayment", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareDocumentPayment), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareDocuments_SecurityUsers", "SecurityUser", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.SecurityUser), "WareDocument", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareDocument), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_StaffEmployeePositions_StaffDepartments", "StaffStructureObject", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Compas.Model.StaffStructureObject), "StaffEmployeePosition", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.StaffEmployeePosition), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_StaffEmployeePositions_StaffEmployees", "StaffEmployee", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.StaffEmployee), "StaffEmployeePosition", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.StaffEmployeePosition), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_StaffEmployeePositions_StaffPositions", "StaffPosition", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.StaffPosition), "StaffEmployeePosition", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.StaffEmployeePosition), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_StaffSalaries_StaffEmployees", "StaffEmployee", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.StaffEmployee), "StaffEmployeeSalary", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.StaffEmployeeSalary), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_StaffShedulerEmployees_StaffEmployees", "StaffEmployee", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.StaffEmployee), "StaffShedulerEmployee", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.StaffShedulerEmployee), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_StaffTeamEmployees_StaffEmployees", "StaffEmployee", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.StaffEmployee), "StaffTeamEmployee", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.StaffTeamEmployee), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareDocuments_StaffEmployees", "StaffEmployee", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Compas.Model.StaffEmployee), "WareDocument", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareDocument), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareDocumentStaffDetails_StaffEmployees", "StaffEmployee", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Compas.Model.StaffEmployee), "WareDocumentStaffDetail", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareDocumentStaffDetail), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareDocumentStates_StaffEmployees", "StaffEmployee", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.StaffEmployee), "WareDocumentState", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareDocumentState), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_StaffSalaries_StaffDepartments", "StaffStructureObject", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.StaffStructureObject), "StaffEmployeeSalary", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.StaffEmployeeSalary), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_StaffShedulerEmployees_StaffShedulers", "StaffSheduler", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.StaffSheduler), "StaffShedulerEmployee", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.StaffShedulerEmployee), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_StaffSheduler_StaffDepartments", "StaffStructureObject", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Compas.Model.StaffStructureObject), "StaffSheduler", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.StaffSheduler), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_StaffSheduler_StaffShifts", "StaffShift", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Compas.Model.StaffShift), "StaffSheduler", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.StaffSheduler), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_StaffSheduler_StaffTeams", "StaffTeam", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Compas.Model.StaffTeam), "StaffSheduler", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.StaffSheduler), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_Departments_Departments", "StaffStructureObject", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Compas.Model.StaffStructureObject), "StaffStructureObject1", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.StaffStructureObject), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_StaffTeams_StaffDepartments", "StaffStructureObject", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.StaffStructureObject), "StaffTeam", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.StaffTeam), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareDocumentPayments_StaffStructureObjects", "StaffStructureObject", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.StaffStructureObject), "WareDocumentPayment", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareDocumentPayment), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareDocuments_StaffDepartments", "StaffStructureObject", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Compas.Model.StaffStructureObject), "WareDocument", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareDocument), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareDocuments_StaffDepartments1", "StaffStructureObject", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Compas.Model.StaffStructureObject), "WareDocument", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareDocument), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareRemains_StaffStructureObjects", "StaffStructureObject", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.StaffStructureObject), "WareRemain", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareRemain), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_StaffTeamEmployees_StaffTeams", "StaffTeam", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.StaffTeam), "StaffTeamEmployee", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.StaffTeamEmployee), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareDocumentStaffDetails_StaffTeams", "StaffTeam", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Compas.Model.StaffTeam), "WareDocumentStaffDetail", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareDocumentStaffDetail), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareDocumentStates_StatesOfDocuments", "StatesOfDocument", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.StatesOfDocument), "WareDocumentState", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareDocumentState), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareCardBalaces_WareCards", "WareCard", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.WareCard), "WareCardBalace", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareCardBalace), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareCardBalanceOperations_WareCards", "WareCard", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.WareCard), "WareCardBalanceOperation", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareCardBalanceOperation), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareCardBalanceOperations_WareDocuments", "WareDocument", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.WareDocument), "WareCardBalanceOperation", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareCardBalanceOperation), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareCardCars_WareCards", "WareCard", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.WareCard), "WareCardCar", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareCardCar), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareCards_WareCardTypes", "WareCardType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.WareCardType), "WareCard", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareCard), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareDocumentPayments_WareCards", "WareCard", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Compas.Model.WareCard), "WareDocumentPayment", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareDocumentPayment), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareCardTypeDiscounts_WareCardTypes", "WareCardType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.WareCardType), "WareCardTypeDiscount", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareCardTypeDiscount), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareCardTypeDiscounts_WareDiscounts", "WareDiscount", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.WareDiscount), "WareCardTypeDiscount", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareCardTypeDiscount), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareCategories_WareCategories", "WareCategory", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Compas.Model.WareCategory), "WareCategory1", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareCategory), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_Wares_WareCategories", "WareCategory", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Compas.Model.WareCategory), "Ware", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.Ware), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareCodes_Wares", "Ware", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.Ware), "WareCode", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareCode), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareComponentDetails_Wares", "Ware", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.Ware), "WareComponent", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareComponent), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareComponents_Component_Wares", "Ware", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.Ware), "WareComponent", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareComponent), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareDiscountRules_WareDiscounts", "WareDiscount", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.WareDiscount), "WareDiscountRule", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareDiscountRule), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareDiscounts_WareDiscountTypes", "WareDiscountType", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Compas.Model.WareDiscountType), "WareDiscount", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareDiscount), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareDocumentCars_WareDocuments", "WareDocument", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.WareDocument), "WareDocumentCar", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareDocumentCar), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareDocumentDetails_WareDocuments", "WareDocument", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.WareDocument), "WareDocumentDetail", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareDocumentDetail), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareDocumentDetails_Wares", "Ware", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.Ware), "WareDocumentDetail", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareDocumentDetail), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareDocumentStaffDetails_WareDocumentDetails", "WareDocumentDetail", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Compas.Model.WareDocumentDetail), "WareDocumentStaffDetail", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareDocumentStaffDetail), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareDocumentPayments_WareDocuments", "WareDocument", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.WareDocument), "WareDocumentPayment", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareDocumentPayment), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareDocumentPayments_WarePayTypes", "WareDocumentPaymentType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.WareDocumentPaymentType), "WareDocumentPayment", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareDocumentPayment), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareDocuments_WareDocumentTypes", "WareDocumentType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.WareDocumentType), "WareDocument", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareDocument), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareDocumentStaffDetails_WareDocuments", "WareDocument", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.WareDocument), "WareDocumentStaffDetail", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareDocumentStaffDetail), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareDocumentStates_WareDocuments", "WareDocument", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.WareDocument), "WareDocumentState", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareDocumentState), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WarePrices_WareDocuments", "WareDocument", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Compas.Model.WareDocument), "WarePrice", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WarePrice), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_Wares_WareManufacturers", "WareManufacturer", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Compas.Model.WareManufacturer), "Ware", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.Ware), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WarePriceGroups_WarePriceGroups", "WarePriceGroup", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Compas.Model.WarePriceGroup), "WarePriceGroup1", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WarePriceGroup), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WarePrices_WarePriceGroups", "WarePriceGroup", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.WarePriceGroup), "WarePrice", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WarePrice), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WarePrices_Wares", "Ware", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.Ware), "WarePrice", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WarePrice), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareRemains_Wares", "Ware", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.Ware), "WareRemain", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareRemain), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_Wares_WareUnits", "WareUnit", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.WareUnit), "Ware", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.Ware), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_Wares_WareUnits1", "WareUnit", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Compas.Model.WareUnit), "Ware", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.Ware), true)]
[assembly: EdmRelationshipAttribute("CompasModel", "FK_WareTimeLimits_Wares", "Ware", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Compas.Model.Ware), "WareTimeLimit", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Compas.Model.WareTimeLimit), true)]

#endregion

namespace Compas.Model
{
    #region Контексты
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    public partial class CompasDataContext : ObjectContext
    {
        #region Конструкторы
    
        /// <summary>
        /// Инициализирует новый объект CompasDataContext, используя строку соединения из раздела "CompasDataContext" файла конфигурации приложения.
        /// </summary>
        public CompasDataContext() : base("name=CompasDataContext", "CompasDataContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта CompasDataContext.
        /// </summary>
        public CompasDataContext(string connectionString) : base(connectionString, "CompasDataContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта CompasDataContext.
        /// </summary>
        public CompasDataContext(EntityConnection connection) : base(connection, "CompasDataContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Разделяемые методы
    
        partial void OnContextCreated();
    
        #endregion
    
        #region Свойства ObjectSet
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ConfigurationParameter> ConfigurationParameters
        {
            get
            {
                if ((_ConfigurationParameters == null))
                {
                    _ConfigurationParameters = base.CreateObjectSet<ConfigurationParameter>("ConfigurationParameters");
                }
                return _ConfigurationParameters;
            }
        }
        private ObjectSet<ConfigurationParameter> _ConfigurationParameters;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ContractorCard> ContractorCards
        {
            get
            {
                if ((_ContractorCards == null))
                {
                    _ContractorCards = base.CreateObjectSet<ContractorCard>("ContractorCards");
                }
                return _ContractorCards;
            }
        }
        private ObjectSet<ContractorCard> _ContractorCards;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ContractorContractorType> ContractorContractorTypes
        {
            get
            {
                if ((_ContractorContractorTypes == null))
                {
                    _ContractorContractorTypes = base.CreateObjectSet<ContractorContractorType>("ContractorContractorTypes");
                }
                return _ContractorContractorTypes;
            }
        }
        private ObjectSet<ContractorContractorType> _ContractorContractorTypes;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Contractor> Contractors
        {
            get
            {
                if ((_Contractors == null))
                {
                    _Contractors = base.CreateObjectSet<Contractor>("Contractors");
                }
                return _Contractors;
            }
        }
        private ObjectSet<Contractor> _Contractors;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ContractorType> ContractorTypes
        {
            get
            {
                if ((_ContractorTypes == null))
                {
                    _ContractorTypes = base.CreateObjectSet<ContractorType>("ContractorTypes");
                }
                return _ContractorTypes;
            }
        }
        private ObjectSet<ContractorType> _ContractorTypes;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Currency> Currencies
        {
            get
            {
                if ((_Currencies == null))
                {
                    _Currencies = base.CreateObjectSet<Currency>("Currencies");
                }
                return _Currencies;
            }
        }
        private ObjectSet<Currency> _Currencies;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<CWCarBrand> CWCarBrands
        {
            get
            {
                if ((_CWCarBrands == null))
                {
                    _CWCarBrands = base.CreateObjectSet<CWCarBrand>("CWCarBrands");
                }
                return _CWCarBrands;
            }
        }
        private ObjectSet<CWCarBrand> _CWCarBrands;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<CWCarCategory> CWCarCategories
        {
            get
            {
                if ((_CWCarCategories == null))
                {
                    _CWCarCategories = base.CreateObjectSet<CWCarCategory>("CWCarCategories");
                }
                return _CWCarCategories;
            }
        }
        private ObjectSet<CWCarCategory> _CWCarCategories;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<CWCarModel> CWCarModels
        {
            get
            {
                if ((_CWCarModels == null))
                {
                    _CWCarModels = base.CreateObjectSet<CWCarModel>("CWCarModels");
                }
                return _CWCarModels;
            }
        }
        private ObjectSet<CWCarModel> _CWCarModels;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<CWCar> CWCars
        {
            get
            {
                if ((_CWCars == null))
                {
                    _CWCars = base.CreateObjectSet<CWCar>("CWCars");
                }
                return _CWCars;
            }
        }
        private ObjectSet<CWCar> _CWCars;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<CWCarType> CWCarTypes
        {
            get
            {
                if ((_CWCarTypes == null))
                {
                    _CWCarTypes = base.CreateObjectSet<CWCarType>("CWCarTypes");
                }
                return _CWCarTypes;
            }
        }
        private ObjectSet<CWCarType> _CWCarTypes;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<CWCategory> CWCategories
        {
            get
            {
                if ((_CWCategories == null))
                {
                    _CWCategories = base.CreateObjectSet<CWCategory>("CWCategories");
                }
                return _CWCategories;
            }
        }
        private ObjectSet<CWCategory> _CWCategories;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<CWContractorCar> CWContractorCars
        {
            get
            {
                if ((_CWContractorCars == null))
                {
                    _CWContractorCars = base.CreateObjectSet<CWContractorCar>("CWContractorCars");
                }
                return _CWContractorCars;
            }
        }
        private ObjectSet<CWContractorCar> _CWContractorCars;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Enterprise> Enterprises
        {
            get
            {
                if ((_Enterprises == null))
                {
                    _Enterprises = base.CreateObjectSet<Enterprise>("Enterprises");
                }
                return _Enterprises;
            }
        }
        private ObjectSet<Enterprise> _Enterprises;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<SecurityAction> SecurityActions
        {
            get
            {
                if ((_SecurityActions == null))
                {
                    _SecurityActions = base.CreateObjectSet<SecurityAction>("SecurityActions");
                }
                return _SecurityActions;
            }
        }
        private ObjectSet<SecurityAction> _SecurityActions;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<SecurityCategory> SecurityCategories
        {
            get
            {
                if ((_SecurityCategories == null))
                {
                    _SecurityCategories = base.CreateObjectSet<SecurityCategory>("SecurityCategories");
                }
                return _SecurityCategories;
            }
        }
        private ObjectSet<SecurityCategory> _SecurityCategories;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<SecurityInstallation> SecurityInstallations
        {
            get
            {
                if ((_SecurityInstallations == null))
                {
                    _SecurityInstallations = base.CreateObjectSet<SecurityInstallation>("SecurityInstallations");
                }
                return _SecurityInstallations;
            }
        }
        private ObjectSet<SecurityInstallation> _SecurityInstallations;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<SecurityMode> SecurityModes
        {
            get
            {
                if ((_SecurityModes == null))
                {
                    _SecurityModes = base.CreateObjectSet<SecurityMode>("SecurityModes");
                }
                return _SecurityModes;
            }
        }
        private ObjectSet<SecurityMode> _SecurityModes;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<SecurityRoleAction> SecurityRoleActions
        {
            get
            {
                if ((_SecurityRoleActions == null))
                {
                    _SecurityRoleActions = base.CreateObjectSet<SecurityRoleAction>("SecurityRoleActions");
                }
                return _SecurityRoleActions;
            }
        }
        private ObjectSet<SecurityRoleAction> _SecurityRoleActions;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<SecurityRole> SecurityRoles
        {
            get
            {
                if ((_SecurityRoles == null))
                {
                    _SecurityRoles = base.CreateObjectSet<SecurityRole>("SecurityRoles");
                }
                return _SecurityRoles;
            }
        }
        private ObjectSet<SecurityRole> _SecurityRoles;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<SecurityUserRole> SecurityUserRoles
        {
            get
            {
                if ((_SecurityUserRoles == null))
                {
                    _SecurityUserRoles = base.CreateObjectSet<SecurityUserRole>("SecurityUserRoles");
                }
                return _SecurityUserRoles;
            }
        }
        private ObjectSet<SecurityUserRole> _SecurityUserRoles;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<SecurityUser> SecurityUsers
        {
            get
            {
                if ((_SecurityUsers == null))
                {
                    _SecurityUsers = base.CreateObjectSet<SecurityUser>("SecurityUsers");
                }
                return _SecurityUsers;
            }
        }
        private ObjectSet<SecurityUser> _SecurityUsers;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<StaffEmployeePosition> StaffEmployeePositions
        {
            get
            {
                if ((_StaffEmployeePositions == null))
                {
                    _StaffEmployeePositions = base.CreateObjectSet<StaffEmployeePosition>("StaffEmployeePositions");
                }
                return _StaffEmployeePositions;
            }
        }
        private ObjectSet<StaffEmployeePosition> _StaffEmployeePositions;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<StaffEmployee> StaffEmployees
        {
            get
            {
                if ((_StaffEmployees == null))
                {
                    _StaffEmployees = base.CreateObjectSet<StaffEmployee>("StaffEmployees");
                }
                return _StaffEmployees;
            }
        }
        private ObjectSet<StaffEmployee> _StaffEmployees;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<StaffEmployeeSalary> StaffEmployeeSalaries
        {
            get
            {
                if ((_StaffEmployeeSalaries == null))
                {
                    _StaffEmployeeSalaries = base.CreateObjectSet<StaffEmployeeSalary>("StaffEmployeeSalaries");
                }
                return _StaffEmployeeSalaries;
            }
        }
        private ObjectSet<StaffEmployeeSalary> _StaffEmployeeSalaries;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<StaffPosition> StaffPositions
        {
            get
            {
                if ((_StaffPositions == null))
                {
                    _StaffPositions = base.CreateObjectSet<StaffPosition>("StaffPositions");
                }
                return _StaffPositions;
            }
        }
        private ObjectSet<StaffPosition> _StaffPositions;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<StaffShedulerEmployee> StaffShedulerEmployees
        {
            get
            {
                if ((_StaffShedulerEmployees == null))
                {
                    _StaffShedulerEmployees = base.CreateObjectSet<StaffShedulerEmployee>("StaffShedulerEmployees");
                }
                return _StaffShedulerEmployees;
            }
        }
        private ObjectSet<StaffShedulerEmployee> _StaffShedulerEmployees;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<StaffSheduler> StaffShedulers
        {
            get
            {
                if ((_StaffShedulers == null))
                {
                    _StaffShedulers = base.CreateObjectSet<StaffSheduler>("StaffShedulers");
                }
                return _StaffShedulers;
            }
        }
        private ObjectSet<StaffSheduler> _StaffShedulers;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<StaffShift> StaffShifts
        {
            get
            {
                if ((_StaffShifts == null))
                {
                    _StaffShifts = base.CreateObjectSet<StaffShift>("StaffShifts");
                }
                return _StaffShifts;
            }
        }
        private ObjectSet<StaffShift> _StaffShifts;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<StaffStructureObject> StaffStructureObjects
        {
            get
            {
                if ((_StaffStructureObjects == null))
                {
                    _StaffStructureObjects = base.CreateObjectSet<StaffStructureObject>("StaffStructureObjects");
                }
                return _StaffStructureObjects;
            }
        }
        private ObjectSet<StaffStructureObject> _StaffStructureObjects;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<StaffTeamEmployee> StaffTeamEmployees
        {
            get
            {
                if ((_StaffTeamEmployees == null))
                {
                    _StaffTeamEmployees = base.CreateObjectSet<StaffTeamEmployee>("StaffTeamEmployees");
                }
                return _StaffTeamEmployees;
            }
        }
        private ObjectSet<StaffTeamEmployee> _StaffTeamEmployees;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<StaffTeam> StaffTeams
        {
            get
            {
                if ((_StaffTeams == null))
                {
                    _StaffTeams = base.CreateObjectSet<StaffTeam>("StaffTeams");
                }
                return _StaffTeams;
            }
        }
        private ObjectSet<StaffTeam> _StaffTeams;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<StatesOfDocument> StatesOfDocuments
        {
            get
            {
                if ((_StatesOfDocuments == null))
                {
                    _StatesOfDocuments = base.CreateObjectSet<StatesOfDocument>("StatesOfDocuments");
                }
                return _StatesOfDocuments;
            }
        }
        private ObjectSet<StatesOfDocument> _StatesOfDocuments;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<WareBas> WareBases
        {
            get
            {
                if ((_WareBases == null))
                {
                    _WareBases = base.CreateObjectSet<WareBas>("WareBases");
                }
                return _WareBases;
            }
        }
        private ObjectSet<WareBas> _WareBases;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<WareCardBalace> WareCardBalaces
        {
            get
            {
                if ((_WareCardBalaces == null))
                {
                    _WareCardBalaces = base.CreateObjectSet<WareCardBalace>("WareCardBalaces");
                }
                return _WareCardBalaces;
            }
        }
        private ObjectSet<WareCardBalace> _WareCardBalaces;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<WareCardBalanceOperation> WareCardBalanceOperations
        {
            get
            {
                if ((_WareCardBalanceOperations == null))
                {
                    _WareCardBalanceOperations = base.CreateObjectSet<WareCardBalanceOperation>("WareCardBalanceOperations");
                }
                return _WareCardBalanceOperations;
            }
        }
        private ObjectSet<WareCardBalanceOperation> _WareCardBalanceOperations;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<WareCardCar> WareCardCars
        {
            get
            {
                if ((_WareCardCars == null))
                {
                    _WareCardCars = base.CreateObjectSet<WareCardCar>("WareCardCars");
                }
                return _WareCardCars;
            }
        }
        private ObjectSet<WareCardCar> _WareCardCars;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<WareCard> WareCards
        {
            get
            {
                if ((_WareCards == null))
                {
                    _WareCards = base.CreateObjectSet<WareCard>("WareCards");
                }
                return _WareCards;
            }
        }
        private ObjectSet<WareCard> _WareCards;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<WareCardTypeDiscount> WareCardTypeDiscounts
        {
            get
            {
                if ((_WareCardTypeDiscounts == null))
                {
                    _WareCardTypeDiscounts = base.CreateObjectSet<WareCardTypeDiscount>("WareCardTypeDiscounts");
                }
                return _WareCardTypeDiscounts;
            }
        }
        private ObjectSet<WareCardTypeDiscount> _WareCardTypeDiscounts;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<WareCardType> WareCardTypes
        {
            get
            {
                if ((_WareCardTypes == null))
                {
                    _WareCardTypes = base.CreateObjectSet<WareCardType>("WareCardTypes");
                }
                return _WareCardTypes;
            }
        }
        private ObjectSet<WareCardType> _WareCardTypes;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<WareCategory> WareCategories
        {
            get
            {
                if ((_WareCategories == null))
                {
                    _WareCategories = base.CreateObjectSet<WareCategory>("WareCategories");
                }
                return _WareCategories;
            }
        }
        private ObjectSet<WareCategory> _WareCategories;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<WareCode> WareCodes
        {
            get
            {
                if ((_WareCodes == null))
                {
                    _WareCodes = base.CreateObjectSet<WareCode>("WareCodes");
                }
                return _WareCodes;
            }
        }
        private ObjectSet<WareCode> _WareCodes;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<WareComponent> WareComponents
        {
            get
            {
                if ((_WareComponents == null))
                {
                    _WareComponents = base.CreateObjectSet<WareComponent>("WareComponents");
                }
                return _WareComponents;
            }
        }
        private ObjectSet<WareComponent> _WareComponents;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<WareDiscountRule> WareDiscountRules
        {
            get
            {
                if ((_WareDiscountRules == null))
                {
                    _WareDiscountRules = base.CreateObjectSet<WareDiscountRule>("WareDiscountRules");
                }
                return _WareDiscountRules;
            }
        }
        private ObjectSet<WareDiscountRule> _WareDiscountRules;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<WareDiscount> WareDiscounts
        {
            get
            {
                if ((_WareDiscounts == null))
                {
                    _WareDiscounts = base.CreateObjectSet<WareDiscount>("WareDiscounts");
                }
                return _WareDiscounts;
            }
        }
        private ObjectSet<WareDiscount> _WareDiscounts;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<WareDiscountType> WareDiscountTypes
        {
            get
            {
                if ((_WareDiscountTypes == null))
                {
                    _WareDiscountTypes = base.CreateObjectSet<WareDiscountType>("WareDiscountTypes");
                }
                return _WareDiscountTypes;
            }
        }
        private ObjectSet<WareDiscountType> _WareDiscountTypes;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<WareDocumentCar> WareDocumentCars
        {
            get
            {
                if ((_WareDocumentCars == null))
                {
                    _WareDocumentCars = base.CreateObjectSet<WareDocumentCar>("WareDocumentCars");
                }
                return _WareDocumentCars;
            }
        }
        private ObjectSet<WareDocumentCar> _WareDocumentCars;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<WareDocumentDetail> WareDocumentDetails
        {
            get
            {
                if ((_WareDocumentDetails == null))
                {
                    _WareDocumentDetails = base.CreateObjectSet<WareDocumentDetail>("WareDocumentDetails");
                }
                return _WareDocumentDetails;
            }
        }
        private ObjectSet<WareDocumentDetail> _WareDocumentDetails;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<WareDocumentPayment> WareDocumentPayments
        {
            get
            {
                if ((_WareDocumentPayments == null))
                {
                    _WareDocumentPayments = base.CreateObjectSet<WareDocumentPayment>("WareDocumentPayments");
                }
                return _WareDocumentPayments;
            }
        }
        private ObjectSet<WareDocumentPayment> _WareDocumentPayments;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<WareDocumentPaymentType> WareDocumentPaymentTypes
        {
            get
            {
                if ((_WareDocumentPaymentTypes == null))
                {
                    _WareDocumentPaymentTypes = base.CreateObjectSet<WareDocumentPaymentType>("WareDocumentPaymentTypes");
                }
                return _WareDocumentPaymentTypes;
            }
        }
        private ObjectSet<WareDocumentPaymentType> _WareDocumentPaymentTypes;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<WareDocument> WareDocuments
        {
            get
            {
                if ((_WareDocuments == null))
                {
                    _WareDocuments = base.CreateObjectSet<WareDocument>("WareDocuments");
                }
                return _WareDocuments;
            }
        }
        private ObjectSet<WareDocument> _WareDocuments;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<WareDocumentStaffDetail> WareDocumentStaffDetails
        {
            get
            {
                if ((_WareDocumentStaffDetails == null))
                {
                    _WareDocumentStaffDetails = base.CreateObjectSet<WareDocumentStaffDetail>("WareDocumentStaffDetails");
                }
                return _WareDocumentStaffDetails;
            }
        }
        private ObjectSet<WareDocumentStaffDetail> _WareDocumentStaffDetails;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<WareDocumentState> WareDocumentStates
        {
            get
            {
                if ((_WareDocumentStates == null))
                {
                    _WareDocumentStates = base.CreateObjectSet<WareDocumentState>("WareDocumentStates");
                }
                return _WareDocumentStates;
            }
        }
        private ObjectSet<WareDocumentState> _WareDocumentStates;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<WareDocumentType> WareDocumentTypes
        {
            get
            {
                if ((_WareDocumentTypes == null))
                {
                    _WareDocumentTypes = base.CreateObjectSet<WareDocumentType>("WareDocumentTypes");
                }
                return _WareDocumentTypes;
            }
        }
        private ObjectSet<WareDocumentType> _WareDocumentTypes;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<WareExtra> WareExtras
        {
            get
            {
                if ((_WareExtras == null))
                {
                    _WareExtras = base.CreateObjectSet<WareExtra>("WareExtras");
                }
                return _WareExtras;
            }
        }
        private ObjectSet<WareExtra> _WareExtras;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<WareManufacturer> WareManufacturers
        {
            get
            {
                if ((_WareManufacturers == null))
                {
                    _WareManufacturers = base.CreateObjectSet<WareManufacturer>("WareManufacturers");
                }
                return _WareManufacturers;
            }
        }
        private ObjectSet<WareManufacturer> _WareManufacturers;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<WareOrderCar> WareOrderCars
        {
            get
            {
                if ((_WareOrderCars == null))
                {
                    _WareOrderCars = base.CreateObjectSet<WareOrderCar>("WareOrderCars");
                }
                return _WareOrderCars;
            }
        }
        private ObjectSet<WareOrderCar> _WareOrderCars;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<WarePriceGroup> WarePriceGroups
        {
            get
            {
                if ((_WarePriceGroups == null))
                {
                    _WarePriceGroups = base.CreateObjectSet<WarePriceGroup>("WarePriceGroups");
                }
                return _WarePriceGroups;
            }
        }
        private ObjectSet<WarePriceGroup> _WarePriceGroups;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<WarePrice> WarePrices
        {
            get
            {
                if ((_WarePrices == null))
                {
                    _WarePrices = base.CreateObjectSet<WarePrice>("WarePrices");
                }
                return _WarePrices;
            }
        }
        private ObjectSet<WarePrice> _WarePrices;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<WareRemain> WareRemains
        {
            get
            {
                if ((_WareRemains == null))
                {
                    _WareRemains = base.CreateObjectSet<WareRemain>("WareRemains");
                }
                return _WareRemains;
            }
        }
        private ObjectSet<WareRemain> _WareRemains;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Ware> Wares
        {
            get
            {
                if ((_Wares == null))
                {
                    _Wares = base.CreateObjectSet<Ware>("Wares");
                }
                return _Wares;
            }
        }
        private ObjectSet<Ware> _Wares;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<WareTimeLimit> WareTimeLimits
        {
            get
            {
                if ((_WareTimeLimits == null))
                {
                    _WareTimeLimits = base.CreateObjectSet<WareTimeLimit>("WareTimeLimits");
                }
                return _WareTimeLimits;
            }
        }
        private ObjectSet<WareTimeLimit> _WareTimeLimits;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<WareUnit> WareUnits
        {
            get
            {
                if ((_WareUnits == null))
                {
                    _WareUnits = base.CreateObjectSet<WareUnit>("WareUnits");
                }
                return _WareUnits;
            }
        }
        private ObjectSet<WareUnit> _WareUnits;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewContractorCard> ViewContractorCards
        {
            get
            {
                if ((_ViewContractorCards == null))
                {
                    _ViewContractorCards = base.CreateObjectSet<ViewContractorCard>("ViewContractorCards");
                }
                return _ViewContractorCards;
            }
        }
        private ObjectSet<ViewContractorCard> _ViewContractorCards;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewDocument> ViewDocuments
        {
            get
            {
                if ((_ViewDocuments == null))
                {
                    _ViewDocuments = base.CreateObjectSet<ViewDocument>("ViewDocuments");
                }
                return _ViewDocuments;
            }
        }
        private ObjectSet<ViewDocument> _ViewDocuments;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewPayment> ViewPayments
        {
            get
            {
                if ((_ViewPayments == null))
                {
                    _ViewPayments = base.CreateObjectSet<ViewPayment>("ViewPayments");
                }
                return _ViewPayments;
            }
        }
        private ObjectSet<ViewPayment> _ViewPayments;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewWaresDetalisation> ViewWaresDetalisations
        {
            get
            {
                if ((_ViewWaresDetalisations == null))
                {
                    _ViewWaresDetalisations = base.CreateObjectSet<ViewWaresDetalisation>("ViewWaresDetalisations");
                }
                return _ViewWaresDetalisations;
            }
        }
        private ObjectSet<ViewWaresDetalisation> _ViewWaresDetalisations;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewStaffEmployeeSalary> ViewStaffEmployeeSalaries
        {
            get
            {
                if ((_ViewStaffEmployeeSalaries == null))
                {
                    _ViewStaffEmployeeSalaries = base.CreateObjectSet<ViewStaffEmployeeSalary>("ViewStaffEmployeeSalaries");
                }
                return _ViewStaffEmployeeSalaries;
            }
        }
        private ObjectSet<ViewStaffEmployeeSalary> _ViewStaffEmployeeSalaries;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewConfigurationParameter> ViewConfigurationParameters
        {
            get
            {
                if ((_ViewConfigurationParameters == null))
                {
                    _ViewConfigurationParameters = base.CreateObjectSet<ViewConfigurationParameter>("ViewConfigurationParameters");
                }
                return _ViewConfigurationParameters;
            }
        }
        private ObjectSet<ViewConfigurationParameter> _ViewConfigurationParameters;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ViewWare> ViewWares
        {
            get
            {
                if ((_ViewWares == null))
                {
                    _ViewWares = base.CreateObjectSet<ViewWare>("ViewWares");
                }
                return _ViewWares;
            }
        }
        private ObjectSet<ViewWare> _ViewWares;

        #endregion
        #region Методы AddTo
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ConfigurationParameters. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToConfigurationParameters(ConfigurationParameter configurationParameter)
        {
            base.AddObject("ConfigurationParameters", configurationParameter);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ContractorCards. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToContractorCards(ContractorCard contractorCard)
        {
            base.AddObject("ContractorCards", contractorCard);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ContractorContractorTypes. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToContractorContractorTypes(ContractorContractorType contractorContractorType)
        {
            base.AddObject("ContractorContractorTypes", contractorContractorType);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Contractors. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToContractors(Contractor contractor)
        {
            base.AddObject("Contractors", contractor);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ContractorTypes. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToContractorTypes(ContractorType contractorType)
        {
            base.AddObject("ContractorTypes", contractorType);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Currencies. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToCurrencies(Currency currency)
        {
            base.AddObject("Currencies", currency);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet CWCarBrands. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToCWCarBrands(CWCarBrand cWCarBrand)
        {
            base.AddObject("CWCarBrands", cWCarBrand);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet CWCarCategories. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToCWCarCategories(CWCarCategory cWCarCategory)
        {
            base.AddObject("CWCarCategories", cWCarCategory);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet CWCarModels. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToCWCarModels(CWCarModel cWCarModel)
        {
            base.AddObject("CWCarModels", cWCarModel);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet CWCars. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToCWCars(CWCar cWCar)
        {
            base.AddObject("CWCars", cWCar);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet CWCarTypes. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToCWCarTypes(CWCarType cWCarType)
        {
            base.AddObject("CWCarTypes", cWCarType);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet CWCategories. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToCWCategories(CWCategory cWCategory)
        {
            base.AddObject("CWCategories", cWCategory);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet CWContractorCars. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToCWContractorCars(CWContractorCar cWContractorCar)
        {
            base.AddObject("CWContractorCars", cWContractorCar);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Enterprises. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToEnterprises(Enterprise enterprise)
        {
            base.AddObject("Enterprises", enterprise);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet SecurityActions. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToSecurityActions(SecurityAction securityAction)
        {
            base.AddObject("SecurityActions", securityAction);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet SecurityCategories. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToSecurityCategories(SecurityCategory securityCategory)
        {
            base.AddObject("SecurityCategories", securityCategory);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet SecurityInstallations. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToSecurityInstallations(SecurityInstallation securityInstallation)
        {
            base.AddObject("SecurityInstallations", securityInstallation);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet SecurityModes. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToSecurityModes(SecurityMode securityMode)
        {
            base.AddObject("SecurityModes", securityMode);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet SecurityRoleActions. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToSecurityRoleActions(SecurityRoleAction securityRoleAction)
        {
            base.AddObject("SecurityRoleActions", securityRoleAction);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet SecurityRoles. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToSecurityRoles(SecurityRole securityRole)
        {
            base.AddObject("SecurityRoles", securityRole);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet SecurityUserRoles. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToSecurityUserRoles(SecurityUserRole securityUserRole)
        {
            base.AddObject("SecurityUserRoles", securityUserRole);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet SecurityUsers. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToSecurityUsers(SecurityUser securityUser)
        {
            base.AddObject("SecurityUsers", securityUser);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet StaffEmployeePositions. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToStaffEmployeePositions(StaffEmployeePosition staffEmployeePosition)
        {
            base.AddObject("StaffEmployeePositions", staffEmployeePosition);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet StaffEmployees. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToStaffEmployees(StaffEmployee staffEmployee)
        {
            base.AddObject("StaffEmployees", staffEmployee);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet StaffEmployeeSalaries. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToStaffEmployeeSalaries(StaffEmployeeSalary staffEmployeeSalary)
        {
            base.AddObject("StaffEmployeeSalaries", staffEmployeeSalary);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet StaffPositions. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToStaffPositions(StaffPosition staffPosition)
        {
            base.AddObject("StaffPositions", staffPosition);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet StaffShedulerEmployees. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToStaffShedulerEmployees(StaffShedulerEmployee staffShedulerEmployee)
        {
            base.AddObject("StaffShedulerEmployees", staffShedulerEmployee);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet StaffShedulers. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToStaffShedulers(StaffSheduler staffSheduler)
        {
            base.AddObject("StaffShedulers", staffSheduler);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet StaffShifts. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToStaffShifts(StaffShift staffShift)
        {
            base.AddObject("StaffShifts", staffShift);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet StaffStructureObjects. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToStaffStructureObjects(StaffStructureObject staffStructureObject)
        {
            base.AddObject("StaffStructureObjects", staffStructureObject);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet StaffTeamEmployees. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToStaffTeamEmployees(StaffTeamEmployee staffTeamEmployee)
        {
            base.AddObject("StaffTeamEmployees", staffTeamEmployee);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet StaffTeams. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToStaffTeams(StaffTeam staffTeam)
        {
            base.AddObject("StaffTeams", staffTeam);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet StatesOfDocuments. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToStatesOfDocuments(StatesOfDocument statesOfDocument)
        {
            base.AddObject("StatesOfDocuments", statesOfDocument);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet WareBases. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWareBases(WareBas wareBas)
        {
            base.AddObject("WareBases", wareBas);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet WareCardBalaces. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWareCardBalaces(WareCardBalace wareCardBalace)
        {
            base.AddObject("WareCardBalaces", wareCardBalace);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet WareCardBalanceOperations. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWareCardBalanceOperations(WareCardBalanceOperation wareCardBalanceOperation)
        {
            base.AddObject("WareCardBalanceOperations", wareCardBalanceOperation);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet WareCardCars. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWareCardCars(WareCardCar wareCardCar)
        {
            base.AddObject("WareCardCars", wareCardCar);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet WareCards. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWareCards(WareCard wareCard)
        {
            base.AddObject("WareCards", wareCard);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet WareCardTypeDiscounts. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWareCardTypeDiscounts(WareCardTypeDiscount wareCardTypeDiscount)
        {
            base.AddObject("WareCardTypeDiscounts", wareCardTypeDiscount);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet WareCardTypes. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWareCardTypes(WareCardType wareCardType)
        {
            base.AddObject("WareCardTypes", wareCardType);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet WareCategories. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWareCategories(WareCategory wareCategory)
        {
            base.AddObject("WareCategories", wareCategory);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet WareCodes. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWareCodes(WareCode wareCode)
        {
            base.AddObject("WareCodes", wareCode);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet WareComponents. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWareComponents(WareComponent wareComponent)
        {
            base.AddObject("WareComponents", wareComponent);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet WareDiscountRules. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWareDiscountRules(WareDiscountRule wareDiscountRule)
        {
            base.AddObject("WareDiscountRules", wareDiscountRule);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet WareDiscounts. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWareDiscounts(WareDiscount wareDiscount)
        {
            base.AddObject("WareDiscounts", wareDiscount);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet WareDiscountTypes. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWareDiscountTypes(WareDiscountType wareDiscountType)
        {
            base.AddObject("WareDiscountTypes", wareDiscountType);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet WareDocumentCars. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWareDocumentCars(WareDocumentCar wareDocumentCar)
        {
            base.AddObject("WareDocumentCars", wareDocumentCar);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet WareDocumentDetails. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWareDocumentDetails(WareDocumentDetail wareDocumentDetail)
        {
            base.AddObject("WareDocumentDetails", wareDocumentDetail);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet WareDocumentPayments. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWareDocumentPayments(WareDocumentPayment wareDocumentPayment)
        {
            base.AddObject("WareDocumentPayments", wareDocumentPayment);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet WareDocumentPaymentTypes. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWareDocumentPaymentTypes(WareDocumentPaymentType wareDocumentPaymentType)
        {
            base.AddObject("WareDocumentPaymentTypes", wareDocumentPaymentType);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet WareDocuments. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWareDocuments(WareDocument wareDocument)
        {
            base.AddObject("WareDocuments", wareDocument);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet WareDocumentStaffDetails. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWareDocumentStaffDetails(WareDocumentStaffDetail wareDocumentStaffDetail)
        {
            base.AddObject("WareDocumentStaffDetails", wareDocumentStaffDetail);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet WareDocumentStates. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWareDocumentStates(WareDocumentState wareDocumentState)
        {
            base.AddObject("WareDocumentStates", wareDocumentState);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet WareDocumentTypes. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWareDocumentTypes(WareDocumentType wareDocumentType)
        {
            base.AddObject("WareDocumentTypes", wareDocumentType);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet WareExtras. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWareExtras(WareExtra wareExtra)
        {
            base.AddObject("WareExtras", wareExtra);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet WareManufacturers. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWareManufacturers(WareManufacturer wareManufacturer)
        {
            base.AddObject("WareManufacturers", wareManufacturer);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet WareOrderCars. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWareOrderCars(WareOrderCar wareOrderCar)
        {
            base.AddObject("WareOrderCars", wareOrderCar);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet WarePriceGroups. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWarePriceGroups(WarePriceGroup warePriceGroup)
        {
            base.AddObject("WarePriceGroups", warePriceGroup);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet WarePrices. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWarePrices(WarePrice warePrice)
        {
            base.AddObject("WarePrices", warePrice);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet WareRemains. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWareRemains(WareRemain wareRemain)
        {
            base.AddObject("WareRemains", wareRemain);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Wares. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWares(Ware ware)
        {
            base.AddObject("Wares", ware);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet WareTimeLimits. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWareTimeLimits(WareTimeLimit wareTimeLimit)
        {
            base.AddObject("WareTimeLimits", wareTimeLimit);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet WareUnits. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWareUnits(WareUnit wareUnit)
        {
            base.AddObject("WareUnits", wareUnit);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewContractorCards. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewContractorCards(ViewContractorCard viewContractorCard)
        {
            base.AddObject("ViewContractorCards", viewContractorCard);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewDocuments. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewDocuments(ViewDocument viewDocument)
        {
            base.AddObject("ViewDocuments", viewDocument);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewPayments. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewPayments(ViewPayment viewPayment)
        {
            base.AddObject("ViewPayments", viewPayment);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewWaresDetalisations. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewWaresDetalisations(ViewWaresDetalisation viewWaresDetalisation)
        {
            base.AddObject("ViewWaresDetalisations", viewWaresDetalisation);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewStaffEmployeeSalaries. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewStaffEmployeeSalaries(ViewStaffEmployeeSalary viewStaffEmployeeSalary)
        {
            base.AddObject("ViewStaffEmployeeSalaries", viewStaffEmployeeSalary);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewConfigurationParameters. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewConfigurationParameters(ViewConfigurationParameter viewConfigurationParameter)
        {
            base.AddObject("ViewConfigurationParameters", viewConfigurationParameter);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ViewWares. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToViewWares(ViewWare viewWare)
        {
            base.AddObject("ViewWares", viewWare);
        }

        #endregion
    }
    

    #endregion
    
    #region Сущности
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="ConfigurationParameter")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ConfigurationParameter : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ConfigurationParameter.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="modeID">Исходное значение свойства ModeID.</param>
        /// <param name="parameter">Исходное значение свойства Parameter.</param>
        /// <param name="value">Исходное значение свойства Value.</param>
        /// <param name="comment">Исходное значение свойства Comment.</param>
        public static ConfigurationParameter CreateConfigurationParameter(global::System.Int32 id, global::System.Int32 modeID, global::System.String parameter, global::System.String value, global::System.String comment)
        {
            ConfigurationParameter configurationParameter = new ConfigurationParameter();
            configurationParameter.ID = id;
            configurationParameter.ModeID = modeID;
            configurationParameter.Parameter = parameter;
            configurationParameter.Value = value;
            configurationParameter.Comment = comment;
            return configurationParameter;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> InstallationID
        {
            get
            {
                return _InstallationID;
            }
            set
            {
                OnInstallationIDChanging(value);
                ReportPropertyChanging("InstallationID");
                _InstallationID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("InstallationID");
                OnInstallationIDChanged();
            }
        }
        private Nullable<global::System.Int32> _InstallationID;
        partial void OnInstallationIDChanging(Nullable<global::System.Int32> value);
        partial void OnInstallationIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> UserID
        {
            get
            {
                return _UserID;
            }
            set
            {
                OnUserIDChanging(value);
                ReportPropertyChanging("UserID");
                _UserID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UserID");
                OnUserIDChanged();
            }
        }
        private Nullable<global::System.Int32> _UserID;
        partial void OnUserIDChanging(Nullable<global::System.Int32> value);
        partial void OnUserIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ModeID
        {
            get
            {
                return _ModeID;
            }
            set
            {
                OnModeIDChanging(value);
                ReportPropertyChanging("ModeID");
                _ModeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModeID");
                OnModeIDChanged();
            }
        }
        private global::System.Int32 _ModeID;
        partial void OnModeIDChanging(global::System.Int32 value);
        partial void OnModeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Parameter
        {
            get
            {
                return _Parameter;
            }
            set
            {
                OnParameterChanging(value);
                ReportPropertyChanging("Parameter");
                _Parameter = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Parameter");
                OnParameterChanged();
            }
        }
        private global::System.String _Parameter;
        partial void OnParameterChanging(global::System.String value);
        partial void OnParameterChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Value
        {
            get
            {
                return _Value;
            }
            set
            {
                OnValueChanging(value);
                ReportPropertyChanging("Value");
                _Value = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Value");
                OnValueChanged();
            }
        }
        private global::System.String _Value;
        partial void OnValueChanging(global::System.String value);
        partial void OnValueChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Comment
        {
            get
            {
                return _Comment;
            }
            set
            {
                OnCommentChanging(value);
                ReportPropertyChanging("Comment");
                _Comment = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Comment");
                OnCommentChanged();
            }
        }
        private global::System.String _Comment;
        partial void OnCommentChanging(global::System.String value);
        partial void OnCommentChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_ConfigurationParameters_SecurityInstallations", "SecurityInstallation")]
        public SecurityInstallation SecurityInstallation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecurityInstallation>("CompasModel.FK_ConfigurationParameters_SecurityInstallations", "SecurityInstallation").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecurityInstallation>("CompasModel.FK_ConfigurationParameters_SecurityInstallations", "SecurityInstallation").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<SecurityInstallation> SecurityInstallationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecurityInstallation>("CompasModel.FK_ConfigurationParameters_SecurityInstallations", "SecurityInstallation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<SecurityInstallation>("CompasModel.FK_ConfigurationParameters_SecurityInstallations", "SecurityInstallation", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_SecurityUserConfigurations_SecurityModes", "SecurityMode")]
        public SecurityMode SecurityMode
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecurityMode>("CompasModel.FK_SecurityUserConfigurations_SecurityModes", "SecurityMode").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecurityMode>("CompasModel.FK_SecurityUserConfigurations_SecurityModes", "SecurityMode").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<SecurityMode> SecurityModeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecurityMode>("CompasModel.FK_SecurityUserConfigurations_SecurityModes", "SecurityMode");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<SecurityMode>("CompasModel.FK_SecurityUserConfigurations_SecurityModes", "SecurityMode", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_SecurityUserConfigurations_SecurityUsers", "SecurityUser")]
        public SecurityUser SecurityUser
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecurityUser>("CompasModel.FK_SecurityUserConfigurations_SecurityUsers", "SecurityUser").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecurityUser>("CompasModel.FK_SecurityUserConfigurations_SecurityUsers", "SecurityUser").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<SecurityUser> SecurityUserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecurityUser>("CompasModel.FK_SecurityUserConfigurations_SecurityUsers", "SecurityUser");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<SecurityUser>("CompasModel.FK_SecurityUserConfigurations_SecurityUsers", "SecurityUser", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="Contractor")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Contractor : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Contractor.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="lastName">Исходное значение свойства LastName.</param>
        public static Contractor CreateContractor(global::System.Int32 id, global::System.String lastName)
        {
            Contractor contractor = new Contractor();
            contractor.ID = id;
            contractor.LastName = lastName;
            return contractor;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LastName
        {
            get
            {
                return _LastName;
            }
            set
            {
                OnLastNameChanging(value);
                ReportPropertyChanging("LastName");
                _LastName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LastName");
                OnLastNameChanged();
            }
        }
        private global::System.String _LastName;
        partial void OnLastNameChanging(global::System.String value);
        partial void OnLastNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FirstName
        {
            get
            {
                return _FirstName;
            }
            set
            {
                OnFirstNameChanging(value);
                ReportPropertyChanging("FirstName");
                _FirstName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FirstName");
                OnFirstNameChanged();
            }
        }
        private global::System.String _FirstName;
        partial void OnFirstNameChanging(global::System.String value);
        partial void OnFirstNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MiddleName
        {
            get
            {
                return _MiddleName;
            }
            set
            {
                OnMiddleNameChanging(value);
                ReportPropertyChanging("MiddleName");
                _MiddleName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MiddleName");
                OnMiddleNameChanged();
            }
        }
        private global::System.String _MiddleName;
        partial void OnMiddleNameChanging(global::System.String value);
        partial void OnMiddleNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Country
        {
            get
            {
                return _Country;
            }
            set
            {
                OnCountryChanging(value);
                ReportPropertyChanging("Country");
                _Country = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Country");
                OnCountryChanged();
            }
        }
        private global::System.String _Country;
        partial void OnCountryChanging(global::System.String value);
        partial void OnCountryChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Region
        {
            get
            {
                return _Region;
            }
            set
            {
                OnRegionChanging(value);
                ReportPropertyChanging("Region");
                _Region = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Region");
                OnRegionChanged();
            }
        }
        private global::System.String _Region;
        partial void OnRegionChanging(global::System.String value);
        partial void OnRegionChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String District
        {
            get
            {
                return _District;
            }
            set
            {
                OnDistrictChanging(value);
                ReportPropertyChanging("District");
                _District = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("District");
                OnDistrictChanged();
            }
        }
        private global::System.String _District;
        partial void OnDistrictChanging(global::System.String value);
        partial void OnDistrictChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String City
        {
            get
            {
                return _City;
            }
            set
            {
                OnCityChanging(value);
                ReportPropertyChanging("City");
                _City = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("City");
                OnCityChanged();
            }
        }
        private global::System.String _City;
        partial void OnCityChanging(global::System.String value);
        partial void OnCityChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Street
        {
            get
            {
                return _Street;
            }
            set
            {
                OnStreetChanging(value);
                ReportPropertyChanging("Street");
                _Street = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Street");
                OnStreetChanged();
            }
        }
        private global::System.String _Street;
        partial void OnStreetChanging(global::System.String value);
        partial void OnStreetChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Building
        {
            get
            {
                return _Building;
            }
            set
            {
                OnBuildingChanging(value);
                ReportPropertyChanging("Building");
                _Building = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Building");
                OnBuildingChanged();
            }
        }
        private global::System.String _Building;
        partial void OnBuildingChanging(global::System.String value);
        partial void OnBuildingChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Flat
        {
            get
            {
                return _Flat;
            }
            set
            {
                OnFlatChanging(value);
                ReportPropertyChanging("Flat");
                _Flat = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Flat");
                OnFlatChanged();
            }
        }
        private global::System.String _Flat;
        partial void OnFlatChanging(global::System.String value);
        partial void OnFlatChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Phone
        {
            get
            {
                return _Phone;
            }
            set
            {
                OnPhoneChanging(value);
                ReportPropertyChanging("Phone");
                _Phone = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Phone");
                OnPhoneChanged();
            }
        }
        private global::System.String _Phone;
        partial void OnPhoneChanging(global::System.String value);
        partial void OnPhoneChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MobilePhone
        {
            get
            {
                return _MobilePhone;
            }
            set
            {
                OnMobilePhoneChanging(value);
                ReportPropertyChanging("MobilePhone");
                _MobilePhone = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MobilePhone");
                OnMobilePhoneChanged();
            }
        }
        private global::System.String _MobilePhone;
        partial void OnMobilePhoneChanging(global::System.String value);
        partial void OnMobilePhoneChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String EMail
        {
            get
            {
                return _EMail;
            }
            set
            {
                OnEMailChanging(value);
                ReportPropertyChanging("EMail");
                _EMail = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("EMail");
                OnEMailChanged();
            }
        }
        private global::System.String _EMail;
        partial void OnEMailChanging(global::System.String value);
        partial void OnEMailChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Site
        {
            get
            {
                return _Site;
            }
            set
            {
                OnSiteChanging(value);
                ReportPropertyChanging("Site");
                _Site = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Site");
                OnSiteChanged();
            }
        }
        private global::System.String _Site;
        partial void OnSiteChanging(global::System.String value);
        partial void OnSiteChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> Birthdate
        {
            get
            {
                return _Birthdate;
            }
            set
            {
                OnBirthdateChanging(value);
                ReportPropertyChanging("Birthdate");
                _Birthdate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Birthdate");
                OnBirthdateChanged();
            }
        }
        private Nullable<global::System.DateTime> _Birthdate;
        partial void OnBirthdateChanging(Nullable<global::System.DateTime> value);
        partial void OnBirthdateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Sex
        {
            get
            {
                return _Sex;
            }
            set
            {
                OnSexChanging(value);
                ReportPropertyChanging("Sex");
                _Sex = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Sex");
                OnSexChanged();
            }
        }
        private Nullable<global::System.Boolean> _Sex;
        partial void OnSexChanging(Nullable<global::System.Boolean> value);
        partial void OnSexChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Person
        {
            get
            {
                return _Person;
            }
            set
            {
                OnPersonChanging(value);
                ReportPropertyChanging("Person");
                _Person = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Person");
                OnPersonChanged();
            }
        }
        private Nullable<global::System.Boolean> _Person;
        partial void OnPersonChanging(Nullable<global::System.Boolean> value);
        partial void OnPersonChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PrefixName
        {
            get
            {
                return _PrefixName;
            }
            set
            {
                OnPrefixNameChanging(value);
                ReportPropertyChanging("PrefixName");
                _PrefixName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PrefixName");
                OnPrefixNameChanged();
            }
        }
        private global::System.String _PrefixName;
        partial void OnPrefixNameChanging(global::System.String value);
        partial void OnPrefixNameChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_ContractorCards_Contractors", "ContractorCard")]
        public EntityCollection<ContractorCard> ContractorCards
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ContractorCard>("CompasModel.FK_ContractorCards_Contractors", "ContractorCard");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ContractorCard>("CompasModel.FK_ContractorCards_Contractors", "ContractorCard", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_ContractorContractorTypes_Contractors", "ContractorContractorType")]
        public EntityCollection<ContractorContractorType> ContractorContractorTypes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ContractorContractorType>("CompasModel.FK_ContractorContractorTypes_Contractors", "ContractorContractorType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ContractorContractorType>("CompasModel.FK_ContractorContractorTypes_Contractors", "ContractorContractorType", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_CWContractorCars_Contractors", "CWContractorCar")]
        public EntityCollection<CWContractorCar> CWContractorCars
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CWContractorCar>("CompasModel.FK_CWContractorCars_Contractors", "CWContractorCar");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CWContractorCar>("CompasModel.FK_CWContractorCars_Contractors", "CWContractorCar", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocuments_Contractors", "WareDocument")]
        public EntityCollection<WareDocument> WareDocuments
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareDocument>("CompasModel.FK_WareDocuments_Contractors", "WareDocument");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareDocument>("CompasModel.FK_WareDocuments_Contractors", "WareDocument", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="ContractorCard")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ContractorCard : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ContractorCard.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="cardID">Исходное значение свойства CardID.</param>
        /// <param name="contractorID">Исходное значение свойства ContractorID.</param>
        public static ContractorCard CreateContractorCard(global::System.Int32 id, global::System.Int32 cardID, global::System.Int32 contractorID)
        {
            ContractorCard contractorCard = new ContractorCard();
            contractorCard.ID = id;
            contractorCard.CardID = cardID;
            contractorCard.ContractorID = contractorID;
            return contractorCard;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CardID
        {
            get
            {
                return _CardID;
            }
            set
            {
                OnCardIDChanging(value);
                ReportPropertyChanging("CardID");
                _CardID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CardID");
                OnCardIDChanged();
            }
        }
        private global::System.Int32 _CardID;
        partial void OnCardIDChanging(global::System.Int32 value);
        partial void OnCardIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ContractorID
        {
            get
            {
                return _ContractorID;
            }
            set
            {
                OnContractorIDChanging(value);
                ReportPropertyChanging("ContractorID");
                _ContractorID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ContractorID");
                OnContractorIDChanged();
            }
        }
        private global::System.Int32 _ContractorID;
        partial void OnContractorIDChanging(global::System.Int32 value);
        partial void OnContractorIDChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_ContractorCards_Contractors", "Contractor")]
        public Contractor Contractor
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Contractor>("CompasModel.FK_ContractorCards_Contractors", "Contractor").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Contractor>("CompasModel.FK_ContractorCards_Contractors", "Contractor").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Contractor> ContractorReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Contractor>("CompasModel.FK_ContractorCards_Contractors", "Contractor");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Contractor>("CompasModel.FK_ContractorCards_Contractors", "Contractor", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_ContractorCards_WareCards", "WareCard")]
        public WareCard WareCard
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareCard>("CompasModel.FK_ContractorCards_WareCards", "WareCard").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareCard>("CompasModel.FK_ContractorCards_WareCards", "WareCard").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WareCard> WareCardReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareCard>("CompasModel.FK_ContractorCards_WareCards", "WareCard");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<WareCard>("CompasModel.FK_ContractorCards_WareCards", "WareCard", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="ContractorContractorType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ContractorContractorType : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ContractorContractorType.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="contractorID">Исходное значение свойства ContractorID.</param>
        /// <param name="contractorTypeID">Исходное значение свойства ContractorTypeID.</param>
        public static ContractorContractorType CreateContractorContractorType(global::System.Int32 id, global::System.Int32 contractorID, global::System.Int32 contractorTypeID)
        {
            ContractorContractorType contractorContractorType = new ContractorContractorType();
            contractorContractorType.ID = id;
            contractorContractorType.ContractorID = contractorID;
            contractorContractorType.ContractorTypeID = contractorTypeID;
            return contractorContractorType;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ContractorID
        {
            get
            {
                return _ContractorID;
            }
            set
            {
                OnContractorIDChanging(value);
                ReportPropertyChanging("ContractorID");
                _ContractorID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ContractorID");
                OnContractorIDChanged();
            }
        }
        private global::System.Int32 _ContractorID;
        partial void OnContractorIDChanging(global::System.Int32 value);
        partial void OnContractorIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ContractorTypeID
        {
            get
            {
                return _ContractorTypeID;
            }
            set
            {
                OnContractorTypeIDChanging(value);
                ReportPropertyChanging("ContractorTypeID");
                _ContractorTypeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ContractorTypeID");
                OnContractorTypeIDChanged();
            }
        }
        private global::System.Int32 _ContractorTypeID;
        partial void OnContractorTypeIDChanging(global::System.Int32 value);
        partial void OnContractorTypeIDChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_ContractorContractorTypes_Contractors", "Contractor")]
        public Contractor Contractor
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Contractor>("CompasModel.FK_ContractorContractorTypes_Contractors", "Contractor").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Contractor>("CompasModel.FK_ContractorContractorTypes_Contractors", "Contractor").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Contractor> ContractorReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Contractor>("CompasModel.FK_ContractorContractorTypes_Contractors", "Contractor");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Contractor>("CompasModel.FK_ContractorContractorTypes_Contractors", "Contractor", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_ContractorContractorTypes_ContractorTypes", "ContractorType")]
        public ContractorType ContractorType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ContractorType>("CompasModel.FK_ContractorContractorTypes_ContractorTypes", "ContractorType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ContractorType>("CompasModel.FK_ContractorContractorTypes_ContractorTypes", "ContractorType").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ContractorType> ContractorTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ContractorType>("CompasModel.FK_ContractorContractorTypes_ContractorTypes", "ContractorType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ContractorType>("CompasModel.FK_ContractorContractorTypes_ContractorTypes", "ContractorType", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="ContractorType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ContractorType : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ContractorType.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        public static ContractorType CreateContractorType(global::System.Int32 id, global::System.String name)
        {
            ContractorType contractorType = new ContractorType();
            contractorType.ID = id;
            contractorType.Name = name;
            return contractorType;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_ContractorContractorTypes_ContractorTypes", "ContractorContractorType")]
        public EntityCollection<ContractorContractorType> ContractorContractorTypes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ContractorContractorType>("CompasModel.FK_ContractorContractorTypes_ContractorTypes", "ContractorContractorType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ContractorContractorType>("CompasModel.FK_ContractorContractorTypes_ContractorTypes", "ContractorContractorType", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="Currency")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Currency : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Currency.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        public static Currency CreateCurrency(global::System.Int32 id, global::System.String name)
        {
            Currency currency = new Currency();
            currency.ID = id;
            currency.Name = name;
            return currency;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocumentDetails_RefCurrencies", "WareDocumentDetail")]
        public EntityCollection<WareDocumentDetail> WareDocumentDetails
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareDocumentDetail>("CompasModel.FK_WareDocumentDetails_RefCurrencies", "WareDocumentDetail");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareDocumentDetail>("CompasModel.FK_WareDocumentDetails_RefCurrencies", "WareDocumentDetail", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocumentPayments_Currencies", "WareDocumentPayment")]
        public EntityCollection<WareDocumentPayment> WareDocumentPayments
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareDocumentPayment>("CompasModel.FK_WareDocumentPayments_Currencies", "WareDocumentPayment");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareDocumentPayment>("CompasModel.FK_WareDocumentPayments_Currencies", "WareDocumentPayment", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocuments_Currencies", "WareDocument")]
        public EntityCollection<WareDocument> WareDocuments
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareDocument>("CompasModel.FK_WareDocuments_Currencies", "WareDocument");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareDocument>("CompasModel.FK_WareDocuments_Currencies", "WareDocument", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="CWCar")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CWCar : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта CWCar.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="number">Исходное значение свойства Number.</param>
        public static CWCar CreateCWCar(global::System.Int32 id, global::System.String number)
        {
            CWCar cWCar = new CWCar();
            cWCar.ID = id;
            cWCar.Number = number;
            return cWCar;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Number
        {
            get
            {
                return _Number;
            }
            set
            {
                OnNumberChanging(value);
                ReportPropertyChanging("Number");
                _Number = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Number");
                OnNumberChanged();
            }
        }
        private global::System.String _Number;
        partial void OnNumberChanging(global::System.String value);
        partial void OnNumberChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> BrandID
        {
            get
            {
                return _BrandID;
            }
            set
            {
                OnBrandIDChanging(value);
                ReportPropertyChanging("BrandID");
                _BrandID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("BrandID");
                OnBrandIDChanged();
            }
        }
        private Nullable<global::System.Int32> _BrandID;
        partial void OnBrandIDChanging(Nullable<global::System.Int32> value);
        partial void OnBrandIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ModelID
        {
            get
            {
                return _ModelID;
            }
            set
            {
                OnModelIDChanging(value);
                ReportPropertyChanging("ModelID");
                _ModelID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ModelID");
                OnModelIDChanged();
            }
        }
        private Nullable<global::System.Int32> _ModelID;
        partial void OnModelIDChanging(Nullable<global::System.Int32> value);
        partial void OnModelIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> CategoryID
        {
            get
            {
                return _CategoryID;
            }
            set
            {
                OnCategoryIDChanging(value);
                ReportPropertyChanging("CategoryID");
                _CategoryID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CategoryID");
                OnCategoryIDChanged();
            }
        }
        private Nullable<global::System.Int32> _CategoryID;
        partial void OnCategoryIDChanging(Nullable<global::System.Int32> value);
        partial void OnCategoryIDChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_CWCars_CWCarBrands", "CWCarBrand")]
        public CWCarBrand CWCarBrand
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CWCarBrand>("CompasModel.FK_CWCars_CWCarBrands", "CWCarBrand").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CWCarBrand>("CompasModel.FK_CWCars_CWCarBrands", "CWCarBrand").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CWCarBrand> CWCarBrandReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CWCarBrand>("CompasModel.FK_CWCars_CWCarBrands", "CWCarBrand");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CWCarBrand>("CompasModel.FK_CWCars_CWCarBrands", "CWCarBrand", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_CWCars_CWCarModels", "CWCarModel")]
        public CWCarModel CWCarModel
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CWCarModel>("CompasModel.FK_CWCars_CWCarModels", "CWCarModel").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CWCarModel>("CompasModel.FK_CWCars_CWCarModels", "CWCarModel").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CWCarModel> CWCarModelReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CWCarModel>("CompasModel.FK_CWCars_CWCarModels", "CWCarModel");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CWCarModel>("CompasModel.FK_CWCars_CWCarModels", "CWCarModel", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_CWCars_CWCategories", "CWCategory")]
        public CWCategory CWCategory
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CWCategory>("CompasModel.FK_CWCars_CWCategories", "CWCategory").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CWCategory>("CompasModel.FK_CWCars_CWCategories", "CWCategory").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CWCategory> CWCategoryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CWCategory>("CompasModel.FK_CWCars_CWCategories", "CWCategory");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CWCategory>("CompasModel.FK_CWCars_CWCategories", "CWCategory", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_CWContractorCars_CWCars", "CWContractorCar")]
        public EntityCollection<CWContractorCar> CWContractorCars
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CWContractorCar>("CompasModel.FK_CWContractorCars_CWCars", "CWContractorCar");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CWContractorCar>("CompasModel.FK_CWContractorCars_CWCars", "CWContractorCar", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareCardCars_CWCars", "WareCardCar")]
        public EntityCollection<WareCardCar> WareCardCars
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareCardCar>("CompasModel.FK_WareCardCars_CWCars", "WareCardCar");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareCardCar>("CompasModel.FK_WareCardCars_CWCars", "WareCardCar", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocumentCars_CWCars", "WareDocumentCar")]
        public EntityCollection<WareDocumentCar> WareDocumentCars
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareDocumentCar>("CompasModel.FK_WareDocumentCars_CWCars", "WareDocumentCar");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareDocumentCar>("CompasModel.FK_WareDocumentCars_CWCars", "WareDocumentCar", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareOrderCars_CWCars", "WareOrderCar")]
        public EntityCollection<WareOrderCar> WareOrderCars
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareOrderCar>("CompasModel.FK_WareOrderCars_CWCars", "WareOrderCar");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareOrderCar>("CompasModel.FK_WareOrderCars_CWCars", "WareOrderCar", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="CWCarBrand")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CWCarBrand : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта CWCarBrand.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        public static CWCarBrand CreateCWCarBrand(global::System.Int32 id, global::System.String name)
        {
            CWCarBrand cWCarBrand = new CWCarBrand();
            cWCarBrand.ID = id;
            cWCarBrand.Name = name;
            return cWCarBrand;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.Byte[] Image
        {
            get
            {
                return StructuralObject.GetValidValue(_Image);
            }
            set
            {
                OnImageChanging(value);
                ReportPropertyChanging("Image");
                _Image = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Image");
                OnImageChanged();
            }
        }
        private global::System.Byte[] _Image;
        partial void OnImageChanging(global::System.Byte[] value);
        partial void OnImageChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_CWCarModels_CWCarBrands", "CWCarModel")]
        public EntityCollection<CWCarModel> CWCarModels
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CWCarModel>("CompasModel.FK_CWCarModels_CWCarBrands", "CWCarModel");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CWCarModel>("CompasModel.FK_CWCarModels_CWCarBrands", "CWCarModel", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_CWCars_CWCarBrands", "CWCar")]
        public EntityCollection<CWCar> CWCars
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CWCar>("CompasModel.FK_CWCars_CWCarBrands", "CWCar");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CWCar>("CompasModel.FK_CWCars_CWCarBrands", "CWCar", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="CWCarCategory")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CWCarCategory : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта CWCarCategory.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        public static CWCarCategory CreateCWCarCategory(global::System.Int32 id, global::System.String name)
        {
            CWCarCategory cWCarCategory = new CWCarCategory();
            cWCarCategory.ID = id;
            cWCarCategory.Name = name;
            return cWCarCategory;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="CWCarModel")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CWCarModel : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта CWCarModel.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="brandID">Исходное значение свойства BrandID.</param>
        public static CWCarModel CreateCWCarModel(global::System.Int32 id, global::System.Int32 brandID)
        {
            CWCarModel cWCarModel = new CWCarModel();
            cWCarModel.ID = id;
            cWCarModel.BrandID = brandID;
            return cWCarModel;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 BrandID
        {
            get
            {
                return _BrandID;
            }
            set
            {
                OnBrandIDChanging(value);
                ReportPropertyChanging("BrandID");
                _BrandID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("BrandID");
                OnBrandIDChanged();
            }
        }
        private global::System.Int32 _BrandID;
        partial void OnBrandIDChanging(global::System.Int32 value);
        partial void OnBrandIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.Byte[] Image
        {
            get
            {
                return StructuralObject.GetValidValue(_Image);
            }
            set
            {
                OnImageChanging(value);
                ReportPropertyChanging("Image");
                _Image = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Image");
                OnImageChanged();
            }
        }
        private global::System.Byte[] _Image;
        partial void OnImageChanging(global::System.Byte[] value);
        partial void OnImageChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> CategoryID
        {
            get
            {
                return _CategoryID;
            }
            set
            {
                OnCategoryIDChanging(value);
                ReportPropertyChanging("CategoryID");
                _CategoryID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CategoryID");
                OnCategoryIDChanged();
            }
        }
        private Nullable<global::System.Int32> _CategoryID;
        partial void OnCategoryIDChanging(Nullable<global::System.Int32> value);
        partial void OnCategoryIDChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_CWCarModels_CWCarBrands", "CWCarBrand")]
        public CWCarBrand CWCarBrand
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CWCarBrand>("CompasModel.FK_CWCarModels_CWCarBrands", "CWCarBrand").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CWCarBrand>("CompasModel.FK_CWCarModels_CWCarBrands", "CWCarBrand").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CWCarBrand> CWCarBrandReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CWCarBrand>("CompasModel.FK_CWCarModels_CWCarBrands", "CWCarBrand");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CWCarBrand>("CompasModel.FK_CWCarModels_CWCarBrands", "CWCarBrand", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_CWCarModels_CWCategories", "CWCategory")]
        public CWCategory CWCategory
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CWCategory>("CompasModel.FK_CWCarModels_CWCategories", "CWCategory").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CWCategory>("CompasModel.FK_CWCarModels_CWCategories", "CWCategory").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CWCategory> CWCategoryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CWCategory>("CompasModel.FK_CWCarModels_CWCategories", "CWCategory");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CWCategory>("CompasModel.FK_CWCarModels_CWCategories", "CWCategory", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_CWCars_CWCarModels", "CWCar")]
        public EntityCollection<CWCar> CWCars
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CWCar>("CompasModel.FK_CWCars_CWCarModels", "CWCar");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CWCar>("CompasModel.FK_CWCars_CWCarModels", "CWCar", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="CWCarType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CWCarType : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта CWCarType.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        public static CWCarType CreateCWCarType(global::System.Int32 id, global::System.String name)
        {
            CWCarType cWCarType = new CWCarType();
            cWCarType.ID = id;
            cWCarType.Name = name;
            return cWCarType;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="CWCategory")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CWCategory : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта CWCategory.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        public static CWCategory CreateCWCategory(global::System.Int32 id)
        {
            CWCategory cWCategory = new CWCategory();
            cWCategory.ID = id;
            return cWCategory;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ParentCategoryID
        {
            get
            {
                return _ParentCategoryID;
            }
            set
            {
                OnParentCategoryIDChanging(value);
                ReportPropertyChanging("ParentCategoryID");
                _ParentCategoryID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ParentCategoryID");
                OnParentCategoryIDChanged();
            }
        }
        private Nullable<global::System.Int32> _ParentCategoryID;
        partial void OnParentCategoryIDChanging(Nullable<global::System.Int32> value);
        partial void OnParentCategoryIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Priority
        {
            get
            {
                return _Priority;
            }
            set
            {
                OnPriorityChanging(value);
                ReportPropertyChanging("Priority");
                _Priority = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Priority");
                OnPriorityChanged();
            }
        }
        private Nullable<global::System.Int32> _Priority;
        partial void OnPriorityChanging(Nullable<global::System.Int32> value);
        partial void OnPriorityChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_CWCarModels_CWCategories", "CWCarModel")]
        public EntityCollection<CWCarModel> CWCarModels
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CWCarModel>("CompasModel.FK_CWCarModels_CWCategories", "CWCarModel");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CWCarModel>("CompasModel.FK_CWCarModels_CWCategories", "CWCarModel", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_CWCars_CWCategories", "CWCar")]
        public EntityCollection<CWCar> CWCars
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CWCar>("CompasModel.FK_CWCars_CWCategories", "CWCar");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CWCar>("CompasModel.FK_CWCars_CWCategories", "CWCar", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="CWContractorCar")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CWContractorCar : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта CWContractorCar.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="contractorID">Исходное значение свойства ContractorID.</param>
        /// <param name="carID">Исходное значение свойства CarID.</param>
        public static CWContractorCar CreateCWContractorCar(global::System.Int32 id, global::System.Int32 contractorID, global::System.Int32 carID)
        {
            CWContractorCar cWContractorCar = new CWContractorCar();
            cWContractorCar.ID = id;
            cWContractorCar.ContractorID = contractorID;
            cWContractorCar.CarID = carID;
            return cWContractorCar;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ContractorID
        {
            get
            {
                return _ContractorID;
            }
            set
            {
                OnContractorIDChanging(value);
                ReportPropertyChanging("ContractorID");
                _ContractorID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ContractorID");
                OnContractorIDChanged();
            }
        }
        private global::System.Int32 _ContractorID;
        partial void OnContractorIDChanging(global::System.Int32 value);
        partial void OnContractorIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CarID
        {
            get
            {
                return _CarID;
            }
            set
            {
                OnCarIDChanging(value);
                ReportPropertyChanging("CarID");
                _CarID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CarID");
                OnCarIDChanged();
            }
        }
        private global::System.Int32 _CarID;
        partial void OnCarIDChanging(global::System.Int32 value);
        partial void OnCarIDChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_CWContractorCars_Contractors", "Contractor")]
        public Contractor Contractor
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Contractor>("CompasModel.FK_CWContractorCars_Contractors", "Contractor").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Contractor>("CompasModel.FK_CWContractorCars_Contractors", "Contractor").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Contractor> ContractorReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Contractor>("CompasModel.FK_CWContractorCars_Contractors", "Contractor");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Contractor>("CompasModel.FK_CWContractorCars_Contractors", "Contractor", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_CWContractorCars_CWCars", "CWCar")]
        public CWCar CWCar
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CWCar>("CompasModel.FK_CWContractorCars_CWCars", "CWCar").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CWCar>("CompasModel.FK_CWContractorCars_CWCars", "CWCar").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CWCar> CWCarReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CWCar>("CompasModel.FK_CWContractorCars_CWCars", "CWCar");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CWCar>("CompasModel.FK_CWContractorCars_CWCars", "CWCar", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="Enterprise")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Enterprise : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Enterprise.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        public static Enterprise CreateEnterprise(global::System.Int32 id, global::System.String name)
        {
            Enterprise enterprise = new Enterprise();
            enterprise.ID = id;
            enterprise.Name = name;
            return enterprise;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocuments_Enterprises", "WareDocument")]
        public EntityCollection<WareDocument> WareDocuments
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareDocument>("CompasModel.FK_WareDocuments_Enterprises", "WareDocument");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareDocument>("CompasModel.FK_WareDocuments_Enterprises", "WareDocument", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="SecurityAction")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SecurityAction : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта SecurityAction.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        /// <param name="code">Исходное значение свойства Code.</param>
        /// <param name="categoryID">Исходное значение свойства CategoryID.</param>
        public static SecurityAction CreateSecurityAction(global::System.Int32 id, global::System.String name, global::System.String code, global::System.Int32 categoryID)
        {
            SecurityAction securityAction = new SecurityAction();
            securityAction.ID = id;
            securityAction.Name = name;
            securityAction.Code = code;
            securityAction.CategoryID = categoryID;
            return securityAction;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Code
        {
            get
            {
                return _Code;
            }
            set
            {
                OnCodeChanging(value);
                ReportPropertyChanging("Code");
                _Code = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Code");
                OnCodeChanged();
            }
        }
        private global::System.String _Code;
        partial void OnCodeChanging(global::System.String value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CategoryID
        {
            get
            {
                return _CategoryID;
            }
            set
            {
                OnCategoryIDChanging(value);
                ReportPropertyChanging("CategoryID");
                _CategoryID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CategoryID");
                OnCategoryIDChanged();
            }
        }
        private global::System.Int32 _CategoryID;
        partial void OnCategoryIDChanging(global::System.Int32 value);
        partial void OnCategoryIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_Actions_Categories", "SecurityCategory")]
        public SecurityCategory SecurityCategory
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecurityCategory>("CompasModel.FK_Actions_Categories", "SecurityCategory").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecurityCategory>("CompasModel.FK_Actions_Categories", "SecurityCategory").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<SecurityCategory> SecurityCategoryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecurityCategory>("CompasModel.FK_Actions_Categories", "SecurityCategory");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<SecurityCategory>("CompasModel.FK_Actions_Categories", "SecurityCategory", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_RoleActions_Actions", "SecurityRoleAction")]
        public EntityCollection<SecurityRoleAction> SecurityRoleActions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SecurityRoleAction>("CompasModel.FK_RoleActions_Actions", "SecurityRoleAction");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SecurityRoleAction>("CompasModel.FK_RoleActions_Actions", "SecurityRoleAction", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="SecurityCategory")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SecurityCategory : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта SecurityCategory.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        public static SecurityCategory CreateSecurityCategory(global::System.Int32 id, global::System.String name)
        {
            SecurityCategory securityCategory = new SecurityCategory();
            securityCategory.ID = id;
            securityCategory.Name = name;
            return securityCategory;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_Actions_Categories", "SecurityAction")]
        public EntityCollection<SecurityAction> SecurityActions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SecurityAction>("CompasModel.FK_Actions_Categories", "SecurityAction");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SecurityAction>("CompasModel.FK_Actions_Categories", "SecurityAction", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="SecurityInstallation")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SecurityInstallation : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта SecurityInstallation.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="installationID">Исходное значение свойства InstallationID.</param>
        public static SecurityInstallation CreateSecurityInstallation(global::System.Int32 id, global::System.String installationID)
        {
            SecurityInstallation securityInstallation = new SecurityInstallation();
            securityInstallation.ID = id;
            securityInstallation.InstallationID = installationID;
            return securityInstallation;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String InstallationID
        {
            get
            {
                return _InstallationID;
            }
            set
            {
                OnInstallationIDChanging(value);
                ReportPropertyChanging("InstallationID");
                _InstallationID = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("InstallationID");
                OnInstallationIDChanged();
            }
        }
        private global::System.String _InstallationID;
        partial void OnInstallationIDChanging(global::System.String value);
        partial void OnInstallationIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_ConfigurationParameters_SecurityInstallations", "ConfigurationParameter")]
        public EntityCollection<ConfigurationParameter> ConfigurationParameters
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ConfigurationParameter>("CompasModel.FK_ConfigurationParameters_SecurityInstallations", "ConfigurationParameter");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ConfigurationParameter>("CompasModel.FK_ConfigurationParameters_SecurityInstallations", "ConfigurationParameter", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="SecurityMode")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SecurityMode : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта SecurityMode.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        /// <param name="code">Исходное значение свойства Code.</param>
        public static SecurityMode CreateSecurityMode(global::System.Int32 id, global::System.String name, global::System.String code)
        {
            SecurityMode securityMode = new SecurityMode();
            securityMode.ID = id;
            securityMode.Name = name;
            securityMode.Code = code;
            return securityMode;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Code
        {
            get
            {
                return _Code;
            }
            set
            {
                OnCodeChanging(value);
                ReportPropertyChanging("Code");
                _Code = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Code");
                OnCodeChanged();
            }
        }
        private global::System.String _Code;
        partial void OnCodeChanging(global::System.String value);
        partial void OnCodeChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_SecurityUserConfigurations_SecurityModes", "ConfigurationParameter")]
        public EntityCollection<ConfigurationParameter> ConfigurationParameters
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ConfigurationParameter>("CompasModel.FK_SecurityUserConfigurations_SecurityModes", "ConfigurationParameter");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ConfigurationParameter>("CompasModel.FK_SecurityUserConfigurations_SecurityModes", "ConfigurationParameter", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="SecurityRole")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SecurityRole : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта SecurityRole.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        public static SecurityRole CreateSecurityRole(global::System.Int32 id, global::System.String name)
        {
            SecurityRole securityRole = new SecurityRole();
            securityRole.ID = id;
            securityRole.Name = name;
            return securityRole;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_RoleActions_Roles", "SecurityRoleAction")]
        public EntityCollection<SecurityRoleAction> SecurityRoleActions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SecurityRoleAction>("CompasModel.FK_RoleActions_Roles", "SecurityRoleAction");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SecurityRoleAction>("CompasModel.FK_RoleActions_Roles", "SecurityRoleAction", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_UserRoles_Roles", "SecurityUserRole")]
        public EntityCollection<SecurityUserRole> SecurityUserRoles
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SecurityUserRole>("CompasModel.FK_UserRoles_Roles", "SecurityUserRole");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SecurityUserRole>("CompasModel.FK_UserRoles_Roles", "SecurityUserRole", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="SecurityRoleAction")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SecurityRoleAction : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта SecurityRoleAction.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="roleID">Исходное значение свойства RoleID.</param>
        /// <param name="actionID">Исходное значение свойства ActionID.</param>
        /// <param name="allow">Исходное значение свойства Allow.</param>
        public static SecurityRoleAction CreateSecurityRoleAction(global::System.Int32 id, global::System.Int32 roleID, global::System.Int32 actionID, global::System.Boolean allow)
        {
            SecurityRoleAction securityRoleAction = new SecurityRoleAction();
            securityRoleAction.ID = id;
            securityRoleAction.RoleID = roleID;
            securityRoleAction.ActionID = actionID;
            securityRoleAction.Allow = allow;
            return securityRoleAction;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RoleID
        {
            get
            {
                return _RoleID;
            }
            set
            {
                OnRoleIDChanging(value);
                ReportPropertyChanging("RoleID");
                _RoleID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RoleID");
                OnRoleIDChanged();
            }
        }
        private global::System.Int32 _RoleID;
        partial void OnRoleIDChanging(global::System.Int32 value);
        partial void OnRoleIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ActionID
        {
            get
            {
                return _ActionID;
            }
            set
            {
                OnActionIDChanging(value);
                ReportPropertyChanging("ActionID");
                _ActionID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ActionID");
                OnActionIDChanged();
            }
        }
        private global::System.Int32 _ActionID;
        partial void OnActionIDChanging(global::System.Int32 value);
        partial void OnActionIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Allow
        {
            get
            {
                return _Allow;
            }
            set
            {
                OnAllowChanging(value);
                ReportPropertyChanging("Allow");
                _Allow = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Allow");
                OnAllowChanged();
            }
        }
        private global::System.Boolean _Allow;
        partial void OnAllowChanging(global::System.Boolean value);
        partial void OnAllowChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_RoleActions_Actions", "SecurityAction")]
        public SecurityAction SecurityAction
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecurityAction>("CompasModel.FK_RoleActions_Actions", "SecurityAction").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecurityAction>("CompasModel.FK_RoleActions_Actions", "SecurityAction").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<SecurityAction> SecurityActionReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecurityAction>("CompasModel.FK_RoleActions_Actions", "SecurityAction");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<SecurityAction>("CompasModel.FK_RoleActions_Actions", "SecurityAction", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_RoleActions_Roles", "SecurityRole")]
        public SecurityRole SecurityRole
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecurityRole>("CompasModel.FK_RoleActions_Roles", "SecurityRole").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecurityRole>("CompasModel.FK_RoleActions_Roles", "SecurityRole").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<SecurityRole> SecurityRoleReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecurityRole>("CompasModel.FK_RoleActions_Roles", "SecurityRole");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<SecurityRole>("CompasModel.FK_RoleActions_Roles", "SecurityRole", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="SecurityUser")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SecurityUser : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта SecurityUser.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="active">Исходное значение свойства Active.</param>
        public static SecurityUser CreateSecurityUser(global::System.Int32 id, global::System.Boolean active)
        {
            SecurityUser securityUser = new SecurityUser();
            securityUser.ID = id;
            securityUser.Active = active;
            return securityUser;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Login
        {
            get
            {
                return _Login;
            }
            set
            {
                OnLoginChanging(value);
                ReportPropertyChanging("Login");
                _Login = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Login");
                OnLoginChanged();
            }
        }
        private global::System.String _Login;
        partial void OnLoginChanging(global::System.String value);
        partial void OnLoginChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Hash
        {
            get
            {
                return _Hash;
            }
            set
            {
                OnHashChanging(value);
                ReportPropertyChanging("Hash");
                _Hash = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Hash");
                OnHashChanged();
            }
        }
        private global::System.String _Hash;
        partial void OnHashChanging(global::System.String value);
        partial void OnHashChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Active
        {
            get
            {
                return _Active;
            }
            set
            {
                OnActiveChanging(value);
                ReportPropertyChanging("Active");
                _Active = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Active");
                OnActiveChanged();
            }
        }
        private global::System.Boolean _Active;
        partial void OnActiveChanging(global::System.Boolean value);
        partial void OnActiveChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_SecurityUserConfigurations_SecurityUsers", "ConfigurationParameter")]
        public EntityCollection<ConfigurationParameter> ConfigurationParameters
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ConfigurationParameter>("CompasModel.FK_SecurityUserConfigurations_SecurityUsers", "ConfigurationParameter");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ConfigurationParameter>("CompasModel.FK_SecurityUserConfigurations_SecurityUsers", "ConfigurationParameter", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_UserRoles_Users", "SecurityUserRole")]
        public EntityCollection<SecurityUserRole> SecurityUserRoles
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SecurityUserRole>("CompasModel.FK_UserRoles_Users", "SecurityUserRole");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SecurityUserRole>("CompasModel.FK_UserRoles_Users", "SecurityUserRole", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_Employees_Users", "StaffEmployee")]
        public EntityCollection<StaffEmployee> StaffEmployees
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<StaffEmployee>("CompasModel.FK_Employees_Users", "StaffEmployee");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<StaffEmployee>("CompasModel.FK_Employees_Users", "StaffEmployee", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocumentPayments_SecurityUsers", "WareDocumentPayment")]
        public EntityCollection<WareDocumentPayment> WareDocumentPayments
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareDocumentPayment>("CompasModel.FK_WareDocumentPayments_SecurityUsers", "WareDocumentPayment");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareDocumentPayment>("CompasModel.FK_WareDocumentPayments_SecurityUsers", "WareDocumentPayment", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocuments_SecurityUsers", "WareDocument")]
        public EntityCollection<WareDocument> WareDocuments
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareDocument>("CompasModel.FK_WareDocuments_SecurityUsers", "WareDocument");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareDocument>("CompasModel.FK_WareDocuments_SecurityUsers", "WareDocument", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="SecurityUserRole")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SecurityUserRole : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта SecurityUserRole.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="userID">Исходное значение свойства UserID.</param>
        /// <param name="roleID">Исходное значение свойства RoleID.</param>
        public static SecurityUserRole CreateSecurityUserRole(global::System.Int32 id, global::System.Int32 userID, global::System.Int32 roleID)
        {
            SecurityUserRole securityUserRole = new SecurityUserRole();
            securityUserRole.ID = id;
            securityUserRole.UserID = userID;
            securityUserRole.RoleID = roleID;
            return securityUserRole;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UserID
        {
            get
            {
                return _UserID;
            }
            set
            {
                OnUserIDChanging(value);
                ReportPropertyChanging("UserID");
                _UserID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UserID");
                OnUserIDChanged();
            }
        }
        private global::System.Int32 _UserID;
        partial void OnUserIDChanging(global::System.Int32 value);
        partial void OnUserIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RoleID
        {
            get
            {
                return _RoleID;
            }
            set
            {
                OnRoleIDChanging(value);
                ReportPropertyChanging("RoleID");
                _RoleID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RoleID");
                OnRoleIDChanged();
            }
        }
        private global::System.Int32 _RoleID;
        partial void OnRoleIDChanging(global::System.Int32 value);
        partial void OnRoleIDChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_UserRoles_Roles", "SecurityRole")]
        public SecurityRole SecurityRole
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecurityRole>("CompasModel.FK_UserRoles_Roles", "SecurityRole").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecurityRole>("CompasModel.FK_UserRoles_Roles", "SecurityRole").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<SecurityRole> SecurityRoleReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecurityRole>("CompasModel.FK_UserRoles_Roles", "SecurityRole");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<SecurityRole>("CompasModel.FK_UserRoles_Roles", "SecurityRole", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_UserRoles_Users", "SecurityUser")]
        public SecurityUser SecurityUser
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecurityUser>("CompasModel.FK_UserRoles_Users", "SecurityUser").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecurityUser>("CompasModel.FK_UserRoles_Users", "SecurityUser").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<SecurityUser> SecurityUserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecurityUser>("CompasModel.FK_UserRoles_Users", "SecurityUser");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<SecurityUser>("CompasModel.FK_UserRoles_Users", "SecurityUser", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="StaffEmployee")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class StaffEmployee : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта StaffEmployee.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="lastName">Исходное значение свойства LastName.</param>
        /// <param name="firstName">Исходное значение свойства FirstName.</param>
        /// <param name="middleName">Исходное значение свойства MiddleName.</param>
        public static StaffEmployee CreateStaffEmployee(global::System.Int32 id, global::System.String lastName, global::System.String firstName, global::System.String middleName)
        {
            StaffEmployee staffEmployee = new StaffEmployee();
            staffEmployee.ID = id;
            staffEmployee.LastName = lastName;
            staffEmployee.FirstName = firstName;
            staffEmployee.MiddleName = middleName;
            return staffEmployee;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LastName
        {
            get
            {
                return _LastName;
            }
            set
            {
                OnLastNameChanging(value);
                ReportPropertyChanging("LastName");
                _LastName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LastName");
                OnLastNameChanged();
            }
        }
        private global::System.String _LastName;
        partial void OnLastNameChanging(global::System.String value);
        partial void OnLastNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FirstName
        {
            get
            {
                return _FirstName;
            }
            set
            {
                OnFirstNameChanging(value);
                ReportPropertyChanging("FirstName");
                _FirstName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FirstName");
                OnFirstNameChanged();
            }
        }
        private global::System.String _FirstName;
        partial void OnFirstNameChanging(global::System.String value);
        partial void OnFirstNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String MiddleName
        {
            get
            {
                return _MiddleName;
            }
            set
            {
                OnMiddleNameChanging(value);
                ReportPropertyChanging("MiddleName");
                _MiddleName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("MiddleName");
                OnMiddleNameChanged();
            }
        }
        private global::System.String _MiddleName;
        partial void OnMiddleNameChanging(global::System.String value);
        partial void OnMiddleNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String City
        {
            get
            {
                return _City;
            }
            set
            {
                OnCityChanging(value);
                ReportPropertyChanging("City");
                _City = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("City");
                OnCityChanged();
            }
        }
        private global::System.String _City;
        partial void OnCityChanging(global::System.String value);
        partial void OnCityChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Street
        {
            get
            {
                return _Street;
            }
            set
            {
                OnStreetChanging(value);
                ReportPropertyChanging("Street");
                _Street = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Street");
                OnStreetChanged();
            }
        }
        private global::System.String _Street;
        partial void OnStreetChanging(global::System.String value);
        partial void OnStreetChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Building
        {
            get
            {
                return _Building;
            }
            set
            {
                OnBuildingChanging(value);
                ReportPropertyChanging("Building");
                _Building = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Building");
                OnBuildingChanged();
            }
        }
        private global::System.String _Building;
        partial void OnBuildingChanging(global::System.String value);
        partial void OnBuildingChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Flat
        {
            get
            {
                return _Flat;
            }
            set
            {
                OnFlatChanging(value);
                ReportPropertyChanging("Flat");
                _Flat = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Flat");
                OnFlatChanged();
            }
        }
        private global::System.String _Flat;
        partial void OnFlatChanging(global::System.String value);
        partial void OnFlatChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Phone
        {
            get
            {
                return _Phone;
            }
            set
            {
                OnPhoneChanging(value);
                ReportPropertyChanging("Phone");
                _Phone = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Phone");
                OnPhoneChanged();
            }
        }
        private global::System.String _Phone;
        partial void OnPhoneChanging(global::System.String value);
        partial void OnPhoneChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MobPhone
        {
            get
            {
                return _MobPhone;
            }
            set
            {
                OnMobPhoneChanging(value);
                ReportPropertyChanging("MobPhone");
                _MobPhone = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MobPhone");
                OnMobPhoneChanged();
            }
        }
        private global::System.String _MobPhone;
        partial void OnMobPhoneChanging(global::System.String value);
        partial void OnMobPhoneChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> UserID
        {
            get
            {
                return _UserID;
            }
            set
            {
                OnUserIDChanging(value);
                ReportPropertyChanging("UserID");
                _UserID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UserID");
                OnUserIDChanged();
            }
        }
        private Nullable<global::System.Int32> _UserID;
        partial void OnUserIDChanging(Nullable<global::System.Int32> value);
        partial void OnUserIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> HireDate
        {
            get
            {
                return _HireDate;
            }
            set
            {
                OnHireDateChanging(value);
                ReportPropertyChanging("HireDate");
                _HireDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("HireDate");
                OnHireDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _HireDate;
        partial void OnHireDateChanging(Nullable<global::System.DateTime> value);
        partial void OnHireDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> StructureObjectID
        {
            get
            {
                return _StructureObjectID;
            }
            set
            {
                OnStructureObjectIDChanging(value);
                ReportPropertyChanging("StructureObjectID");
                _StructureObjectID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StructureObjectID");
                OnStructureObjectIDChanged();
            }
        }
        private Nullable<global::System.Int32> _StructureObjectID;
        partial void OnStructureObjectIDChanging(Nullable<global::System.Int32> value);
        partial void OnStructureObjectIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ReleaseDate
        {
            get
            {
                return _ReleaseDate;
            }
            set
            {
                OnReleaseDateChanging(value);
                ReportPropertyChanging("ReleaseDate");
                _ReleaseDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ReleaseDate");
                OnReleaseDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _ReleaseDate;
        partial void OnReleaseDateChanging(Nullable<global::System.DateTime> value);
        partial void OnReleaseDateChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_Employees_Users", "SecurityUser")]
        public SecurityUser SecurityUser
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecurityUser>("CompasModel.FK_Employees_Users", "SecurityUser").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecurityUser>("CompasModel.FK_Employees_Users", "SecurityUser").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<SecurityUser> SecurityUserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecurityUser>("CompasModel.FK_Employees_Users", "SecurityUser");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<SecurityUser>("CompasModel.FK_Employees_Users", "SecurityUser", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_StaffEmployeePositions_StaffEmployees", "StaffEmployeePosition")]
        public EntityCollection<StaffEmployeePosition> StaffEmployeePositions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<StaffEmployeePosition>("CompasModel.FK_StaffEmployeePositions_StaffEmployees", "StaffEmployeePosition");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<StaffEmployeePosition>("CompasModel.FK_StaffEmployeePositions_StaffEmployees", "StaffEmployeePosition", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_StaffSalaries_StaffEmployees", "StaffEmployeeSalary")]
        public EntityCollection<StaffEmployeeSalary> StaffEmployeeSalaries
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<StaffEmployeeSalary>("CompasModel.FK_StaffSalaries_StaffEmployees", "StaffEmployeeSalary");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<StaffEmployeeSalary>("CompasModel.FK_StaffSalaries_StaffEmployees", "StaffEmployeeSalary", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_StaffShedulerEmployees_StaffEmployees", "StaffShedulerEmployee")]
        public EntityCollection<StaffShedulerEmployee> StaffShedulerEmployees
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<StaffShedulerEmployee>("CompasModel.FK_StaffShedulerEmployees_StaffEmployees", "StaffShedulerEmployee");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<StaffShedulerEmployee>("CompasModel.FK_StaffShedulerEmployees_StaffEmployees", "StaffShedulerEmployee", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_StaffTeamEmployees_StaffEmployees", "StaffTeamEmployee")]
        public EntityCollection<StaffTeamEmployee> StaffTeamEmployees
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<StaffTeamEmployee>("CompasModel.FK_StaffTeamEmployees_StaffEmployees", "StaffTeamEmployee");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<StaffTeamEmployee>("CompasModel.FK_StaffTeamEmployees_StaffEmployees", "StaffTeamEmployee", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocuments_StaffEmployees", "WareDocument")]
        public EntityCollection<WareDocument> WareDocuments
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareDocument>("CompasModel.FK_WareDocuments_StaffEmployees", "WareDocument");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareDocument>("CompasModel.FK_WareDocuments_StaffEmployees", "WareDocument", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocumentStaffDetails_StaffEmployees", "WareDocumentStaffDetail")]
        public EntityCollection<WareDocumentStaffDetail> WareDocumentStaffDetails
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareDocumentStaffDetail>("CompasModel.FK_WareDocumentStaffDetails_StaffEmployees", "WareDocumentStaffDetail");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareDocumentStaffDetail>("CompasModel.FK_WareDocumentStaffDetails_StaffEmployees", "WareDocumentStaffDetail", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocumentStates_StaffEmployees", "WareDocumentState")]
        public EntityCollection<WareDocumentState> WareDocumentStates
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareDocumentState>("CompasModel.FK_WareDocumentStates_StaffEmployees", "WareDocumentState");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareDocumentState>("CompasModel.FK_WareDocumentStates_StaffEmployees", "WareDocumentState", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="StaffEmployeePosition")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class StaffEmployeePosition : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта StaffEmployeePosition.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="employeeID">Исходное значение свойства EmployeeID.</param>
        /// <param name="positionID">Исходное значение свойства PositionID.</param>
        /// <param name="startDate">Исходное значение свойства StartDate.</param>
        /// <param name="active">Исходное значение свойства Active.</param>
        public static StaffEmployeePosition CreateStaffEmployeePosition(global::System.Int32 id, global::System.Int32 employeeID, global::System.Int32 positionID, global::System.DateTime startDate, global::System.Boolean active)
        {
            StaffEmployeePosition staffEmployeePosition = new StaffEmployeePosition();
            staffEmployeePosition.ID = id;
            staffEmployeePosition.EmployeeID = employeeID;
            staffEmployeePosition.PositionID = positionID;
            staffEmployeePosition.StartDate = startDate;
            staffEmployeePosition.Active = active;
            return staffEmployeePosition;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 EmployeeID
        {
            get
            {
                return _EmployeeID;
            }
            set
            {
                OnEmployeeIDChanging(value);
                ReportPropertyChanging("EmployeeID");
                _EmployeeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EmployeeID");
                OnEmployeeIDChanged();
            }
        }
        private global::System.Int32 _EmployeeID;
        partial void OnEmployeeIDChanging(global::System.Int32 value);
        partial void OnEmployeeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> StructureObjectID
        {
            get
            {
                return _StructureObjectID;
            }
            set
            {
                OnStructureObjectIDChanging(value);
                ReportPropertyChanging("StructureObjectID");
                _StructureObjectID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StructureObjectID");
                OnStructureObjectIDChanged();
            }
        }
        private Nullable<global::System.Int32> _StructureObjectID;
        partial void OnStructureObjectIDChanging(Nullable<global::System.Int32> value);
        partial void OnStructureObjectIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PositionID
        {
            get
            {
                return _PositionID;
            }
            set
            {
                OnPositionIDChanging(value);
                ReportPropertyChanging("PositionID");
                _PositionID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PositionID");
                OnPositionIDChanged();
            }
        }
        private global::System.Int32 _PositionID;
        partial void OnPositionIDChanging(global::System.Int32 value);
        partial void OnPositionIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime StartDate
        {
            get
            {
                return _StartDate;
            }
            set
            {
                OnStartDateChanging(value);
                ReportPropertyChanging("StartDate");
                _StartDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StartDate");
                OnStartDateChanged();
            }
        }
        private global::System.DateTime _StartDate;
        partial void OnStartDateChanging(global::System.DateTime value);
        partial void OnStartDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> EndDate
        {
            get
            {
                return _EndDate;
            }
            set
            {
                OnEndDateChanging(value);
                ReportPropertyChanging("EndDate");
                _EndDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EndDate");
                OnEndDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _EndDate;
        partial void OnEndDateChanging(Nullable<global::System.DateTime> value);
        partial void OnEndDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Active
        {
            get
            {
                return _Active;
            }
            set
            {
                OnActiveChanging(value);
                ReportPropertyChanging("Active");
                _Active = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Active");
                OnActiveChanged();
            }
        }
        private global::System.Boolean _Active;
        partial void OnActiveChanging(global::System.Boolean value);
        partial void OnActiveChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_StaffEmployeePositions_StaffDepartments", "StaffStructureObject")]
        public StaffStructureObject StaffStructureObject
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffStructureObject>("CompasModel.FK_StaffEmployeePositions_StaffDepartments", "StaffStructureObject").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffStructureObject>("CompasModel.FK_StaffEmployeePositions_StaffDepartments", "StaffStructureObject").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<StaffStructureObject> StaffStructureObjectReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffStructureObject>("CompasModel.FK_StaffEmployeePositions_StaffDepartments", "StaffStructureObject");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<StaffStructureObject>("CompasModel.FK_StaffEmployeePositions_StaffDepartments", "StaffStructureObject", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_StaffEmployeePositions_StaffEmployees", "StaffEmployee")]
        public StaffEmployee StaffEmployee
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffEmployee>("CompasModel.FK_StaffEmployeePositions_StaffEmployees", "StaffEmployee").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffEmployee>("CompasModel.FK_StaffEmployeePositions_StaffEmployees", "StaffEmployee").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<StaffEmployee> StaffEmployeeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffEmployee>("CompasModel.FK_StaffEmployeePositions_StaffEmployees", "StaffEmployee");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<StaffEmployee>("CompasModel.FK_StaffEmployeePositions_StaffEmployees", "StaffEmployee", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_StaffEmployeePositions_StaffPositions", "StaffPosition")]
        public StaffPosition StaffPosition
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffPosition>("CompasModel.FK_StaffEmployeePositions_StaffPositions", "StaffPosition").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffPosition>("CompasModel.FK_StaffEmployeePositions_StaffPositions", "StaffPosition").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<StaffPosition> StaffPositionReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffPosition>("CompasModel.FK_StaffEmployeePositions_StaffPositions", "StaffPosition");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<StaffPosition>("CompasModel.FK_StaffEmployeePositions_StaffPositions", "StaffPosition", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="StaffEmployeeSalary")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class StaffEmployeeSalary : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта StaffEmployeeSalary.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="month">Исходное значение свойства Month.</param>
        /// <param name="structureObjectID">Исходное значение свойства StructureObjectID.</param>
        /// <param name="employeeID">Исходное значение свойства EmployeeID.</param>
        /// <param name="sumSale">Исходное значение свойства SumSale.</param>
        /// <param name="extraPercent">Исходное значение свойства ExtraPercent.</param>
        /// <param name="salary">Исходное значение свойства Salary.</param>
        /// <param name="sumSalary">Исходное значение свойства SumSalary.</param>
        public static StaffEmployeeSalary CreateStaffEmployeeSalary(global::System.Int32 id, global::System.DateTime month, global::System.Int32 structureObjectID, global::System.Int32 employeeID, global::System.Decimal sumSale, global::System.Decimal extraPercent, global::System.Decimal salary, global::System.Decimal sumSalary)
        {
            StaffEmployeeSalary staffEmployeeSalary = new StaffEmployeeSalary();
            staffEmployeeSalary.ID = id;
            staffEmployeeSalary.Month = month;
            staffEmployeeSalary.StructureObjectID = structureObjectID;
            staffEmployeeSalary.EmployeeID = employeeID;
            staffEmployeeSalary.SumSale = sumSale;
            staffEmployeeSalary.ExtraPercent = extraPercent;
            staffEmployeeSalary.Salary = salary;
            staffEmployeeSalary.SumSalary = sumSalary;
            return staffEmployeeSalary;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Month
        {
            get
            {
                return _Month;
            }
            set
            {
                OnMonthChanging(value);
                ReportPropertyChanging("Month");
                _Month = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Month");
                OnMonthChanged();
            }
        }
        private global::System.DateTime _Month;
        partial void OnMonthChanging(global::System.DateTime value);
        partial void OnMonthChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 StructureObjectID
        {
            get
            {
                return _StructureObjectID;
            }
            set
            {
                OnStructureObjectIDChanging(value);
                ReportPropertyChanging("StructureObjectID");
                _StructureObjectID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StructureObjectID");
                OnStructureObjectIDChanged();
            }
        }
        private global::System.Int32 _StructureObjectID;
        partial void OnStructureObjectIDChanging(global::System.Int32 value);
        partial void OnStructureObjectIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 EmployeeID
        {
            get
            {
                return _EmployeeID;
            }
            set
            {
                OnEmployeeIDChanging(value);
                ReportPropertyChanging("EmployeeID");
                _EmployeeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EmployeeID");
                OnEmployeeIDChanged();
            }
        }
        private global::System.Int32 _EmployeeID;
        partial void OnEmployeeIDChanging(global::System.Int32 value);
        partial void OnEmployeeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal SumSale
        {
            get
            {
                return _SumSale;
            }
            set
            {
                OnSumSaleChanging(value);
                ReportPropertyChanging("SumSale");
                _SumSale = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SumSale");
                OnSumSaleChanged();
            }
        }
        private global::System.Decimal _SumSale;
        partial void OnSumSaleChanging(global::System.Decimal value);
        partial void OnSumSaleChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal ExtraPercent
        {
            get
            {
                return _ExtraPercent;
            }
            set
            {
                OnExtraPercentChanging(value);
                ReportPropertyChanging("ExtraPercent");
                _ExtraPercent = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ExtraPercent");
                OnExtraPercentChanged();
            }
        }
        private global::System.Decimal _ExtraPercent;
        partial void OnExtraPercentChanging(global::System.Decimal value);
        partial void OnExtraPercentChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal Salary
        {
            get
            {
                return _Salary;
            }
            set
            {
                OnSalaryChanging(value);
                ReportPropertyChanging("Salary");
                _Salary = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Salary");
                OnSalaryChanged();
            }
        }
        private global::System.Decimal _Salary;
        partial void OnSalaryChanging(global::System.Decimal value);
        partial void OnSalaryChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal SumSalary
        {
            get
            {
                return _SumSalary;
            }
            set
            {
                OnSumSalaryChanging(value);
                ReportPropertyChanging("SumSalary");
                _SumSalary = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SumSalary");
                OnSumSalaryChanged();
            }
        }
        private global::System.Decimal _SumSalary;
        partial void OnSumSalaryChanging(global::System.Decimal value);
        partial void OnSumSalaryChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_StaffSalaries_StaffEmployees", "StaffEmployee")]
        public StaffEmployee StaffEmployee
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffEmployee>("CompasModel.FK_StaffSalaries_StaffEmployees", "StaffEmployee").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffEmployee>("CompasModel.FK_StaffSalaries_StaffEmployees", "StaffEmployee").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<StaffEmployee> StaffEmployeeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffEmployee>("CompasModel.FK_StaffSalaries_StaffEmployees", "StaffEmployee");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<StaffEmployee>("CompasModel.FK_StaffSalaries_StaffEmployees", "StaffEmployee", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_StaffSalaries_StaffDepartments", "StaffStructureObject")]
        public StaffStructureObject StaffStructureObject
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffStructureObject>("CompasModel.FK_StaffSalaries_StaffDepartments", "StaffStructureObject").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffStructureObject>("CompasModel.FK_StaffSalaries_StaffDepartments", "StaffStructureObject").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<StaffStructureObject> StaffStructureObjectReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffStructureObject>("CompasModel.FK_StaffSalaries_StaffDepartments", "StaffStructureObject");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<StaffStructureObject>("CompasModel.FK_StaffSalaries_StaffDepartments", "StaffStructureObject", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="StaffPosition")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class StaffPosition : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта StaffPosition.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        /// <param name="active">Исходное значение свойства Active.</param>
        public static StaffPosition CreateStaffPosition(global::System.Int32 id, global::System.String name, global::System.Boolean active)
        {
            StaffPosition staffPosition = new StaffPosition();
            staffPosition.ID = id;
            staffPosition.Name = name;
            staffPosition.Active = active;
            return staffPosition;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Active
        {
            get
            {
                return _Active;
            }
            set
            {
                OnActiveChanging(value);
                ReportPropertyChanging("Active");
                _Active = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Active");
                OnActiveChanged();
            }
        }
        private global::System.Boolean _Active;
        partial void OnActiveChanging(global::System.Boolean value);
        partial void OnActiveChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_StaffEmployeePositions_StaffPositions", "StaffEmployeePosition")]
        public EntityCollection<StaffEmployeePosition> StaffEmployeePositions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<StaffEmployeePosition>("CompasModel.FK_StaffEmployeePositions_StaffPositions", "StaffEmployeePosition");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<StaffEmployeePosition>("CompasModel.FK_StaffEmployeePositions_StaffPositions", "StaffEmployeePosition", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="StaffSheduler")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class StaffSheduler : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта StaffSheduler.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="startDate">Исходное значение свойства StartDate.</param>
        /// <param name="endDate">Исходное значение свойства EndDate.</param>
        /// <param name="createdUserID">Исходное значение свойства CreatedUserID.</param>
        /// <param name="createdDate">Исходное значение свойства CreatedDate.</param>
        public static StaffSheduler CreateStaffSheduler(global::System.Int32 id, global::System.DateTime startDate, global::System.DateTime endDate, global::System.Int32 createdUserID, global::System.DateTime createdDate)
        {
            StaffSheduler staffSheduler = new StaffSheduler();
            staffSheduler.ID = id;
            staffSheduler.StartDate = startDate;
            staffSheduler.EndDate = endDate;
            staffSheduler.CreatedUserID = createdUserID;
            staffSheduler.CreatedDate = createdDate;
            return staffSheduler;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> StructureObjectID
        {
            get
            {
                return _StructureObjectID;
            }
            set
            {
                OnStructureObjectIDChanging(value);
                ReportPropertyChanging("StructureObjectID");
                _StructureObjectID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StructureObjectID");
                OnStructureObjectIDChanged();
            }
        }
        private Nullable<global::System.Int32> _StructureObjectID;
        partial void OnStructureObjectIDChanging(Nullable<global::System.Int32> value);
        partial void OnStructureObjectIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ShiftID
        {
            get
            {
                return _ShiftID;
            }
            set
            {
                OnShiftIDChanging(value);
                ReportPropertyChanging("ShiftID");
                _ShiftID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ShiftID");
                OnShiftIDChanged();
            }
        }
        private Nullable<global::System.Int32> _ShiftID;
        partial void OnShiftIDChanging(Nullable<global::System.Int32> value);
        partial void OnShiftIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> TeamID
        {
            get
            {
                return _TeamID;
            }
            set
            {
                OnTeamIDChanging(value);
                ReportPropertyChanging("TeamID");
                _TeamID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TeamID");
                OnTeamIDChanged();
            }
        }
        private Nullable<global::System.Int32> _TeamID;
        partial void OnTeamIDChanging(Nullable<global::System.Int32> value);
        partial void OnTeamIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> WorkPlaceID
        {
            get
            {
                return _WorkPlaceID;
            }
            set
            {
                OnWorkPlaceIDChanging(value);
                ReportPropertyChanging("WorkPlaceID");
                _WorkPlaceID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("WorkPlaceID");
                OnWorkPlaceIDChanged();
            }
        }
        private Nullable<global::System.Int32> _WorkPlaceID;
        partial void OnWorkPlaceIDChanging(Nullable<global::System.Int32> value);
        partial void OnWorkPlaceIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime StartDate
        {
            get
            {
                return _StartDate;
            }
            set
            {
                OnStartDateChanging(value);
                ReportPropertyChanging("StartDate");
                _StartDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StartDate");
                OnStartDateChanged();
            }
        }
        private global::System.DateTime _StartDate;
        partial void OnStartDateChanging(global::System.DateTime value);
        partial void OnStartDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime EndDate
        {
            get
            {
                return _EndDate;
            }
            set
            {
                OnEndDateChanging(value);
                ReportPropertyChanging("EndDate");
                _EndDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EndDate");
                OnEndDateChanged();
            }
        }
        private global::System.DateTime _EndDate;
        partial void OnEndDateChanging(global::System.DateTime value);
        partial void OnEndDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CreatedUserID
        {
            get
            {
                return _CreatedUserID;
            }
            set
            {
                OnCreatedUserIDChanging(value);
                ReportPropertyChanging("CreatedUserID");
                _CreatedUserID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedUserID");
                OnCreatedUserIDChanged();
            }
        }
        private global::System.Int32 _CreatedUserID;
        partial void OnCreatedUserIDChanging(global::System.Int32 value);
        partial void OnCreatedUserIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime CreatedDate
        {
            get
            {
                return _CreatedDate;
            }
            set
            {
                OnCreatedDateChanging(value);
                ReportPropertyChanging("CreatedDate");
                _CreatedDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedDate");
                OnCreatedDateChanged();
            }
        }
        private global::System.DateTime _CreatedDate;
        partial void OnCreatedDateChanging(global::System.DateTime value);
        partial void OnCreatedDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_StaffShedulerEmployees_StaffShedulers", "StaffShedulerEmployee")]
        public EntityCollection<StaffShedulerEmployee> StaffShedulerEmployees
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<StaffShedulerEmployee>("CompasModel.FK_StaffShedulerEmployees_StaffShedulers", "StaffShedulerEmployee");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<StaffShedulerEmployee>("CompasModel.FK_StaffShedulerEmployees_StaffShedulers", "StaffShedulerEmployee", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_StaffSheduler_StaffDepartments", "StaffStructureObject")]
        public StaffStructureObject StaffStructureObject
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffStructureObject>("CompasModel.FK_StaffSheduler_StaffDepartments", "StaffStructureObject").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffStructureObject>("CompasModel.FK_StaffSheduler_StaffDepartments", "StaffStructureObject").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<StaffStructureObject> StaffStructureObjectReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffStructureObject>("CompasModel.FK_StaffSheduler_StaffDepartments", "StaffStructureObject");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<StaffStructureObject>("CompasModel.FK_StaffSheduler_StaffDepartments", "StaffStructureObject", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_StaffSheduler_StaffShifts", "StaffShift")]
        public StaffShift StaffShift
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffShift>("CompasModel.FK_StaffSheduler_StaffShifts", "StaffShift").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffShift>("CompasModel.FK_StaffSheduler_StaffShifts", "StaffShift").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<StaffShift> StaffShiftReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffShift>("CompasModel.FK_StaffSheduler_StaffShifts", "StaffShift");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<StaffShift>("CompasModel.FK_StaffSheduler_StaffShifts", "StaffShift", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_StaffSheduler_StaffTeams", "StaffTeam")]
        public StaffTeam StaffTeam
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffTeam>("CompasModel.FK_StaffSheduler_StaffTeams", "StaffTeam").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffTeam>("CompasModel.FK_StaffSheduler_StaffTeams", "StaffTeam").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<StaffTeam> StaffTeamReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffTeam>("CompasModel.FK_StaffSheduler_StaffTeams", "StaffTeam");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<StaffTeam>("CompasModel.FK_StaffSheduler_StaffTeams", "StaffTeam", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="StaffShedulerEmployee")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class StaffShedulerEmployee : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта StaffShedulerEmployee.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="shedulerID">Исходное значение свойства ShedulerID.</param>
        /// <param name="employeeID">Исходное значение свойства EmployeeID.</param>
        public static StaffShedulerEmployee CreateStaffShedulerEmployee(global::System.Int32 id, global::System.Int32 shedulerID, global::System.Int32 employeeID)
        {
            StaffShedulerEmployee staffShedulerEmployee = new StaffShedulerEmployee();
            staffShedulerEmployee.ID = id;
            staffShedulerEmployee.ShedulerID = shedulerID;
            staffShedulerEmployee.EmployeeID = employeeID;
            return staffShedulerEmployee;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ShedulerID
        {
            get
            {
                return _ShedulerID;
            }
            set
            {
                OnShedulerIDChanging(value);
                ReportPropertyChanging("ShedulerID");
                _ShedulerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ShedulerID");
                OnShedulerIDChanged();
            }
        }
        private global::System.Int32 _ShedulerID;
        partial void OnShedulerIDChanging(global::System.Int32 value);
        partial void OnShedulerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 EmployeeID
        {
            get
            {
                return _EmployeeID;
            }
            set
            {
                OnEmployeeIDChanging(value);
                ReportPropertyChanging("EmployeeID");
                _EmployeeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EmployeeID");
                OnEmployeeIDChanged();
            }
        }
        private global::System.Int32 _EmployeeID;
        partial void OnEmployeeIDChanging(global::System.Int32 value);
        partial void OnEmployeeIDChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_StaffShedulerEmployees_StaffEmployees", "StaffEmployee")]
        public StaffEmployee StaffEmployee
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffEmployee>("CompasModel.FK_StaffShedulerEmployees_StaffEmployees", "StaffEmployee").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffEmployee>("CompasModel.FK_StaffShedulerEmployees_StaffEmployees", "StaffEmployee").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<StaffEmployee> StaffEmployeeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffEmployee>("CompasModel.FK_StaffShedulerEmployees_StaffEmployees", "StaffEmployee");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<StaffEmployee>("CompasModel.FK_StaffShedulerEmployees_StaffEmployees", "StaffEmployee", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_StaffShedulerEmployees_StaffShedulers", "StaffSheduler")]
        public StaffSheduler StaffSheduler
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffSheduler>("CompasModel.FK_StaffShedulerEmployees_StaffShedulers", "StaffSheduler").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffSheduler>("CompasModel.FK_StaffShedulerEmployees_StaffShedulers", "StaffSheduler").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<StaffSheduler> StaffShedulerReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffSheduler>("CompasModel.FK_StaffShedulerEmployees_StaffShedulers", "StaffSheduler");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<StaffSheduler>("CompasModel.FK_StaffShedulerEmployees_StaffShedulers", "StaffSheduler", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="StaffShift")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class StaffShift : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта StaffShift.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        /// <param name="startTime">Исходное значение свойства StartTime.</param>
        /// <param name="endTime">Исходное значение свойства EndTime.</param>
        public static StaffShift CreateStaffShift(global::System.Int32 id, global::System.String name, global::System.TimeSpan startTime, global::System.TimeSpan endTime)
        {
            StaffShift staffShift = new StaffShift();
            staffShift.ID = id;
            staffShift.Name = name;
            staffShift.StartTime = startTime;
            staffShift.EndTime = endTime;
            return staffShift;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.TimeSpan StartTime
        {
            get
            {
                return _StartTime;
            }
            set
            {
                OnStartTimeChanging(value);
                ReportPropertyChanging("StartTime");
                _StartTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StartTime");
                OnStartTimeChanged();
            }
        }
        private global::System.TimeSpan _StartTime;
        partial void OnStartTimeChanging(global::System.TimeSpan value);
        partial void OnStartTimeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.TimeSpan EndTime
        {
            get
            {
                return _EndTime;
            }
            set
            {
                OnEndTimeChanging(value);
                ReportPropertyChanging("EndTime");
                _EndTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EndTime");
                OnEndTimeChanged();
            }
        }
        private global::System.TimeSpan _EndTime;
        partial void OnEndTimeChanging(global::System.TimeSpan value);
        partial void OnEndTimeChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_StaffSheduler_StaffShifts", "StaffSheduler")]
        public EntityCollection<StaffSheduler> StaffShedulers
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<StaffSheduler>("CompasModel.FK_StaffSheduler_StaffShifts", "StaffSheduler");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<StaffSheduler>("CompasModel.FK_StaffSheduler_StaffShifts", "StaffSheduler", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="StaffStructureObject")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class StaffStructureObject : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта StaffStructureObject.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        /// <param name="allowServices">Исходное значение свойства AllowServices.</param>
        /// <param name="active">Исходное значение свойства Active.</param>
        public static StaffStructureObject CreateStaffStructureObject(global::System.Int32 id, global::System.String name, global::System.Boolean allowServices, global::System.Boolean active)
        {
            StaffStructureObject staffStructureObject = new StaffStructureObject();
            staffStructureObject.ID = id;
            staffStructureObject.Name = name;
            staffStructureObject.AllowServices = allowServices;
            staffStructureObject.Active = active;
            return staffStructureObject;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ParentStructureObjectID
        {
            get
            {
                return _ParentStructureObjectID;
            }
            set
            {
                OnParentStructureObjectIDChanging(value);
                ReportPropertyChanging("ParentStructureObjectID");
                _ParentStructureObjectID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ParentStructureObjectID");
                OnParentStructureObjectIDChanged();
            }
        }
        private Nullable<global::System.Int32> _ParentStructureObjectID;
        partial void OnParentStructureObjectIDChanging(Nullable<global::System.Int32> value);
        partial void OnParentStructureObjectIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean AllowServices
        {
            get
            {
                return _AllowServices;
            }
            set
            {
                OnAllowServicesChanging(value);
                ReportPropertyChanging("AllowServices");
                _AllowServices = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AllowServices");
                OnAllowServicesChanged();
            }
        }
        private global::System.Boolean _AllowServices;
        partial void OnAllowServicesChanging(global::System.Boolean value);
        partial void OnAllowServicesChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Active
        {
            get
            {
                return _Active;
            }
            set
            {
                OnActiveChanging(value);
                ReportPropertyChanging("Active");
                _Active = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Active");
                OnActiveChanged();
            }
        }
        private global::System.Boolean _Active;
        partial void OnActiveChanging(global::System.Boolean value);
        partial void OnActiveChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_StaffEmployeePositions_StaffDepartments", "StaffEmployeePosition")]
        public EntityCollection<StaffEmployeePosition> StaffEmployeePositions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<StaffEmployeePosition>("CompasModel.FK_StaffEmployeePositions_StaffDepartments", "StaffEmployeePosition");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<StaffEmployeePosition>("CompasModel.FK_StaffEmployeePositions_StaffDepartments", "StaffEmployeePosition", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_StaffSalaries_StaffDepartments", "StaffEmployeeSalary")]
        public EntityCollection<StaffEmployeeSalary> StaffEmployeeSalaries
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<StaffEmployeeSalary>("CompasModel.FK_StaffSalaries_StaffDepartments", "StaffEmployeeSalary");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<StaffEmployeeSalary>("CompasModel.FK_StaffSalaries_StaffDepartments", "StaffEmployeeSalary", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_StaffSheduler_StaffDepartments", "StaffSheduler")]
        public EntityCollection<StaffSheduler> StaffShedulers
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<StaffSheduler>("CompasModel.FK_StaffSheduler_StaffDepartments", "StaffSheduler");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<StaffSheduler>("CompasModel.FK_StaffSheduler_StaffDepartments", "StaffSheduler", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_Departments_Departments", "StaffStructureObject1")]
        public EntityCollection<StaffStructureObject> StaffStructureObjects1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<StaffStructureObject>("CompasModel.FK_Departments_Departments", "StaffStructureObject1");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<StaffStructureObject>("CompasModel.FK_Departments_Departments", "StaffStructureObject1", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_Departments_Departments", "StaffStructureObject")]
        public StaffStructureObject StaffStructureObject1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffStructureObject>("CompasModel.FK_Departments_Departments", "StaffStructureObject").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffStructureObject>("CompasModel.FK_Departments_Departments", "StaffStructureObject").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<StaffStructureObject> StaffStructureObject1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffStructureObject>("CompasModel.FK_Departments_Departments", "StaffStructureObject");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<StaffStructureObject>("CompasModel.FK_Departments_Departments", "StaffStructureObject", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_StaffTeams_StaffDepartments", "StaffTeam")]
        public EntityCollection<StaffTeam> StaffTeams
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<StaffTeam>("CompasModel.FK_StaffTeams_StaffDepartments", "StaffTeam");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<StaffTeam>("CompasModel.FK_StaffTeams_StaffDepartments", "StaffTeam", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocumentPayments_StaffStructureObjects", "WareDocumentPayment")]
        public EntityCollection<WareDocumentPayment> WareDocumentPayments
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareDocumentPayment>("CompasModel.FK_WareDocumentPayments_StaffStructureObjects", "WareDocumentPayment");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareDocumentPayment>("CompasModel.FK_WareDocumentPayments_StaffStructureObjects", "WareDocumentPayment", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocuments_StaffDepartments", "WareDocument")]
        public EntityCollection<WareDocument> WareDocuments
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareDocument>("CompasModel.FK_WareDocuments_StaffDepartments", "WareDocument");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareDocument>("CompasModel.FK_WareDocuments_StaffDepartments", "WareDocument", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocuments_StaffDepartments1", "WareDocument")]
        public EntityCollection<WareDocument> WareDocuments1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareDocument>("CompasModel.FK_WareDocuments_StaffDepartments1", "WareDocument");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareDocument>("CompasModel.FK_WareDocuments_StaffDepartments1", "WareDocument", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareRemains_StaffStructureObjects", "WareRemain")]
        public EntityCollection<WareRemain> WareRemains
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareRemain>("CompasModel.FK_WareRemains_StaffStructureObjects", "WareRemain");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareRemain>("CompasModel.FK_WareRemains_StaffStructureObjects", "WareRemain", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="StaffTeam")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class StaffTeam : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта StaffTeam.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="structureObjectID">Исходное значение свойства StructureObjectID.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        public static StaffTeam CreateStaffTeam(global::System.Int32 id, global::System.Int32 structureObjectID, global::System.String name)
        {
            StaffTeam staffTeam = new StaffTeam();
            staffTeam.ID = id;
            staffTeam.StructureObjectID = structureObjectID;
            staffTeam.Name = name;
            return staffTeam;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 StructureObjectID
        {
            get
            {
                return _StructureObjectID;
            }
            set
            {
                OnStructureObjectIDChanging(value);
                ReportPropertyChanging("StructureObjectID");
                _StructureObjectID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StructureObjectID");
                OnStructureObjectIDChanged();
            }
        }
        private global::System.Int32 _StructureObjectID;
        partial void OnStructureObjectIDChanging(global::System.Int32 value);
        partial void OnStructureObjectIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_StaffSheduler_StaffTeams", "StaffSheduler")]
        public EntityCollection<StaffSheduler> StaffShedulers
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<StaffSheduler>("CompasModel.FK_StaffSheduler_StaffTeams", "StaffSheduler");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<StaffSheduler>("CompasModel.FK_StaffSheduler_StaffTeams", "StaffSheduler", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_StaffTeams_StaffDepartments", "StaffStructureObject")]
        public StaffStructureObject StaffStructureObject
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffStructureObject>("CompasModel.FK_StaffTeams_StaffDepartments", "StaffStructureObject").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffStructureObject>("CompasModel.FK_StaffTeams_StaffDepartments", "StaffStructureObject").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<StaffStructureObject> StaffStructureObjectReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffStructureObject>("CompasModel.FK_StaffTeams_StaffDepartments", "StaffStructureObject");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<StaffStructureObject>("CompasModel.FK_StaffTeams_StaffDepartments", "StaffStructureObject", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_StaffTeamEmployees_StaffTeams", "StaffTeamEmployee")]
        public EntityCollection<StaffTeamEmployee> StaffTeamEmployees
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<StaffTeamEmployee>("CompasModel.FK_StaffTeamEmployees_StaffTeams", "StaffTeamEmployee");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<StaffTeamEmployee>("CompasModel.FK_StaffTeamEmployees_StaffTeams", "StaffTeamEmployee", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocumentStaffDetails_StaffTeams", "WareDocumentStaffDetail")]
        public EntityCollection<WareDocumentStaffDetail> WareDocumentStaffDetails
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareDocumentStaffDetail>("CompasModel.FK_WareDocumentStaffDetails_StaffTeams", "WareDocumentStaffDetail");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareDocumentStaffDetail>("CompasModel.FK_WareDocumentStaffDetails_StaffTeams", "WareDocumentStaffDetail", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="StaffTeamEmployee")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class StaffTeamEmployee : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта StaffTeamEmployee.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="teamID">Исходное значение свойства TeamID.</param>
        /// <param name="employeeID">Исходное значение свойства EmployeeID.</param>
        public static StaffTeamEmployee CreateStaffTeamEmployee(global::System.Int32 id, global::System.Int32 teamID, global::System.Int32 employeeID)
        {
            StaffTeamEmployee staffTeamEmployee = new StaffTeamEmployee();
            staffTeamEmployee.ID = id;
            staffTeamEmployee.TeamID = teamID;
            staffTeamEmployee.EmployeeID = employeeID;
            return staffTeamEmployee;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TeamID
        {
            get
            {
                return _TeamID;
            }
            set
            {
                OnTeamIDChanging(value);
                ReportPropertyChanging("TeamID");
                _TeamID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TeamID");
                OnTeamIDChanged();
            }
        }
        private global::System.Int32 _TeamID;
        partial void OnTeamIDChanging(global::System.Int32 value);
        partial void OnTeamIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 EmployeeID
        {
            get
            {
                return _EmployeeID;
            }
            set
            {
                OnEmployeeIDChanging(value);
                ReportPropertyChanging("EmployeeID");
                _EmployeeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EmployeeID");
                OnEmployeeIDChanged();
            }
        }
        private global::System.Int32 _EmployeeID;
        partial void OnEmployeeIDChanging(global::System.Int32 value);
        partial void OnEmployeeIDChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_StaffTeamEmployees_StaffEmployees", "StaffEmployee")]
        public StaffEmployee StaffEmployee
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffEmployee>("CompasModel.FK_StaffTeamEmployees_StaffEmployees", "StaffEmployee").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffEmployee>("CompasModel.FK_StaffTeamEmployees_StaffEmployees", "StaffEmployee").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<StaffEmployee> StaffEmployeeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffEmployee>("CompasModel.FK_StaffTeamEmployees_StaffEmployees", "StaffEmployee");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<StaffEmployee>("CompasModel.FK_StaffTeamEmployees_StaffEmployees", "StaffEmployee", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_StaffTeamEmployees_StaffTeams", "StaffTeam")]
        public StaffTeam StaffTeam
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffTeam>("CompasModel.FK_StaffTeamEmployees_StaffTeams", "StaffTeam").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffTeam>("CompasModel.FK_StaffTeamEmployees_StaffTeams", "StaffTeam").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<StaffTeam> StaffTeamReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffTeam>("CompasModel.FK_StaffTeamEmployees_StaffTeams", "StaffTeam");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<StaffTeam>("CompasModel.FK_StaffTeamEmployees_StaffTeams", "StaffTeam", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="StatesOfDocument")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class StatesOfDocument : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта StatesOfDocument.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        public static StatesOfDocument CreateStatesOfDocument(global::System.Int32 id, global::System.String name)
        {
            StatesOfDocument statesOfDocument = new StatesOfDocument();
            statesOfDocument.ID = id;
            statesOfDocument.Name = name;
            return statesOfDocument;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocumentStates_StatesOfDocuments", "WareDocumentState")]
        public EntityCollection<WareDocumentState> WareDocumentStates
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareDocumentState>("CompasModel.FK_WareDocumentStates_StatesOfDocuments", "WareDocumentState");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareDocumentState>("CompasModel.FK_WareDocumentStates_StatesOfDocuments", "WareDocumentState", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="ViewConfigurationParameter")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewConfigurationParameter : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewConfigurationParameter.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="modeID">Исходное значение свойства ModeID.</param>
        /// <param name="parameter">Исходное значение свойства Parameter.</param>
        /// <param name="value">Исходное значение свойства Value.</param>
        /// <param name="comment">Исходное значение свойства Comment.</param>
        public static ViewConfigurationParameter CreateViewConfigurationParameter(global::System.Int32 id, global::System.Int32 modeID, global::System.String parameter, global::System.String value, global::System.String comment)
        {
            ViewConfigurationParameter viewConfigurationParameter = new ViewConfigurationParameter();
            viewConfigurationParameter.ID = id;
            viewConfigurationParameter.ModeID = modeID;
            viewConfigurationParameter.Parameter = parameter;
            viewConfigurationParameter.Value = value;
            viewConfigurationParameter.Comment = comment;
            return viewConfigurationParameter;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> InstallationID
        {
            get
            {
                return _InstallationID;
            }
            set
            {
                OnInstallationIDChanging(value);
                ReportPropertyChanging("InstallationID");
                _InstallationID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("InstallationID");
                OnInstallationIDChanged();
            }
        }
        private Nullable<global::System.Int32> _InstallationID;
        partial void OnInstallationIDChanging(Nullable<global::System.Int32> value);
        partial void OnInstallationIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> UserID
        {
            get
            {
                return _UserID;
            }
            set
            {
                OnUserIDChanging(value);
                ReportPropertyChanging("UserID");
                _UserID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UserID");
                OnUserIDChanged();
            }
        }
        private Nullable<global::System.Int32> _UserID;
        partial void OnUserIDChanging(Nullable<global::System.Int32> value);
        partial void OnUserIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ModeID
        {
            get
            {
                return _ModeID;
            }
            set
            {
                if (_ModeID != value)
                {
                    OnModeIDChanging(value);
                    ReportPropertyChanging("ModeID");
                    _ModeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ModeID");
                    OnModeIDChanged();
                }
            }
        }
        private global::System.Int32 _ModeID;
        partial void OnModeIDChanging(global::System.Int32 value);
        partial void OnModeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Parameter
        {
            get
            {
                return _Parameter;
            }
            set
            {
                if (_Parameter != value)
                {
                    OnParameterChanging(value);
                    ReportPropertyChanging("Parameter");
                    _Parameter = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Parameter");
                    OnParameterChanged();
                }
            }
        }
        private global::System.String _Parameter;
        partial void OnParameterChanging(global::System.String value);
        partial void OnParameterChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Value
        {
            get
            {
                return _Value;
            }
            set
            {
                if (_Value != value)
                {
                    OnValueChanging(value);
                    ReportPropertyChanging("Value");
                    _Value = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Value");
                    OnValueChanged();
                }
            }
        }
        private global::System.String _Value;
        partial void OnValueChanging(global::System.String value);
        partial void OnValueChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Comment
        {
            get
            {
                return _Comment;
            }
            set
            {
                if (_Comment != value)
                {
                    OnCommentChanging(value);
                    ReportPropertyChanging("Comment");
                    _Comment = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Comment");
                    OnCommentChanged();
                }
            }
        }
        private global::System.String _Comment;
        partial void OnCommentChanging(global::System.String value);
        partial void OnCommentChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String InstallationIDCode
        {
            get
            {
                return _InstallationIDCode;
            }
            set
            {
                OnInstallationIDCodeChanging(value);
                ReportPropertyChanging("InstallationIDCode");
                _InstallationIDCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("InstallationIDCode");
                OnInstallationIDCodeChanged();
            }
        }
        private global::System.String _InstallationIDCode;
        partial void OnInstallationIDCodeChanging(global::System.String value);
        partial void OnInstallationIDCodeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String LastName
        {
            get
            {
                return _LastName;
            }
            set
            {
                OnLastNameChanging(value);
                ReportPropertyChanging("LastName");
                _LastName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("LastName");
                OnLastNameChanged();
            }
        }
        private global::System.String _LastName;
        partial void OnLastNameChanging(global::System.String value);
        partial void OnLastNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FirstName
        {
            get
            {
                return _FirstName;
            }
            set
            {
                OnFirstNameChanging(value);
                ReportPropertyChanging("FirstName");
                _FirstName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FirstName");
                OnFirstNameChanged();
            }
        }
        private global::System.String _FirstName;
        partial void OnFirstNameChanging(global::System.String value);
        partial void OnFirstNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MiddleName
        {
            get
            {
                return _MiddleName;
            }
            set
            {
                OnMiddleNameChanging(value);
                ReportPropertyChanging("MiddleName");
                _MiddleName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MiddleName");
                OnMiddleNameChanged();
            }
        }
        private global::System.String _MiddleName;
        partial void OnMiddleNameChanging(global::System.String value);
        partial void OnMiddleNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FullName
        {
            get
            {
                return _FullName;
            }
            set
            {
                OnFullNameChanging(value);
                ReportPropertyChanging("FullName");
                _FullName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FullName");
                OnFullNameChanged();
            }
        }
        private global::System.String _FullName;
        partial void OnFullNameChanging(global::System.String value);
        partial void OnFullNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ModeName
        {
            get
            {
                return _ModeName;
            }
            set
            {
                OnModeNameChanging(value);
                ReportPropertyChanging("ModeName");
                _ModeName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ModeName");
                OnModeNameChanged();
            }
        }
        private global::System.String _ModeName;
        partial void OnModeNameChanging(global::System.String value);
        partial void OnModeNameChanged();

        #endregion
    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="ViewContractorCard")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewContractorCard : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewContractorCard.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="cardID">Исходное значение свойства CardID.</param>
        /// <param name="contractorID">Исходное значение свойства ContractorID.</param>
        public static ViewContractorCard CreateViewContractorCard(global::System.Int32 id, global::System.Int32 cardID, global::System.Int32 contractorID)
        {
            ViewContractorCard viewContractorCard = new ViewContractorCard();
            viewContractorCard.ID = id;
            viewContractorCard.CardID = cardID;
            viewContractorCard.ContractorID = contractorID;
            return viewContractorCard;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CardID
        {
            get
            {
                return _CardID;
            }
            set
            {
                if (_CardID != value)
                {
                    OnCardIDChanging(value);
                    ReportPropertyChanging("CardID");
                    _CardID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CardID");
                    OnCardIDChanged();
                }
            }
        }
        private global::System.Int32 _CardID;
        partial void OnCardIDChanging(global::System.Int32 value);
        partial void OnCardIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ContractorID
        {
            get
            {
                return _ContractorID;
            }
            set
            {
                if (_ContractorID != value)
                {
                    OnContractorIDChanging(value);
                    ReportPropertyChanging("ContractorID");
                    _ContractorID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ContractorID");
                    OnContractorIDChanged();
                }
            }
        }
        private global::System.Int32 _ContractorID;
        partial void OnContractorIDChanging(global::System.Int32 value);
        partial void OnContractorIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Code
        {
            get
            {
                return _Code;
            }
            set
            {
                OnCodeChanging(value);
                ReportPropertyChanging("Code");
                _Code = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Code");
                OnCodeChanged();
            }
        }
        private global::System.String _Code;
        partial void OnCodeChanging(global::System.String value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> CardTypeID
        {
            get
            {
                return _CardTypeID;
            }
            set
            {
                OnCardTypeIDChanging(value);
                ReportPropertyChanging("CardTypeID");
                _CardTypeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CardTypeID");
                OnCardTypeIDChanged();
            }
        }
        private Nullable<global::System.Int32> _CardTypeID;
        partial void OnCardTypeIDChanging(Nullable<global::System.Int32> value);
        partial void OnCardTypeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Active
        {
            get
            {
                return _Active;
            }
            set
            {
                OnActiveChanging(value);
                ReportPropertyChanging("Active");
                _Active = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Active");
                OnActiveChanged();
            }
        }
        private Nullable<global::System.Boolean> _Active;
        partial void OnActiveChanging(Nullable<global::System.Boolean> value);
        partial void OnActiveChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> IssuedDate
        {
            get
            {
                return _IssuedDate;
            }
            set
            {
                OnIssuedDateChanging(value);
                ReportPropertyChanging("IssuedDate");
                _IssuedDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IssuedDate");
                OnIssuedDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _IssuedDate;
        partial void OnIssuedDateChanging(Nullable<global::System.DateTime> value);
        partial void OnIssuedDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> UsedDate
        {
            get
            {
                return _UsedDate;
            }
            set
            {
                OnUsedDateChanging(value);
                ReportPropertyChanging("UsedDate");
                _UsedDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UsedDate");
                OnUsedDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _UsedDate;
        partial void OnUsedDateChanging(Nullable<global::System.DateTime> value);
        partial void OnUsedDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> AllowBalance
        {
            get
            {
                return _AllowBalance;
            }
            set
            {
                OnAllowBalanceChanging(value);
                ReportPropertyChanging("AllowBalance");
                _AllowBalance = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AllowBalance");
                OnAllowBalanceChanged();
            }
        }
        private Nullable<global::System.Boolean> _AllowBalance;
        partial void OnAllowBalanceChanging(Nullable<global::System.Boolean> value);
        partial void OnAllowBalanceChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> AllowMultipleCars
        {
            get
            {
                return _AllowMultipleCars;
            }
            set
            {
                OnAllowMultipleCarsChanging(value);
                ReportPropertyChanging("AllowMultipleCars");
                _AllowMultipleCars = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AllowMultipleCars");
                OnAllowMultipleCarsChanged();
            }
        }
        private Nullable<global::System.Boolean> _AllowMultipleCars;
        partial void OnAllowMultipleCarsChanging(Nullable<global::System.Boolean> value);
        partial void OnAllowMultipleCarsChanged();

        #endregion
    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="ViewDocument")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewDocument : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewDocument.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="documentTypeID">Исходное значение свойства DocumentTypeID.</param>
        /// <param name="createdDate">Исходное значение свойства CreatedDate.</param>
        /// <param name="currencyID">Исходное значение свойства CurrencyID.</param>
        /// <param name="documentSum">Исходное значение свойства DocumentSum.</param>
        /// <param name="paySum">Исходное значение свойства PaySum.</param>
        public static ViewDocument CreateViewDocument(global::System.Int32 id, global::System.Int32 documentTypeID, global::System.DateTime createdDate, global::System.Int32 currencyID, global::System.Decimal documentSum, global::System.Decimal paySum)
        {
            ViewDocument viewDocument = new ViewDocument();
            viewDocument.ID = id;
            viewDocument.DocumentTypeID = documentTypeID;
            viewDocument.CreatedDate = createdDate;
            viewDocument.CurrencyID = currencyID;
            viewDocument.DocumentSum = documentSum;
            viewDocument.PaySum = paySum;
            return viewDocument;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Number
        {
            get
            {
                return _Number;
            }
            set
            {
                OnNumberChanging(value);
                ReportPropertyChanging("Number");
                _Number = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Number");
                OnNumberChanged();
            }
        }
        private global::System.String _Number;
        partial void OnNumberChanging(global::System.String value);
        partial void OnNumberChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> Date
        {
            get
            {
                return _Date;
            }
            set
            {
                OnDateChanging(value);
                ReportPropertyChanging("Date");
                _Date = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Date");
                OnDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _Date;
        partial void OnDateChanging(Nullable<global::System.DateTime> value);
        partial void OnDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DocumentTypeName
        {
            get
            {
                return _DocumentTypeName;
            }
            set
            {
                OnDocumentTypeNameChanging(value);
                ReportPropertyChanging("DocumentTypeName");
                _DocumentTypeName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DocumentTypeName");
                OnDocumentTypeNameChanged();
            }
        }
        private global::System.String _DocumentTypeName;
        partial void OnDocumentTypeNameChanging(global::System.String value);
        partial void OnDocumentTypeNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DocumentTypeID
        {
            get
            {
                return _DocumentTypeID;
            }
            set
            {
                if (_DocumentTypeID != value)
                {
                    OnDocumentTypeIDChanging(value);
                    ReportPropertyChanging("DocumentTypeID");
                    _DocumentTypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DocumentTypeID");
                    OnDocumentTypeIDChanged();
                }
            }
        }
        private global::System.Int32 _DocumentTypeID;
        partial void OnDocumentTypeIDChanging(global::System.Int32 value);
        partial void OnDocumentTypeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime CreatedDate
        {
            get
            {
                return _CreatedDate;
            }
            set
            {
                if (_CreatedDate != value)
                {
                    OnCreatedDateChanging(value);
                    ReportPropertyChanging("CreatedDate");
                    _CreatedDate = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CreatedDate");
                    OnCreatedDateChanged();
                }
            }
        }
        private global::System.DateTime _CreatedDate;
        partial void OnCreatedDateChanging(global::System.DateTime value);
        partial void OnCreatedDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CurrencyName
        {
            get
            {
                return _CurrencyName;
            }
            set
            {
                OnCurrencyNameChanging(value);
                ReportPropertyChanging("CurrencyName");
                _CurrencyName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CurrencyName");
                OnCurrencyNameChanged();
            }
        }
        private global::System.String _CurrencyName;
        partial void OnCurrencyNameChanging(global::System.String value);
        partial void OnCurrencyNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CurrencyID
        {
            get
            {
                return _CurrencyID;
            }
            set
            {
                if (_CurrencyID != value)
                {
                    OnCurrencyIDChanging(value);
                    ReportPropertyChanging("CurrencyID");
                    _CurrencyID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CurrencyID");
                    OnCurrencyIDChanged();
                }
            }
        }
        private global::System.Int32 _CurrencyID;
        partial void OnCurrencyIDChanging(global::System.Int32 value);
        partial void OnCurrencyIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal DocumentSum
        {
            get
            {
                return _DocumentSum;
            }
            set
            {
                if (_DocumentSum != value)
                {
                    OnDocumentSumChanging(value);
                    ReportPropertyChanging("DocumentSum");
                    _DocumentSum = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DocumentSum");
                    OnDocumentSumChanged();
                }
            }
        }
        private global::System.Decimal _DocumentSum;
        partial void OnDocumentSumChanging(global::System.Decimal value);
        partial void OnDocumentSumChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal PaySum
        {
            get
            {
                return _PaySum;
            }
            set
            {
                if (_PaySum != value)
                {
                    OnPaySumChanging(value);
                    ReportPropertyChanging("PaySum");
                    _PaySum = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PaySum");
                    OnPaySumChanged();
                }
            }
        }
        private global::System.Decimal _PaySum;
        partial void OnPaySumChanging(global::System.Decimal value);
        partial void OnPaySumChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Address
        {
            get
            {
                return _Address;
            }
            set
            {
                OnAddressChanging(value);
                ReportPropertyChanging("Address");
                _Address = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Address");
                OnAddressChanged();
            }
        }
        private global::System.String _Address;
        partial void OnAddressChanging(global::System.String value);
        partial void OnAddressChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> EnterpriseID
        {
            get
            {
                return _EnterpriseID;
            }
            set
            {
                OnEnterpriseIDChanging(value);
                ReportPropertyChanging("EnterpriseID");
                _EnterpriseID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EnterpriseID");
                OnEnterpriseIDChanged();
            }
        }
        private Nullable<global::System.Int32> _EnterpriseID;
        partial void OnEnterpriseIDChanging(Nullable<global::System.Int32> value);
        partial void OnEnterpriseIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String EnterpriseName
        {
            get
            {
                return _EnterpriseName;
            }
            set
            {
                OnEnterpriseNameChanging(value);
                ReportPropertyChanging("EnterpriseName");
                _EnterpriseName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("EnterpriseName");
                OnEnterpriseNameChanged();
            }
        }
        private global::System.String _EnterpriseName;
        partial void OnEnterpriseNameChanging(global::System.String value);
        partial void OnEnterpriseNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> CreatedEmployeeID
        {
            get
            {
                return _CreatedEmployeeID;
            }
            set
            {
                OnCreatedEmployeeIDChanging(value);
                ReportPropertyChanging("CreatedEmployeeID");
                _CreatedEmployeeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedEmployeeID");
                OnCreatedEmployeeIDChanged();
            }
        }
        private Nullable<global::System.Int32> _CreatedEmployeeID;
        partial void OnCreatedEmployeeIDChanging(Nullable<global::System.Int32> value);
        partial void OnCreatedEmployeeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String EmployeeFullName
        {
            get
            {
                return _EmployeeFullName;
            }
            set
            {
                OnEmployeeFullNameChanging(value);
                ReportPropertyChanging("EmployeeFullName");
                _EmployeeFullName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("EmployeeFullName");
                OnEmployeeFullNameChanged();
            }
        }
        private global::System.String _EmployeeFullName;
        partial void OnEmployeeFullNameChanging(global::System.String value);
        partial void OnEmployeeFullNameChanged();

        #endregion
    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="ViewPayment")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewPayment : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewPayment.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="date">Исходное значение свойства Date.</param>
        /// <param name="suma">Исходное значение свойства Suma.</param>
        /// <param name="createdUserID">Исходное значение свойства CreatedUserID.</param>
        /// <param name="createdDate">Исходное значение свойства CreatedDate.</param>
        /// <param name="active">Исходное значение свойства Active.</param>
        /// <param name="documentID">Исходное значение свойства DocumentID.</param>
        /// <param name="currencyID">Исходное значение свойства CurrencyID.</param>
        /// <param name="paymentTypeID">Исходное значение свойства PaymentTypeID.</param>
        /// <param name="structureObjectID">Исходное значение свойства StructureObjectID.</param>
        public static ViewPayment CreateViewPayment(global::System.Int32 id, global::System.DateTime date, global::System.Decimal suma, global::System.Int32 createdUserID, global::System.DateTime createdDate, global::System.Boolean active, global::System.Int32 documentID, global::System.Int32 currencyID, global::System.Int32 paymentTypeID, global::System.Int32 structureObjectID)
        {
            ViewPayment viewPayment = new ViewPayment();
            viewPayment.ID = id;
            viewPayment.Date = date;
            viewPayment.Suma = suma;
            viewPayment.CreatedUserID = createdUserID;
            viewPayment.CreatedDate = createdDate;
            viewPayment.Active = active;
            viewPayment.DocumentID = documentID;
            viewPayment.CurrencyID = currencyID;
            viewPayment.PaymentTypeID = paymentTypeID;
            viewPayment.StructureObjectID = structureObjectID;
            return viewPayment;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Date
        {
            get
            {
                return _Date;
            }
            set
            {
                if (_Date != value)
                {
                    OnDateChanging(value);
                    ReportPropertyChanging("Date");
                    _Date = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Date");
                    OnDateChanged();
                }
            }
        }
        private global::System.DateTime _Date;
        partial void OnDateChanging(global::System.DateTime value);
        partial void OnDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal Suma
        {
            get
            {
                return _Suma;
            }
            set
            {
                if (_Suma != value)
                {
                    OnSumaChanging(value);
                    ReportPropertyChanging("Suma");
                    _Suma = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Suma");
                    OnSumaChanged();
                }
            }
        }
        private global::System.Decimal _Suma;
        partial void OnSumaChanging(global::System.Decimal value);
        partial void OnSumaChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CreatedUserID
        {
            get
            {
                return _CreatedUserID;
            }
            set
            {
                if (_CreatedUserID != value)
                {
                    OnCreatedUserIDChanging(value);
                    ReportPropertyChanging("CreatedUserID");
                    _CreatedUserID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CreatedUserID");
                    OnCreatedUserIDChanged();
                }
            }
        }
        private global::System.Int32 _CreatedUserID;
        partial void OnCreatedUserIDChanging(global::System.Int32 value);
        partial void OnCreatedUserIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime CreatedDate
        {
            get
            {
                return _CreatedDate;
            }
            set
            {
                if (_CreatedDate != value)
                {
                    OnCreatedDateChanging(value);
                    ReportPropertyChanging("CreatedDate");
                    _CreatedDate = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CreatedDate");
                    OnCreatedDateChanged();
                }
            }
        }
        private global::System.DateTime _CreatedDate;
        partial void OnCreatedDateChanging(global::System.DateTime value);
        partial void OnCreatedDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Active
        {
            get
            {
                return _Active;
            }
            set
            {
                if (_Active != value)
                {
                    OnActiveChanging(value);
                    ReportPropertyChanging("Active");
                    _Active = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Active");
                    OnActiveChanged();
                }
            }
        }
        private global::System.Boolean _Active;
        partial void OnActiveChanging(global::System.Boolean value);
        partial void OnActiveChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DocumentID
        {
            get
            {
                return _DocumentID;
            }
            set
            {
                if (_DocumentID != value)
                {
                    OnDocumentIDChanging(value);
                    ReportPropertyChanging("DocumentID");
                    _DocumentID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DocumentID");
                    OnDocumentIDChanged();
                }
            }
        }
        private global::System.Int32 _DocumentID;
        partial void OnDocumentIDChanging(global::System.Int32 value);
        partial void OnDocumentIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CurrencyID
        {
            get
            {
                return _CurrencyID;
            }
            set
            {
                if (_CurrencyID != value)
                {
                    OnCurrencyIDChanging(value);
                    ReportPropertyChanging("CurrencyID");
                    _CurrencyID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CurrencyID");
                    OnCurrencyIDChanged();
                }
            }
        }
        private global::System.Int32 _CurrencyID;
        partial void OnCurrencyIDChanging(global::System.Int32 value);
        partial void OnCurrencyIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> DocumentTypeID
        {
            get
            {
                return _DocumentTypeID;
            }
            set
            {
                OnDocumentTypeIDChanging(value);
                ReportPropertyChanging("DocumentTypeID");
                _DocumentTypeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DocumentTypeID");
                OnDocumentTypeIDChanged();
            }
        }
        private Nullable<global::System.Int32> _DocumentTypeID;
        partial void OnDocumentTypeIDChanging(Nullable<global::System.Int32> value);
        partial void OnDocumentTypeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PaymentTypeID
        {
            get
            {
                return _PaymentTypeID;
            }
            set
            {
                if (_PaymentTypeID != value)
                {
                    OnPaymentTypeIDChanging(value);
                    ReportPropertyChanging("PaymentTypeID");
                    _PaymentTypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PaymentTypeID");
                    OnPaymentTypeIDChanged();
                }
            }
        }
        private global::System.Int32 _PaymentTypeID;
        partial void OnPaymentTypeIDChanging(global::System.Int32 value);
        partial void OnPaymentTypeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 StructureObjectID
        {
            get
            {
                return _StructureObjectID;
            }
            set
            {
                if (_StructureObjectID != value)
                {
                    OnStructureObjectIDChanging(value);
                    ReportPropertyChanging("StructureObjectID");
                    _StructureObjectID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("StructureObjectID");
                    OnStructureObjectIDChanged();
                }
            }
        }
        private global::System.Int32 _StructureObjectID;
        partial void OnStructureObjectIDChanging(global::System.Int32 value);
        partial void OnStructureObjectIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> CardID
        {
            get
            {
                return _CardID;
            }
            set
            {
                OnCardIDChanging(value);
                ReportPropertyChanging("CardID");
                _CardID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CardID");
                OnCardIDChanged();
            }
        }
        private Nullable<global::System.Int32> _CardID;
        partial void OnCardIDChanging(Nullable<global::System.Int32> value);
        partial void OnCardIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Login
        {
            get
            {
                return _Login;
            }
            set
            {
                OnLoginChanging(value);
                ReportPropertyChanging("Login");
                _Login = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Login");
                OnLoginChanged();
            }
        }
        private global::System.String _Login;
        partial void OnLoginChanging(global::System.String value);
        partial void OnLoginChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FullEmployeeName
        {
            get
            {
                return _FullEmployeeName;
            }
            set
            {
                OnFullEmployeeNameChanging(value);
                ReportPropertyChanging("FullEmployeeName");
                _FullEmployeeName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FullEmployeeName");
                OnFullEmployeeNameChanged();
            }
        }
        private global::System.String _FullEmployeeName;
        partial void OnFullEmployeeNameChanging(global::System.String value);
        partial void OnFullEmployeeNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DocumentNumber
        {
            get
            {
                return _DocumentNumber;
            }
            set
            {
                OnDocumentNumberChanging(value);
                ReportPropertyChanging("DocumentNumber");
                _DocumentNumber = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DocumentNumber");
                OnDocumentNumberChanged();
            }
        }
        private global::System.String _DocumentNumber;
        partial void OnDocumentNumberChanging(global::System.String value);
        partial void OnDocumentNumberChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CurrencyName
        {
            get
            {
                return _CurrencyName;
            }
            set
            {
                OnCurrencyNameChanging(value);
                ReportPropertyChanging("CurrencyName");
                _CurrencyName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CurrencyName");
                OnCurrencyNameChanged();
            }
        }
        private global::System.String _CurrencyName;
        partial void OnCurrencyNameChanging(global::System.String value);
        partial void OnCurrencyNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PaymentTypeName
        {
            get
            {
                return _PaymentTypeName;
            }
            set
            {
                OnPaymentTypeNameChanging(value);
                ReportPropertyChanging("PaymentTypeName");
                _PaymentTypeName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PaymentTypeName");
                OnPaymentTypeNameChanged();
            }
        }
        private global::System.String _PaymentTypeName;
        partial void OnPaymentTypeNameChanging(global::System.String value);
        partial void OnPaymentTypeNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String StructureObjectName
        {
            get
            {
                return _StructureObjectName;
            }
            set
            {
                OnStructureObjectNameChanging(value);
                ReportPropertyChanging("StructureObjectName");
                _StructureObjectName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("StructureObjectName");
                OnStructureObjectNameChanged();
            }
        }
        private global::System.String _StructureObjectName;
        partial void OnStructureObjectNameChanging(global::System.String value);
        partial void OnStructureObjectNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CardCode
        {
            get
            {
                return _CardCode;
            }
            set
            {
                OnCardCodeChanging(value);
                ReportPropertyChanging("CardCode");
                _CardCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CardCode");
                OnCardCodeChanged();
            }
        }
        private global::System.String _CardCode;
        partial void OnCardCodeChanging(global::System.String value);
        partial void OnCardCodeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DocumentTypeName
        {
            get
            {
                return _DocumentTypeName;
            }
            set
            {
                OnDocumentTypeNameChanging(value);
                ReportPropertyChanging("DocumentTypeName");
                _DocumentTypeName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DocumentTypeName");
                OnDocumentTypeNameChanged();
            }
        }
        private global::System.String _DocumentTypeName;
        partial void OnDocumentTypeNameChanging(global::System.String value);
        partial void OnDocumentTypeNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CheckNumber
        {
            get
            {
                return _CheckNumber;
            }
            set
            {
                OnCheckNumberChanging(value);
                ReportPropertyChanging("CheckNumber");
                _CheckNumber = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CheckNumber");
                OnCheckNumberChanged();
            }
        }
        private global::System.String _CheckNumber;
        partial void OnCheckNumberChanging(global::System.String value);
        partial void OnCheckNumberChanged();

        #endregion
    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="ViewStaffEmployeeSalary")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewStaffEmployeeSalary : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewStaffEmployeeSalary.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="month">Исходное значение свойства Month.</param>
        /// <param name="structureObjectID">Исходное значение свойства StructureObjectID.</param>
        /// <param name="employeeID">Исходное значение свойства EmployeeID.</param>
        /// <param name="sumSale">Исходное значение свойства SumSale.</param>
        /// <param name="extraPercent">Исходное значение свойства ExtraPercent.</param>
        /// <param name="salary">Исходное значение свойства Salary.</param>
        /// <param name="sumSalary">Исходное значение свойства SumSalary.</param>
        public static ViewStaffEmployeeSalary CreateViewStaffEmployeeSalary(global::System.Int32 id, global::System.DateTime month, global::System.Int32 structureObjectID, global::System.Int32 employeeID, global::System.Decimal sumSale, global::System.Decimal extraPercent, global::System.Decimal salary, global::System.Decimal sumSalary)
        {
            ViewStaffEmployeeSalary viewStaffEmployeeSalary = new ViewStaffEmployeeSalary();
            viewStaffEmployeeSalary.ID = id;
            viewStaffEmployeeSalary.Month = month;
            viewStaffEmployeeSalary.StructureObjectID = structureObjectID;
            viewStaffEmployeeSalary.EmployeeID = employeeID;
            viewStaffEmployeeSalary.SumSale = sumSale;
            viewStaffEmployeeSalary.ExtraPercent = extraPercent;
            viewStaffEmployeeSalary.Salary = salary;
            viewStaffEmployeeSalary.SumSalary = sumSalary;
            return viewStaffEmployeeSalary;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Month
        {
            get
            {
                return _Month;
            }
            set
            {
                if (_Month != value)
                {
                    OnMonthChanging(value);
                    ReportPropertyChanging("Month");
                    _Month = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Month");
                    OnMonthChanged();
                }
            }
        }
        private global::System.DateTime _Month;
        partial void OnMonthChanging(global::System.DateTime value);
        partial void OnMonthChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 StructureObjectID
        {
            get
            {
                return _StructureObjectID;
            }
            set
            {
                if (_StructureObjectID != value)
                {
                    OnStructureObjectIDChanging(value);
                    ReportPropertyChanging("StructureObjectID");
                    _StructureObjectID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("StructureObjectID");
                    OnStructureObjectIDChanged();
                }
            }
        }
        private global::System.Int32 _StructureObjectID;
        partial void OnStructureObjectIDChanging(global::System.Int32 value);
        partial void OnStructureObjectIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 EmployeeID
        {
            get
            {
                return _EmployeeID;
            }
            set
            {
                if (_EmployeeID != value)
                {
                    OnEmployeeIDChanging(value);
                    ReportPropertyChanging("EmployeeID");
                    _EmployeeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("EmployeeID");
                    OnEmployeeIDChanged();
                }
            }
        }
        private global::System.Int32 _EmployeeID;
        partial void OnEmployeeIDChanging(global::System.Int32 value);
        partial void OnEmployeeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal SumSale
        {
            get
            {
                return _SumSale;
            }
            set
            {
                if (_SumSale != value)
                {
                    OnSumSaleChanging(value);
                    ReportPropertyChanging("SumSale");
                    _SumSale = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("SumSale");
                    OnSumSaleChanged();
                }
            }
        }
        private global::System.Decimal _SumSale;
        partial void OnSumSaleChanging(global::System.Decimal value);
        partial void OnSumSaleChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal ExtraPercent
        {
            get
            {
                return _ExtraPercent;
            }
            set
            {
                if (_ExtraPercent != value)
                {
                    OnExtraPercentChanging(value);
                    ReportPropertyChanging("ExtraPercent");
                    _ExtraPercent = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ExtraPercent");
                    OnExtraPercentChanged();
                }
            }
        }
        private global::System.Decimal _ExtraPercent;
        partial void OnExtraPercentChanging(global::System.Decimal value);
        partial void OnExtraPercentChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal Salary
        {
            get
            {
                return _Salary;
            }
            set
            {
                if (_Salary != value)
                {
                    OnSalaryChanging(value);
                    ReportPropertyChanging("Salary");
                    _Salary = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Salary");
                    OnSalaryChanged();
                }
            }
        }
        private global::System.Decimal _Salary;
        partial void OnSalaryChanging(global::System.Decimal value);
        partial void OnSalaryChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal SumSalary
        {
            get
            {
                return _SumSalary;
            }
            set
            {
                if (_SumSalary != value)
                {
                    OnSumSalaryChanging(value);
                    ReportPropertyChanging("SumSalary");
                    _SumSalary = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("SumSalary");
                    OnSumSalaryChanged();
                }
            }
        }
        private global::System.Decimal _SumSalary;
        partial void OnSumSalaryChanging(global::System.Decimal value);
        partial void OnSumSalaryChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String StructureObjectName
        {
            get
            {
                return _StructureObjectName;
            }
            set
            {
                OnStructureObjectNameChanging(value);
                ReportPropertyChanging("StructureObjectName");
                _StructureObjectName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("StructureObjectName");
                OnStructureObjectNameChanged();
            }
        }
        private global::System.String _StructureObjectName;
        partial void OnStructureObjectNameChanging(global::System.String value);
        partial void OnStructureObjectNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String EmployeeFullName
        {
            get
            {
                return _EmployeeFullName;
            }
            set
            {
                OnEmployeeFullNameChanging(value);
                ReportPropertyChanging("EmployeeFullName");
                _EmployeeFullName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("EmployeeFullName");
                OnEmployeeFullNameChanged();
            }
        }
        private global::System.String _EmployeeFullName;
        partial void OnEmployeeFullNameChanging(global::System.String value);
        partial void OnEmployeeFullNameChanged();

        #endregion
    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="ViewWare")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewWare : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewWare.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        /// <param name="unitID">Исходное значение свойства UnitID.</param>
        /// <param name="unitQuantity">Исходное значение свойства UnitQuantity.</param>
        public static ViewWare CreateViewWare(global::System.Int32 id, global::System.String name, global::System.Int32 unitID, global::System.Decimal unitQuantity)
        {
            ViewWare viewWare = new ViewWare();
            viewWare.ID = id;
            viewWare.Name = name;
            viewWare.UnitID = unitID;
            viewWare.UnitQuantity = unitQuantity;
            return viewWare;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if (_Name != value)
                {
                    OnNameChanging(value);
                    ReportPropertyChanging("Name");
                    _Name = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Name");
                    OnNameChanged();
                }
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UnitID
        {
            get
            {
                return _UnitID;
            }
            set
            {
                if (_UnitID != value)
                {
                    OnUnitIDChanging(value);
                    ReportPropertyChanging("UnitID");
                    _UnitID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("UnitID");
                    OnUnitIDChanged();
                }
            }
        }
        private global::System.Int32 _UnitID;
        partial void OnUnitIDChanging(global::System.Int32 value);
        partial void OnUnitIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal UnitQuantity
        {
            get
            {
                return _UnitQuantity;
            }
            set
            {
                if (_UnitQuantity != value)
                {
                    OnUnitQuantityChanging(value);
                    ReportPropertyChanging("UnitQuantity");
                    _UnitQuantity = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("UnitQuantity");
                    OnUnitQuantityChanged();
                }
            }
        }
        private global::System.Decimal _UnitQuantity;
        partial void OnUnitQuantityChanging(global::System.Decimal value);
        partial void OnUnitQuantityChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ManufacturerID
        {
            get
            {
                return _ManufacturerID;
            }
            set
            {
                OnManufacturerIDChanging(value);
                ReportPropertyChanging("ManufacturerID");
                _ManufacturerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ManufacturerID");
                OnManufacturerIDChanged();
            }
        }
        private Nullable<global::System.Int32> _ManufacturerID;
        partial void OnManufacturerIDChanging(Nullable<global::System.Int32> value);
        partial void OnManufacturerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> CategoryID
        {
            get
            {
                return _CategoryID;
            }
            set
            {
                OnCategoryIDChanging(value);
                ReportPropertyChanging("CategoryID");
                _CategoryID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CategoryID");
                OnCategoryIDChanged();
            }
        }
        private Nullable<global::System.Int32> _CategoryID;
        partial void OnCategoryIDChanging(Nullable<global::System.Int32> value);
        partial void OnCategoryIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> SecondaryUnitID
        {
            get
            {
                return _SecondaryUnitID;
            }
            set
            {
                OnSecondaryUnitIDChanging(value);
                ReportPropertyChanging("SecondaryUnitID");
                _SecondaryUnitID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SecondaryUnitID");
                OnSecondaryUnitIDChanged();
            }
        }
        private Nullable<global::System.Int32> _SecondaryUnitID;
        partial void OnSecondaryUnitIDChanging(Nullable<global::System.Int32> value);
        partial void OnSecondaryUnitIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> SecondaryUnitQuantity
        {
            get
            {
                return _SecondaryUnitQuantity;
            }
            set
            {
                OnSecondaryUnitQuantityChanging(value);
                ReportPropertyChanging("SecondaryUnitQuantity");
                _SecondaryUnitQuantity = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SecondaryUnitQuantity");
                OnSecondaryUnitQuantityChanged();
            }
        }
        private Nullable<global::System.Decimal> _SecondaryUnitQuantity;
        partial void OnSecondaryUnitQuantityChanging(Nullable<global::System.Decimal> value);
        partial void OnSecondaryUnitQuantityChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> OneChoiceComponent
        {
            get
            {
                return _OneChoiceComponent;
            }
            set
            {
                OnOneChoiceComponentChanging(value);
                ReportPropertyChanging("OneChoiceComponent");
                _OneChoiceComponent = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("OneChoiceComponent");
                OnOneChoiceComponentChanged();
            }
        }
        private Nullable<global::System.Boolean> _OneChoiceComponent;
        partial void OnOneChoiceComponentChanging(Nullable<global::System.Boolean> value);
        partial void OnOneChoiceComponentChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> MinimumQuantity
        {
            get
            {
                return _MinimumQuantity;
            }
            set
            {
                OnMinimumQuantityChanging(value);
                ReportPropertyChanging("MinimumQuantity");
                _MinimumQuantity = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MinimumQuantity");
                OnMinimumQuantityChanged();
            }
        }
        private Nullable<global::System.Decimal> _MinimumQuantity;
        partial void OnMinimumQuantityChanging(Nullable<global::System.Decimal> value);
        partial void OnMinimumQuantityChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UnitName
        {
            get
            {
                return _UnitName;
            }
            set
            {
                OnUnitNameChanging(value);
                ReportPropertyChanging("UnitName");
                _UnitName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UnitName");
                OnUnitNameChanged();
            }
        }
        private global::System.String _UnitName;
        partial void OnUnitNameChanging(global::System.String value);
        partial void OnUnitNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SecondaryUnitName
        {
            get
            {
                return _SecondaryUnitName;
            }
            set
            {
                OnSecondaryUnitNameChanging(value);
                ReportPropertyChanging("SecondaryUnitName");
                _SecondaryUnitName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SecondaryUnitName");
                OnSecondaryUnitNameChanged();
            }
        }
        private global::System.String _SecondaryUnitName;
        partial void OnSecondaryUnitNameChanging(global::System.String value);
        partial void OnSecondaryUnitNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ManufacturerName
        {
            get
            {
                return _ManufacturerName;
            }
            set
            {
                OnManufacturerNameChanging(value);
                ReportPropertyChanging("ManufacturerName");
                _ManufacturerName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ManufacturerName");
                OnManufacturerNameChanged();
            }
        }
        private global::System.String _ManufacturerName;
        partial void OnManufacturerNameChanging(global::System.String value);
        partial void OnManufacturerNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String WareCategoryName
        {
            get
            {
                return _WareCategoryName;
            }
            set
            {
                OnWareCategoryNameChanging(value);
                ReportPropertyChanging("WareCategoryName");
                _WareCategoryName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("WareCategoryName");
                OnWareCategoryNameChanged();
            }
        }
        private global::System.String _WareCategoryName;
        partial void OnWareCategoryNameChanging(global::System.String value);
        partial void OnWareCategoryNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> TimeLimit
        {
            get
            {
                return _TimeLimit;
            }
            set
            {
                OnTimeLimitChanging(value);
                ReportPropertyChanging("TimeLimit");
                _TimeLimit = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TimeLimit");
                OnTimeLimitChanged();
            }
        }
        private Nullable<global::System.Decimal> _TimeLimit;
        partial void OnTimeLimitChanging(Nullable<global::System.Decimal> value);
        partial void OnTimeLimitChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String WareCode
        {
            get
            {
                return _WareCode;
            }
            set
            {
                OnWareCodeChanging(value);
                ReportPropertyChanging("WareCode");
                _WareCode = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("WareCode");
                OnWareCodeChanged();
            }
        }
        private global::System.String _WareCode;
        partial void OnWareCodeChanging(global::System.String value);
        partial void OnWareCodeChanged();

        #endregion
    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="ViewWaresDetalisation")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ViewWaresDetalisation : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ViewWaresDetalisation.
        /// </summary>
        /// <param name="wareID">Исходное значение свойства WareID.</param>
        /// <param name="unitQuantity">Исходное значение свойства UnitQuantity.</param>
        /// <param name="documentID">Исходное значение свойства DocumentID.</param>
        public static ViewWaresDetalisation CreateViewWaresDetalisation(global::System.Int32 wareID, global::System.Decimal unitQuantity, global::System.Int32 documentID)
        {
            ViewWaresDetalisation viewWaresDetalisation = new ViewWaresDetalisation();
            viewWaresDetalisation.WareID = wareID;
            viewWaresDetalisation.UnitQuantity = unitQuantity;
            viewWaresDetalisation.DocumentID = documentID;
            return viewWaresDetalisation;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 WareID
        {
            get
            {
                return _WareID;
            }
            set
            {
                if (_WareID != value)
                {
                    OnWareIDChanging(value);
                    ReportPropertyChanging("WareID");
                    _WareID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("WareID");
                    OnWareIDChanged();
                }
            }
        }
        private global::System.Int32 _WareID;
        partial void OnWareIDChanging(global::System.Int32 value);
        partial void OnWareIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String WareName
        {
            get
            {
                return _WareName;
            }
            set
            {
                OnWareNameChanging(value);
                ReportPropertyChanging("WareName");
                _WareName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("WareName");
                OnWareNameChanged();
            }
        }
        private global::System.String _WareName;
        partial void OnWareNameChanging(global::System.String value);
        partial void OnWareNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Number
        {
            get
            {
                return _Number;
            }
            set
            {
                OnNumberChanging(value);
                ReportPropertyChanging("Number");
                _Number = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Number");
                OnNumberChanged();
            }
        }
        private global::System.String _Number;
        partial void OnNumberChanging(global::System.String value);
        partial void OnNumberChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal UnitQuantity
        {
            get
            {
                return _UnitQuantity;
            }
            set
            {
                if (_UnitQuantity != value)
                {
                    OnUnitQuantityChanging(value);
                    ReportPropertyChanging("UnitQuantity");
                    _UnitQuantity = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("UnitQuantity");
                    OnUnitQuantityChanged();
                }
            }
        }
        private global::System.Decimal _UnitQuantity;
        partial void OnUnitQuantityChanging(global::System.Decimal value);
        partial void OnUnitQuantityChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UnitName
        {
            get
            {
                return _UnitName;
            }
            set
            {
                OnUnitNameChanging(value);
                ReportPropertyChanging("UnitName");
                _UnitName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UnitName");
                OnUnitNameChanged();
            }
        }
        private global::System.String _UnitName;
        partial void OnUnitNameChanging(global::System.String value);
        partial void OnUnitNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> PriceForUnit
        {
            get
            {
                return _PriceForUnit;
            }
            set
            {
                OnPriceForUnitChanging(value);
                ReportPropertyChanging("PriceForUnit");
                _PriceForUnit = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PriceForUnit");
                OnPriceForUnitChanged();
            }
        }
        private Nullable<global::System.Decimal> _PriceForUnit;
        partial void OnPriceForUnitChanging(Nullable<global::System.Decimal> value);
        partial void OnPriceForUnitChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> DiscountForUnit
        {
            get
            {
                return _DiscountForUnit;
            }
            set
            {
                OnDiscountForUnitChanging(value);
                ReportPropertyChanging("DiscountForUnit");
                _DiscountForUnit = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DiscountForUnit");
                OnDiscountForUnitChanged();
            }
        }
        private Nullable<global::System.Decimal> _DiscountForUnit;
        partial void OnDiscountForUnitChanging(Nullable<global::System.Decimal> value);
        partial void OnDiscountForUnitChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> EndPriceForUnit
        {
            get
            {
                return _EndPriceForUnit;
            }
            set
            {
                OnEndPriceForUnitChanging(value);
                ReportPropertyChanging("EndPriceForUnit");
                _EndPriceForUnit = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EndPriceForUnit");
                OnEndPriceForUnitChanged();
            }
        }
        private Nullable<global::System.Decimal> _EndPriceForUnit;
        partial void OnEndPriceForUnitChanging(Nullable<global::System.Decimal> value);
        partial void OnEndPriceForUnitChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> EndPrice
        {
            get
            {
                return _EndPrice;
            }
            set
            {
                OnEndPriceChanging(value);
                ReportPropertyChanging("EndPrice");
                _EndPrice = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EndPrice");
                OnEndPriceChanged();
            }
        }
        private Nullable<global::System.Decimal> _EndPrice;
        partial void OnEndPriceChanging(Nullable<global::System.Decimal> value);
        partial void OnEndPriceChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> FromStructureObjectID
        {
            get
            {
                return _FromStructureObjectID;
            }
            set
            {
                OnFromStructureObjectIDChanging(value);
                ReportPropertyChanging("FromStructureObjectID");
                _FromStructureObjectID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FromStructureObjectID");
                OnFromStructureObjectIDChanged();
            }
        }
        private Nullable<global::System.Int32> _FromStructureObjectID;
        partial void OnFromStructureObjectIDChanging(Nullable<global::System.Int32> value);
        partial void OnFromStructureObjectIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FromObjectName
        {
            get
            {
                return _FromObjectName;
            }
            set
            {
                OnFromObjectNameChanging(value);
                ReportPropertyChanging("FromObjectName");
                _FromObjectName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FromObjectName");
                OnFromObjectNameChanged();
            }
        }
        private global::System.String _FromObjectName;
        partial void OnFromObjectNameChanging(global::System.String value);
        partial void OnFromObjectNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ToStructureObjectD
        {
            get
            {
                return _ToStructureObjectD;
            }
            set
            {
                OnToStructureObjectDChanging(value);
                ReportPropertyChanging("ToStructureObjectD");
                _ToStructureObjectD = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ToStructureObjectD");
                OnToStructureObjectDChanged();
            }
        }
        private Nullable<global::System.Int32> _ToStructureObjectD;
        partial void OnToStructureObjectDChanging(Nullable<global::System.Int32> value);
        partial void OnToStructureObjectDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ToObjectName
        {
            get
            {
                return _ToObjectName;
            }
            set
            {
                OnToObjectNameChanging(value);
                ReportPropertyChanging("ToObjectName");
                _ToObjectName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ToObjectName");
                OnToObjectNameChanged();
            }
        }
        private global::System.String _ToObjectName;
        partial void OnToObjectNameChanging(global::System.String value);
        partial void OnToObjectNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DocumentID
        {
            get
            {
                return _DocumentID;
            }
            set
            {
                if (_DocumentID != value)
                {
                    OnDocumentIDChanging(value);
                    ReportPropertyChanging("DocumentID");
                    _DocumentID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DocumentID");
                    OnDocumentIDChanged();
                }
            }
        }
        private global::System.Int32 _DocumentID;
        partial void OnDocumentIDChanging(global::System.Int32 value);
        partial void OnDocumentIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> DocumentTypeID
        {
            get
            {
                return _DocumentTypeID;
            }
            set
            {
                OnDocumentTypeIDChanging(value);
                ReportPropertyChanging("DocumentTypeID");
                _DocumentTypeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DocumentTypeID");
                OnDocumentTypeIDChanged();
            }
        }
        private Nullable<global::System.Int32> _DocumentTypeID;
        partial void OnDocumentTypeIDChanging(Nullable<global::System.Int32> value);
        partial void OnDocumentTypeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DocumentTypeName
        {
            get
            {
                return _DocumentTypeName;
            }
            set
            {
                OnDocumentTypeNameChanging(value);
                ReportPropertyChanging("DocumentTypeName");
                _DocumentTypeName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DocumentTypeName");
                OnDocumentTypeNameChanged();
            }
        }
        private global::System.String _DocumentTypeName;
        partial void OnDocumentTypeNameChanging(global::System.String value);
        partial void OnDocumentTypeNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> Date
        {
            get
            {
                return _Date;
            }
            set
            {
                OnDateChanging(value);
                ReportPropertyChanging("Date");
                _Date = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Date");
                OnDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _Date;
        partial void OnDateChanging(Nullable<global::System.DateTime> value);
        partial void OnDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Input
        {
            get
            {
                return _Input;
            }
            set
            {
                OnInputChanging(value);
                ReportPropertyChanging("Input");
                _Input = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Input");
                OnInputChanged();
            }
        }
        private Nullable<global::System.Boolean> _Input;
        partial void OnInputChanging(Nullable<global::System.Boolean> value);
        partial void OnInputChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> Output
        {
            get
            {
                return _Output;
            }
            set
            {
                OnOutputChanging(value);
                ReportPropertyChanging("Output");
                _Output = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Output");
                OnOutputChanged();
            }
        }
        private Nullable<global::System.Boolean> _Output;
        partial void OnOutputChanging(Nullable<global::System.Boolean> value);
        partial void OnOutputChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CategoryName
        {
            get
            {
                return _CategoryName;
            }
            set
            {
                OnCategoryNameChanging(value);
                ReportPropertyChanging("CategoryName");
                _CategoryName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CategoryName");
                OnCategoryNameChanged();
            }
        }
        private global::System.String _CategoryName;
        partial void OnCategoryNameChanging(global::System.String value);
        partial void OnCategoryNameChanged();

        #endregion
    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="Ware")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Ware : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Ware.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        /// <param name="unitID">Исходное значение свойства UnitID.</param>
        /// <param name="unitQuantity">Исходное значение свойства UnitQuantity.</param>
        public static Ware CreateWare(global::System.Int32 id, global::System.String name, global::System.Int32 unitID, global::System.Decimal unitQuantity)
        {
            Ware ware = new Ware();
            ware.ID = id;
            ware.Name = name;
            ware.UnitID = unitID;
            ware.UnitQuantity = unitQuantity;
            return ware;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UnitID
        {
            get
            {
                return _UnitID;
            }
            set
            {
                OnUnitIDChanging(value);
                ReportPropertyChanging("UnitID");
                _UnitID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UnitID");
                OnUnitIDChanged();
            }
        }
        private global::System.Int32 _UnitID;
        partial void OnUnitIDChanging(global::System.Int32 value);
        partial void OnUnitIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal UnitQuantity
        {
            get
            {
                return _UnitQuantity;
            }
            set
            {
                OnUnitQuantityChanging(value);
                ReportPropertyChanging("UnitQuantity");
                _UnitQuantity = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UnitQuantity");
                OnUnitQuantityChanged();
            }
        }
        private global::System.Decimal _UnitQuantity;
        partial void OnUnitQuantityChanging(global::System.Decimal value);
        partial void OnUnitQuantityChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ManufacturerID
        {
            get
            {
                return _ManufacturerID;
            }
            set
            {
                OnManufacturerIDChanging(value);
                ReportPropertyChanging("ManufacturerID");
                _ManufacturerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ManufacturerID");
                OnManufacturerIDChanged();
            }
        }
        private Nullable<global::System.Int32> _ManufacturerID;
        partial void OnManufacturerIDChanging(Nullable<global::System.Int32> value);
        partial void OnManufacturerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> CategoryID
        {
            get
            {
                return _CategoryID;
            }
            set
            {
                OnCategoryIDChanging(value);
                ReportPropertyChanging("CategoryID");
                _CategoryID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CategoryID");
                OnCategoryIDChanged();
            }
        }
        private Nullable<global::System.Int32> _CategoryID;
        partial void OnCategoryIDChanging(Nullable<global::System.Int32> value);
        partial void OnCategoryIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> SecondaryUnitID
        {
            get
            {
                return _SecondaryUnitID;
            }
            set
            {
                OnSecondaryUnitIDChanging(value);
                ReportPropertyChanging("SecondaryUnitID");
                _SecondaryUnitID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SecondaryUnitID");
                OnSecondaryUnitIDChanged();
            }
        }
        private Nullable<global::System.Int32> _SecondaryUnitID;
        partial void OnSecondaryUnitIDChanging(Nullable<global::System.Int32> value);
        partial void OnSecondaryUnitIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> SecondaryUnitQuantity
        {
            get
            {
                return _SecondaryUnitQuantity;
            }
            set
            {
                OnSecondaryUnitQuantityChanging(value);
                ReportPropertyChanging("SecondaryUnitQuantity");
                _SecondaryUnitQuantity = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SecondaryUnitQuantity");
                OnSecondaryUnitQuantityChanged();
            }
        }
        private Nullable<global::System.Decimal> _SecondaryUnitQuantity;
        partial void OnSecondaryUnitQuantityChanging(Nullable<global::System.Decimal> value);
        partial void OnSecondaryUnitQuantityChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> OneChoiceComponent
        {
            get
            {
                return _OneChoiceComponent;
            }
            set
            {
                OnOneChoiceComponentChanging(value);
                ReportPropertyChanging("OneChoiceComponent");
                _OneChoiceComponent = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("OneChoiceComponent");
                OnOneChoiceComponentChanged();
            }
        }
        private Nullable<global::System.Boolean> _OneChoiceComponent;
        partial void OnOneChoiceComponentChanging(Nullable<global::System.Boolean> value);
        partial void OnOneChoiceComponentChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> MinimumQuantity
        {
            get
            {
                return _MinimumQuantity;
            }
            set
            {
                OnMinimumQuantityChanging(value);
                ReportPropertyChanging("MinimumQuantity");
                _MinimumQuantity = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MinimumQuantity");
                OnMinimumQuantityChanged();
            }
        }
        private Nullable<global::System.Decimal> _MinimumQuantity;
        partial void OnMinimumQuantityChanging(Nullable<global::System.Decimal> value);
        partial void OnMinimumQuantityChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_Wares_WareCategories", "WareCategory")]
        public WareCategory WareCategory
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareCategory>("CompasModel.FK_Wares_WareCategories", "WareCategory").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareCategory>("CompasModel.FK_Wares_WareCategories", "WareCategory").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WareCategory> WareCategoryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareCategory>("CompasModel.FK_Wares_WareCategories", "WareCategory");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<WareCategory>("CompasModel.FK_Wares_WareCategories", "WareCategory", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareCodes_Wares", "WareCode")]
        public EntityCollection<WareCode> WareCodes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareCode>("CompasModel.FK_WareCodes_Wares", "WareCode");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareCode>("CompasModel.FK_WareCodes_Wares", "WareCode", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareComponentDetails_Wares", "WareComponent")]
        public EntityCollection<WareComponent> WareComponents
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareComponent>("CompasModel.FK_WareComponentDetails_Wares", "WareComponent");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareComponent>("CompasModel.FK_WareComponentDetails_Wares", "WareComponent", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareComponents_Component_Wares", "WareComponent")]
        public EntityCollection<WareComponent> WareComponents1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareComponent>("CompasModel.FK_WareComponents_Component_Wares", "WareComponent");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareComponent>("CompasModel.FK_WareComponents_Component_Wares", "WareComponent", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocumentDetails_Wares", "WareDocumentDetail")]
        public EntityCollection<WareDocumentDetail> WareDocumentDetails
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareDocumentDetail>("CompasModel.FK_WareDocumentDetails_Wares", "WareDocumentDetail");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareDocumentDetail>("CompasModel.FK_WareDocumentDetails_Wares", "WareDocumentDetail", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_Wares_WareManufacturers", "WareManufacturer")]
        public WareManufacturer WareManufacturer
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareManufacturer>("CompasModel.FK_Wares_WareManufacturers", "WareManufacturer").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareManufacturer>("CompasModel.FK_Wares_WareManufacturers", "WareManufacturer").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WareManufacturer> WareManufacturerReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareManufacturer>("CompasModel.FK_Wares_WareManufacturers", "WareManufacturer");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<WareManufacturer>("CompasModel.FK_Wares_WareManufacturers", "WareManufacturer", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WarePrices_Wares", "WarePrice")]
        public EntityCollection<WarePrice> WarePrices
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WarePrice>("CompasModel.FK_WarePrices_Wares", "WarePrice");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WarePrice>("CompasModel.FK_WarePrices_Wares", "WarePrice", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareRemains_Wares", "WareRemain")]
        public EntityCollection<WareRemain> WareRemains
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareRemain>("CompasModel.FK_WareRemains_Wares", "WareRemain");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareRemain>("CompasModel.FK_WareRemains_Wares", "WareRemain", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_Wares_WareUnits", "WareUnit")]
        public WareUnit WareUnit
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareUnit>("CompasModel.FK_Wares_WareUnits", "WareUnit").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareUnit>("CompasModel.FK_Wares_WareUnits", "WareUnit").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WareUnit> WareUnitReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareUnit>("CompasModel.FK_Wares_WareUnits", "WareUnit");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<WareUnit>("CompasModel.FK_Wares_WareUnits", "WareUnit", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_Wares_WareUnits1", "WareUnit")]
        public WareUnit WareUnit1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareUnit>("CompasModel.FK_Wares_WareUnits1", "WareUnit").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareUnit>("CompasModel.FK_Wares_WareUnits1", "WareUnit").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WareUnit> WareUnit1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareUnit>("CompasModel.FK_Wares_WareUnits1", "WareUnit");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<WareUnit>("CompasModel.FK_Wares_WareUnits1", "WareUnit", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareTimeLimits_Wares", "WareTimeLimit")]
        public EntityCollection<WareTimeLimit> WareTimeLimits
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareTimeLimit>("CompasModel.FK_WareTimeLimits_Wares", "WareTimeLimit");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareTimeLimit>("CompasModel.FK_WareTimeLimits_Wares", "WareTimeLimit", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="WareBas")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WareBas : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта WareBas.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        public static WareBas CreateWareBas(global::System.Int32 id, global::System.String name)
        {
            WareBas wareBas = new WareBas();
            wareBas.ID = id;
            wareBas.Name = name;
            return wareBas;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="WareCard")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WareCard : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта WareCard.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="code">Исходное значение свойства Code.</param>
        /// <param name="cardTypeID">Исходное значение свойства CardTypeID.</param>
        /// <param name="active">Исходное значение свойства Active.</param>
        public static WareCard CreateWareCard(global::System.Int32 id, global::System.String code, global::System.Int32 cardTypeID, global::System.Boolean active)
        {
            WareCard wareCard = new WareCard();
            wareCard.ID = id;
            wareCard.Code = code;
            wareCard.CardTypeID = cardTypeID;
            wareCard.Active = active;
            return wareCard;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Code
        {
            get
            {
                return _Code;
            }
            set
            {
                OnCodeChanging(value);
                ReportPropertyChanging("Code");
                _Code = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Code");
                OnCodeChanged();
            }
        }
        private global::System.String _Code;
        partial void OnCodeChanging(global::System.String value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CardTypeID
        {
            get
            {
                return _CardTypeID;
            }
            set
            {
                OnCardTypeIDChanging(value);
                ReportPropertyChanging("CardTypeID");
                _CardTypeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CardTypeID");
                OnCardTypeIDChanged();
            }
        }
        private global::System.Int32 _CardTypeID;
        partial void OnCardTypeIDChanging(global::System.Int32 value);
        partial void OnCardTypeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Active
        {
            get
            {
                return _Active;
            }
            set
            {
                OnActiveChanging(value);
                ReportPropertyChanging("Active");
                _Active = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Active");
                OnActiveChanged();
            }
        }
        private global::System.Boolean _Active;
        partial void OnActiveChanging(global::System.Boolean value);
        partial void OnActiveChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> IssuedDate
        {
            get
            {
                return _IssuedDate;
            }
            set
            {
                OnIssuedDateChanging(value);
                ReportPropertyChanging("IssuedDate");
                _IssuedDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IssuedDate");
                OnIssuedDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _IssuedDate;
        partial void OnIssuedDateChanging(Nullable<global::System.DateTime> value);
        partial void OnIssuedDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> UsedDate
        {
            get
            {
                return _UsedDate;
            }
            set
            {
                OnUsedDateChanging(value);
                ReportPropertyChanging("UsedDate");
                _UsedDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UsedDate");
                OnUsedDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _UsedDate;
        partial void OnUsedDateChanging(Nullable<global::System.DateTime> value);
        partial void OnUsedDateChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_ContractorCards_WareCards", "ContractorCard")]
        public EntityCollection<ContractorCard> ContractorCards
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ContractorCard>("CompasModel.FK_ContractorCards_WareCards", "ContractorCard");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ContractorCard>("CompasModel.FK_ContractorCards_WareCards", "ContractorCard", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareCardBalaces_WareCards", "WareCardBalace")]
        public EntityCollection<WareCardBalace> WareCardBalaces
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareCardBalace>("CompasModel.FK_WareCardBalaces_WareCards", "WareCardBalace");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareCardBalace>("CompasModel.FK_WareCardBalaces_WareCards", "WareCardBalace", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareCardBalanceOperations_WareCards", "WareCardBalanceOperation")]
        public EntityCollection<WareCardBalanceOperation> WareCardBalanceOperations
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareCardBalanceOperation>("CompasModel.FK_WareCardBalanceOperations_WareCards", "WareCardBalanceOperation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareCardBalanceOperation>("CompasModel.FK_WareCardBalanceOperations_WareCards", "WareCardBalanceOperation", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareCardCars_WareCards", "WareCardCar")]
        public EntityCollection<WareCardCar> WareCardCars
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareCardCar>("CompasModel.FK_WareCardCars_WareCards", "WareCardCar");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareCardCar>("CompasModel.FK_WareCardCars_WareCards", "WareCardCar", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareCards_WareCardTypes", "WareCardType")]
        public WareCardType WareCardType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareCardType>("CompasModel.FK_WareCards_WareCardTypes", "WareCardType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareCardType>("CompasModel.FK_WareCards_WareCardTypes", "WareCardType").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WareCardType> WareCardTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareCardType>("CompasModel.FK_WareCards_WareCardTypes", "WareCardType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<WareCardType>("CompasModel.FK_WareCards_WareCardTypes", "WareCardType", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocumentPayments_WareCards", "WareDocumentPayment")]
        public EntityCollection<WareDocumentPayment> WareDocumentPayments
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareDocumentPayment>("CompasModel.FK_WareDocumentPayments_WareCards", "WareDocumentPayment");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareDocumentPayment>("CompasModel.FK_WareDocumentPayments_WareCards", "WareDocumentPayment", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="WareCardBalace")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WareCardBalace : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта WareCardBalace.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="cardID">Исходное значение свойства CardID.</param>
        /// <param name="sum">Исходное значение свойства Sum.</param>
        public static WareCardBalace CreateWareCardBalace(global::System.Int32 id, global::System.Int32 cardID, global::System.Decimal sum)
        {
            WareCardBalace wareCardBalace = new WareCardBalace();
            wareCardBalace.ID = id;
            wareCardBalace.CardID = cardID;
            wareCardBalace.Sum = sum;
            return wareCardBalace;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CardID
        {
            get
            {
                return _CardID;
            }
            set
            {
                OnCardIDChanging(value);
                ReportPropertyChanging("CardID");
                _CardID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CardID");
                OnCardIDChanged();
            }
        }
        private global::System.Int32 _CardID;
        partial void OnCardIDChanging(global::System.Int32 value);
        partial void OnCardIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal Sum
        {
            get
            {
                return _Sum;
            }
            set
            {
                OnSumChanging(value);
                ReportPropertyChanging("Sum");
                _Sum = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Sum");
                OnSumChanged();
            }
        }
        private global::System.Decimal _Sum;
        partial void OnSumChanging(global::System.Decimal value);
        partial void OnSumChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareCardBalaces_WareCards", "WareCard")]
        public WareCard WareCard
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareCard>("CompasModel.FK_WareCardBalaces_WareCards", "WareCard").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareCard>("CompasModel.FK_WareCardBalaces_WareCards", "WareCard").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WareCard> WareCardReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareCard>("CompasModel.FK_WareCardBalaces_WareCards", "WareCard");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<WareCard>("CompasModel.FK_WareCardBalaces_WareCards", "WareCard", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="WareCardBalanceOperation")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WareCardBalanceOperation : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта WareCardBalanceOperation.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="cardID">Исходное значение свойства CardID.</param>
        /// <param name="suma">Исходное значение свойства Suma.</param>
        /// <param name="date">Исходное значение свойства Date.</param>
        /// <param name="createdUserID">Исходное значение свойства CreatedUserID.</param>
        /// <param name="documentID">Исходное значение свойства DocumentID.</param>
        public static WareCardBalanceOperation CreateWareCardBalanceOperation(global::System.Int32 id, global::System.Int32 cardID, global::System.Decimal suma, global::System.DateTime date, global::System.Int32 createdUserID, global::System.Int32 documentID)
        {
            WareCardBalanceOperation wareCardBalanceOperation = new WareCardBalanceOperation();
            wareCardBalanceOperation.ID = id;
            wareCardBalanceOperation.CardID = cardID;
            wareCardBalanceOperation.Suma = suma;
            wareCardBalanceOperation.Date = date;
            wareCardBalanceOperation.CreatedUserID = createdUserID;
            wareCardBalanceOperation.DocumentID = documentID;
            return wareCardBalanceOperation;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CardID
        {
            get
            {
                return _CardID;
            }
            set
            {
                OnCardIDChanging(value);
                ReportPropertyChanging("CardID");
                _CardID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CardID");
                OnCardIDChanged();
            }
        }
        private global::System.Int32 _CardID;
        partial void OnCardIDChanging(global::System.Int32 value);
        partial void OnCardIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal Suma
        {
            get
            {
                return _Suma;
            }
            set
            {
                OnSumaChanging(value);
                ReportPropertyChanging("Suma");
                _Suma = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Suma");
                OnSumaChanged();
            }
        }
        private global::System.Decimal _Suma;
        partial void OnSumaChanging(global::System.Decimal value);
        partial void OnSumaChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Date
        {
            get
            {
                return _Date;
            }
            set
            {
                OnDateChanging(value);
                ReportPropertyChanging("Date");
                _Date = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Date");
                OnDateChanged();
            }
        }
        private global::System.DateTime _Date;
        partial void OnDateChanging(global::System.DateTime value);
        partial void OnDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CreatedUserID
        {
            get
            {
                return _CreatedUserID;
            }
            set
            {
                OnCreatedUserIDChanging(value);
                ReportPropertyChanging("CreatedUserID");
                _CreatedUserID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedUserID");
                OnCreatedUserIDChanged();
            }
        }
        private global::System.Int32 _CreatedUserID;
        partial void OnCreatedUserIDChanging(global::System.Int32 value);
        partial void OnCreatedUserIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DocumentID
        {
            get
            {
                return _DocumentID;
            }
            set
            {
                OnDocumentIDChanging(value);
                ReportPropertyChanging("DocumentID");
                _DocumentID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DocumentID");
                OnDocumentIDChanged();
            }
        }
        private global::System.Int32 _DocumentID;
        partial void OnDocumentIDChanging(global::System.Int32 value);
        partial void OnDocumentIDChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareCardBalanceOperations_WareCards", "WareCard")]
        public WareCard WareCard
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareCard>("CompasModel.FK_WareCardBalanceOperations_WareCards", "WareCard").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareCard>("CompasModel.FK_WareCardBalanceOperations_WareCards", "WareCard").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WareCard> WareCardReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareCard>("CompasModel.FK_WareCardBalanceOperations_WareCards", "WareCard");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<WareCard>("CompasModel.FK_WareCardBalanceOperations_WareCards", "WareCard", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareCardBalanceOperations_WareDocuments", "WareDocument")]
        public WareDocument WareDocument
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDocument>("CompasModel.FK_WareCardBalanceOperations_WareDocuments", "WareDocument").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDocument>("CompasModel.FK_WareCardBalanceOperations_WareDocuments", "WareDocument").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WareDocument> WareDocumentReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDocument>("CompasModel.FK_WareCardBalanceOperations_WareDocuments", "WareDocument");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<WareDocument>("CompasModel.FK_WareCardBalanceOperations_WareDocuments", "WareDocument", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="WareCardCar")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WareCardCar : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта WareCardCar.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="cardID">Исходное значение свойства CardID.</param>
        /// <param name="carID">Исходное значение свойства CarID.</param>
        public static WareCardCar CreateWareCardCar(global::System.Int32 id, global::System.Int32 cardID, global::System.Int32 carID)
        {
            WareCardCar wareCardCar = new WareCardCar();
            wareCardCar.ID = id;
            wareCardCar.CardID = cardID;
            wareCardCar.CarID = carID;
            return wareCardCar;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CardID
        {
            get
            {
                return _CardID;
            }
            set
            {
                OnCardIDChanging(value);
                ReportPropertyChanging("CardID");
                _CardID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CardID");
                OnCardIDChanged();
            }
        }
        private global::System.Int32 _CardID;
        partial void OnCardIDChanging(global::System.Int32 value);
        partial void OnCardIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CarID
        {
            get
            {
                return _CarID;
            }
            set
            {
                OnCarIDChanging(value);
                ReportPropertyChanging("CarID");
                _CarID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CarID");
                OnCarIDChanged();
            }
        }
        private global::System.Int32 _CarID;
        partial void OnCarIDChanging(global::System.Int32 value);
        partial void OnCarIDChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareCardCars_CWCars", "CWCar")]
        public CWCar CWCar
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CWCar>("CompasModel.FK_WareCardCars_CWCars", "CWCar").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CWCar>("CompasModel.FK_WareCardCars_CWCars", "CWCar").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CWCar> CWCarReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CWCar>("CompasModel.FK_WareCardCars_CWCars", "CWCar");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CWCar>("CompasModel.FK_WareCardCars_CWCars", "CWCar", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareCardCars_WareCards", "WareCard")]
        public WareCard WareCard
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareCard>("CompasModel.FK_WareCardCars_WareCards", "WareCard").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareCard>("CompasModel.FK_WareCardCars_WareCards", "WareCard").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WareCard> WareCardReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareCard>("CompasModel.FK_WareCardCars_WareCards", "WareCard");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<WareCard>("CompasModel.FK_WareCardCars_WareCards", "WareCard", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="WareCardType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WareCardType : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта WareCardType.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        /// <param name="allowBalance">Исходное значение свойства AllowBalance.</param>
        public static WareCardType CreateWareCardType(global::System.Int32 id, global::System.String name, global::System.Boolean allowBalance)
        {
            WareCardType wareCardType = new WareCardType();
            wareCardType.ID = id;
            wareCardType.Name = name;
            wareCardType.AllowBalance = allowBalance;
            return wareCardType;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean AllowBalance
        {
            get
            {
                return _AllowBalance;
            }
            set
            {
                OnAllowBalanceChanging(value);
                ReportPropertyChanging("AllowBalance");
                _AllowBalance = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AllowBalance");
                OnAllowBalanceChanged();
            }
        }
        private global::System.Boolean _AllowBalance;
        partial void OnAllowBalanceChanging(global::System.Boolean value);
        partial void OnAllowBalanceChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> AllowMultipleCars
        {
            get
            {
                return _AllowMultipleCars;
            }
            set
            {
                OnAllowMultipleCarsChanging(value);
                ReportPropertyChanging("AllowMultipleCars");
                _AllowMultipleCars = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AllowMultipleCars");
                OnAllowMultipleCarsChanged();
            }
        }
        private Nullable<global::System.Boolean> _AllowMultipleCars;
        partial void OnAllowMultipleCarsChanging(Nullable<global::System.Boolean> value);
        partial void OnAllowMultipleCarsChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareCards_WareCardTypes", "WareCard")]
        public EntityCollection<WareCard> WareCards
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareCard>("CompasModel.FK_WareCards_WareCardTypes", "WareCard");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareCard>("CompasModel.FK_WareCards_WareCardTypes", "WareCard", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareCardTypeDiscounts_WareCardTypes", "WareCardTypeDiscount")]
        public EntityCollection<WareCardTypeDiscount> WareCardTypeDiscounts
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareCardTypeDiscount>("CompasModel.FK_WareCardTypeDiscounts_WareCardTypes", "WareCardTypeDiscount");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareCardTypeDiscount>("CompasModel.FK_WareCardTypeDiscounts_WareCardTypes", "WareCardTypeDiscount", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="WareCardTypeDiscount")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WareCardTypeDiscount : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта WareCardTypeDiscount.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="cardTypeID">Исходное значение свойства CardTypeID.</param>
        /// <param name="discountID">Исходное значение свойства DiscountID.</param>
        /// <param name="startDate">Исходное значение свойства StartDate.</param>
        public static WareCardTypeDiscount CreateWareCardTypeDiscount(global::System.Int32 id, global::System.Int32 cardTypeID, global::System.Int32 discountID, global::System.DateTime startDate)
        {
            WareCardTypeDiscount wareCardTypeDiscount = new WareCardTypeDiscount();
            wareCardTypeDiscount.ID = id;
            wareCardTypeDiscount.CardTypeID = cardTypeID;
            wareCardTypeDiscount.DiscountID = discountID;
            wareCardTypeDiscount.StartDate = startDate;
            return wareCardTypeDiscount;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CardTypeID
        {
            get
            {
                return _CardTypeID;
            }
            set
            {
                OnCardTypeIDChanging(value);
                ReportPropertyChanging("CardTypeID");
                _CardTypeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CardTypeID");
                OnCardTypeIDChanged();
            }
        }
        private global::System.Int32 _CardTypeID;
        partial void OnCardTypeIDChanging(global::System.Int32 value);
        partial void OnCardTypeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DiscountID
        {
            get
            {
                return _DiscountID;
            }
            set
            {
                OnDiscountIDChanging(value);
                ReportPropertyChanging("DiscountID");
                _DiscountID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DiscountID");
                OnDiscountIDChanged();
            }
        }
        private global::System.Int32 _DiscountID;
        partial void OnDiscountIDChanging(global::System.Int32 value);
        partial void OnDiscountIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime StartDate
        {
            get
            {
                return _StartDate;
            }
            set
            {
                OnStartDateChanging(value);
                ReportPropertyChanging("StartDate");
                _StartDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StartDate");
                OnStartDateChanged();
            }
        }
        private global::System.DateTime _StartDate;
        partial void OnStartDateChanging(global::System.DateTime value);
        partial void OnStartDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> EndDate
        {
            get
            {
                return _EndDate;
            }
            set
            {
                OnEndDateChanging(value);
                ReportPropertyChanging("EndDate");
                _EndDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EndDate");
                OnEndDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _EndDate;
        partial void OnEndDateChanging(Nullable<global::System.DateTime> value);
        partial void OnEndDateChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareCardTypeDiscounts_WareCardTypes", "WareCardType")]
        public WareCardType WareCardType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareCardType>("CompasModel.FK_WareCardTypeDiscounts_WareCardTypes", "WareCardType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareCardType>("CompasModel.FK_WareCardTypeDiscounts_WareCardTypes", "WareCardType").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WareCardType> WareCardTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareCardType>("CompasModel.FK_WareCardTypeDiscounts_WareCardTypes", "WareCardType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<WareCardType>("CompasModel.FK_WareCardTypeDiscounts_WareCardTypes", "WareCardType", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareCardTypeDiscounts_WareDiscounts", "WareDiscount")]
        public WareDiscount WareDiscount
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDiscount>("CompasModel.FK_WareCardTypeDiscounts_WareDiscounts", "WareDiscount").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDiscount>("CompasModel.FK_WareCardTypeDiscounts_WareDiscounts", "WareDiscount").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WareDiscount> WareDiscountReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDiscount>("CompasModel.FK_WareCardTypeDiscounts_WareDiscounts", "WareDiscount");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<WareDiscount>("CompasModel.FK_WareCardTypeDiscounts_WareDiscounts", "WareDiscount", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="WareCategory")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WareCategory : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта WareCategory.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        public static WareCategory CreateWareCategory(global::System.Int32 id, global::System.String name)
        {
            WareCategory wareCategory = new WareCategory();
            wareCategory.ID = id;
            wareCategory.Name = name;
            return wareCategory;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ParentCategoryID
        {
            get
            {
                return _ParentCategoryID;
            }
            set
            {
                OnParentCategoryIDChanging(value);
                ReportPropertyChanging("ParentCategoryID");
                _ParentCategoryID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ParentCategoryID");
                OnParentCategoryIDChanged();
            }
        }
        private Nullable<global::System.Int32> _ParentCategoryID;
        partial void OnParentCategoryIDChanging(Nullable<global::System.Int32> value);
        partial void OnParentCategoryIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareCategories_WareCategories", "WareCategory1")]
        public EntityCollection<WareCategory> WareCategories1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareCategory>("CompasModel.FK_WareCategories_WareCategories", "WareCategory1");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareCategory>("CompasModel.FK_WareCategories_WareCategories", "WareCategory1", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareCategories_WareCategories", "WareCategory")]
        public WareCategory WareCategory1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareCategory>("CompasModel.FK_WareCategories_WareCategories", "WareCategory").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareCategory>("CompasModel.FK_WareCategories_WareCategories", "WareCategory").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WareCategory> WareCategory1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareCategory>("CompasModel.FK_WareCategories_WareCategories", "WareCategory");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<WareCategory>("CompasModel.FK_WareCategories_WareCategories", "WareCategory", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_Wares_WareCategories", "Ware")]
        public EntityCollection<Ware> Wares
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Ware>("CompasModel.FK_Wares_WareCategories", "Ware");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Ware>("CompasModel.FK_Wares_WareCategories", "Ware", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="WareCode")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WareCode : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта WareCode.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="wareID">Исходное значение свойства WareID.</param>
        /// <param name="code">Исходное значение свойства Code.</param>
        public static WareCode CreateWareCode(global::System.Int32 id, global::System.Int32 wareID, global::System.String code)
        {
            WareCode wareCode = new WareCode();
            wareCode.ID = id;
            wareCode.WareID = wareID;
            wareCode.Code = code;
            return wareCode;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 WareID
        {
            get
            {
                return _WareID;
            }
            set
            {
                OnWareIDChanging(value);
                ReportPropertyChanging("WareID");
                _WareID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("WareID");
                OnWareIDChanged();
            }
        }
        private global::System.Int32 _WareID;
        partial void OnWareIDChanging(global::System.Int32 value);
        partial void OnWareIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Code
        {
            get
            {
                return _Code;
            }
            set
            {
                OnCodeChanging(value);
                ReportPropertyChanging("Code");
                _Code = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Code");
                OnCodeChanged();
            }
        }
        private global::System.String _Code;
        partial void OnCodeChanging(global::System.String value);
        partial void OnCodeChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareCodes_Wares", "Ware")]
        public Ware Ware
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Ware>("CompasModel.FK_WareCodes_Wares", "Ware").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Ware>("CompasModel.FK_WareCodes_Wares", "Ware").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Ware> WareReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Ware>("CompasModel.FK_WareCodes_Wares", "Ware");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Ware>("CompasModel.FK_WareCodes_Wares", "Ware", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="WareComponent")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WareComponent : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта WareComponent.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="wareID">Исходное значение свойства WareID.</param>
        /// <param name="componentWareID">Исходное значение свойства ComponentWareID.</param>
        /// <param name="coefficient">Исходное значение свойства Coefficient.</param>
        public static WareComponent CreateWareComponent(global::System.Int32 id, global::System.Int32 wareID, global::System.Int32 componentWareID, global::System.Decimal coefficient)
        {
            WareComponent wareComponent = new WareComponent();
            wareComponent.ID = id;
            wareComponent.WareID = wareID;
            wareComponent.ComponentWareID = componentWareID;
            wareComponent.Coefficient = coefficient;
            return wareComponent;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 WareID
        {
            get
            {
                return _WareID;
            }
            set
            {
                OnWareIDChanging(value);
                ReportPropertyChanging("WareID");
                _WareID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("WareID");
                OnWareIDChanged();
            }
        }
        private global::System.Int32 _WareID;
        partial void OnWareIDChanging(global::System.Int32 value);
        partial void OnWareIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ComponentWareID
        {
            get
            {
                return _ComponentWareID;
            }
            set
            {
                OnComponentWareIDChanging(value);
                ReportPropertyChanging("ComponentWareID");
                _ComponentWareID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ComponentWareID");
                OnComponentWareIDChanged();
            }
        }
        private global::System.Int32 _ComponentWareID;
        partial void OnComponentWareIDChanging(global::System.Int32 value);
        partial void OnComponentWareIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> UnitQuantity
        {
            get
            {
                return _UnitQuantity;
            }
            set
            {
                OnUnitQuantityChanging(value);
                ReportPropertyChanging("UnitQuantity");
                _UnitQuantity = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UnitQuantity");
                OnUnitQuantityChanged();
            }
        }
        private Nullable<global::System.Decimal> _UnitQuantity;
        partial void OnUnitQuantityChanging(Nullable<global::System.Decimal> value);
        partial void OnUnitQuantityChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> SecondUnitQuantity
        {
            get
            {
                return _SecondUnitQuantity;
            }
            set
            {
                OnSecondUnitQuantityChanging(value);
                ReportPropertyChanging("SecondUnitQuantity");
                _SecondUnitQuantity = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SecondUnitQuantity");
                OnSecondUnitQuantityChanged();
            }
        }
        private Nullable<global::System.Decimal> _SecondUnitQuantity;
        partial void OnSecondUnitQuantityChanging(Nullable<global::System.Decimal> value);
        partial void OnSecondUnitQuantityChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal Coefficient
        {
            get
            {
                return _Coefficient;
            }
            set
            {
                OnCoefficientChanging(value);
                ReportPropertyChanging("Coefficient");
                _Coefficient = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Coefficient");
                OnCoefficientChanged();
            }
        }
        private global::System.Decimal _Coefficient;
        partial void OnCoefficientChanging(global::System.Decimal value);
        partial void OnCoefficientChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareComponentDetails_Wares", "Ware")]
        public Ware Ware
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Ware>("CompasModel.FK_WareComponentDetails_Wares", "Ware").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Ware>("CompasModel.FK_WareComponentDetails_Wares", "Ware").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Ware> WareReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Ware>("CompasModel.FK_WareComponentDetails_Wares", "Ware");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Ware>("CompasModel.FK_WareComponentDetails_Wares", "Ware", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareComponents_Component_Wares", "Ware")]
        public Ware Ware1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Ware>("CompasModel.FK_WareComponents_Component_Wares", "Ware").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Ware>("CompasModel.FK_WareComponents_Component_Wares", "Ware").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Ware> Ware1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Ware>("CompasModel.FK_WareComponents_Component_Wares", "Ware");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Ware>("CompasModel.FK_WareComponents_Component_Wares", "Ware", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="WareDiscount")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WareDiscount : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта WareDiscount.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        /// <param name="active">Исходное значение свойства Active.</param>
        /// <param name="defaultDiscountPercent">Исходное значение свойства DefaultDiscountPercent.</param>
        public static WareDiscount CreateWareDiscount(global::System.Int32 id, global::System.String name, global::System.Boolean active, global::System.Decimal defaultDiscountPercent)
        {
            WareDiscount wareDiscount = new WareDiscount();
            wareDiscount.ID = id;
            wareDiscount.Name = name;
            wareDiscount.Active = active;
            wareDiscount.DefaultDiscountPercent = defaultDiscountPercent;
            return wareDiscount;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> DiscountTypeID
        {
            get
            {
                return _DiscountTypeID;
            }
            set
            {
                OnDiscountTypeIDChanging(value);
                ReportPropertyChanging("DiscountTypeID");
                _DiscountTypeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DiscountTypeID");
                OnDiscountTypeIDChanged();
            }
        }
        private Nullable<global::System.Int32> _DiscountTypeID;
        partial void OnDiscountTypeIDChanging(Nullable<global::System.Int32> value);
        partial void OnDiscountTypeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Active
        {
            get
            {
                return _Active;
            }
            set
            {
                OnActiveChanging(value);
                ReportPropertyChanging("Active");
                _Active = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Active");
                OnActiveChanged();
            }
        }
        private global::System.Boolean _Active;
        partial void OnActiveChanging(global::System.Boolean value);
        partial void OnActiveChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal DefaultDiscountPercent
        {
            get
            {
                return _DefaultDiscountPercent;
            }
            set
            {
                OnDefaultDiscountPercentChanging(value);
                ReportPropertyChanging("DefaultDiscountPercent");
                _DefaultDiscountPercent = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DefaultDiscountPercent");
                OnDefaultDiscountPercentChanged();
            }
        }
        private global::System.Decimal _DefaultDiscountPercent;
        partial void OnDefaultDiscountPercentChanging(global::System.Decimal value);
        partial void OnDefaultDiscountPercentChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareCardTypeDiscounts_WareDiscounts", "WareCardTypeDiscount")]
        public EntityCollection<WareCardTypeDiscount> WareCardTypeDiscounts
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareCardTypeDiscount>("CompasModel.FK_WareCardTypeDiscounts_WareDiscounts", "WareCardTypeDiscount");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareCardTypeDiscount>("CompasModel.FK_WareCardTypeDiscounts_WareDiscounts", "WareCardTypeDiscount", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDiscountRules_WareDiscounts", "WareDiscountRule")]
        public EntityCollection<WareDiscountRule> WareDiscountRules
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareDiscountRule>("CompasModel.FK_WareDiscountRules_WareDiscounts", "WareDiscountRule");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareDiscountRule>("CompasModel.FK_WareDiscountRules_WareDiscounts", "WareDiscountRule", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDiscounts_WareDiscountTypes", "WareDiscountType")]
        public WareDiscountType WareDiscountType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDiscountType>("CompasModel.FK_WareDiscounts_WareDiscountTypes", "WareDiscountType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDiscountType>("CompasModel.FK_WareDiscounts_WareDiscountTypes", "WareDiscountType").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WareDiscountType> WareDiscountTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDiscountType>("CompasModel.FK_WareDiscounts_WareDiscountTypes", "WareDiscountType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<WareDiscountType>("CompasModel.FK_WareDiscounts_WareDiscountTypes", "WareDiscountType", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="WareDiscountRule")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WareDiscountRule : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта WareDiscountRule.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="discountID">Исходное значение свойства DiscountID.</param>
        /// <param name="startSuma">Исходное значение свойства StartSuma.</param>
        public static WareDiscountRule CreateWareDiscountRule(global::System.Int32 id, global::System.Int32 discountID, global::System.Decimal startSuma)
        {
            WareDiscountRule wareDiscountRule = new WareDiscountRule();
            wareDiscountRule.ID = id;
            wareDiscountRule.DiscountID = discountID;
            wareDiscountRule.StartSuma = startSuma;
            return wareDiscountRule;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DiscountID
        {
            get
            {
                return _DiscountID;
            }
            set
            {
                OnDiscountIDChanging(value);
                ReportPropertyChanging("DiscountID");
                _DiscountID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DiscountID");
                OnDiscountIDChanged();
            }
        }
        private global::System.Int32 _DiscountID;
        partial void OnDiscountIDChanging(global::System.Int32 value);
        partial void OnDiscountIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal StartSuma
        {
            get
            {
                return _StartSuma;
            }
            set
            {
                OnStartSumaChanging(value);
                ReportPropertyChanging("StartSuma");
                _StartSuma = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StartSuma");
                OnStartSumaChanged();
            }
        }
        private global::System.Decimal _StartSuma;
        partial void OnStartSumaChanging(global::System.Decimal value);
        partial void OnStartSumaChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> EndSuma
        {
            get
            {
                return _EndSuma;
            }
            set
            {
                OnEndSumaChanging(value);
                ReportPropertyChanging("EndSuma");
                _EndSuma = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EndSuma");
                OnEndSumaChanged();
            }
        }
        private Nullable<global::System.Decimal> _EndSuma;
        partial void OnEndSumaChanging(Nullable<global::System.Decimal> value);
        partial void OnEndSumaChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> DiscountPercent
        {
            get
            {
                return _DiscountPercent;
            }
            set
            {
                OnDiscountPercentChanging(value);
                ReportPropertyChanging("DiscountPercent");
                _DiscountPercent = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DiscountPercent");
                OnDiscountPercentChanged();
            }
        }
        private Nullable<global::System.Decimal> _DiscountPercent;
        partial void OnDiscountPercentChanging(Nullable<global::System.Decimal> value);
        partial void OnDiscountPercentChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDiscountRules_WareDiscounts", "WareDiscount")]
        public WareDiscount WareDiscount
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDiscount>("CompasModel.FK_WareDiscountRules_WareDiscounts", "WareDiscount").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDiscount>("CompasModel.FK_WareDiscountRules_WareDiscounts", "WareDiscount").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WareDiscount> WareDiscountReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDiscount>("CompasModel.FK_WareDiscountRules_WareDiscounts", "WareDiscount");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<WareDiscount>("CompasModel.FK_WareDiscountRules_WareDiscounts", "WareDiscount", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="WareDiscountType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WareDiscountType : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта WareDiscountType.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        public static WareDiscountType CreateWareDiscountType(global::System.Int32 id, global::System.String name)
        {
            WareDiscountType wareDiscountType = new WareDiscountType();
            wareDiscountType.ID = id;
            wareDiscountType.Name = name;
            return wareDiscountType;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDiscounts_WareDiscountTypes", "WareDiscount")]
        public EntityCollection<WareDiscount> WareDiscounts
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareDiscount>("CompasModel.FK_WareDiscounts_WareDiscountTypes", "WareDiscount");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareDiscount>("CompasModel.FK_WareDiscounts_WareDiscountTypes", "WareDiscount", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="WareDocument")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WareDocument : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта WareDocument.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="documentSum">Исходное значение свойства DocumentSum.</param>
        /// <param name="paySum">Исходное значение свойства PaySum.</param>
        /// <param name="documentTypeID">Исходное значение свойства DocumentTypeID.</param>
        /// <param name="createdUserID">Исходное значение свойства CreatedUserID.</param>
        /// <param name="createdDate">Исходное значение свойства CreatedDate.</param>
        /// <param name="currencyID">Исходное значение свойства CurrencyID.</param>
        /// <param name="active">Исходное значение свойства Active.</param>
        public static WareDocument CreateWareDocument(global::System.Int32 id, global::System.Decimal documentSum, global::System.Decimal paySum, global::System.Int32 documentTypeID, global::System.Int32 createdUserID, global::System.DateTime createdDate, global::System.Int32 currencyID, global::System.Boolean active)
        {
            WareDocument wareDocument = new WareDocument();
            wareDocument.ID = id;
            wareDocument.DocumentSum = documentSum;
            wareDocument.PaySum = paySum;
            wareDocument.DocumentTypeID = documentTypeID;
            wareDocument.CreatedUserID = createdUserID;
            wareDocument.CreatedDate = createdDate;
            wareDocument.CurrencyID = currencyID;
            wareDocument.Active = active;
            return wareDocument;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Number
        {
            get
            {
                return _Number;
            }
            set
            {
                OnNumberChanging(value);
                ReportPropertyChanging("Number");
                _Number = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Number");
                OnNumberChanged();
            }
        }
        private global::System.String _Number;
        partial void OnNumberChanging(global::System.String value);
        partial void OnNumberChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ContractorID
        {
            get
            {
                return _ContractorID;
            }
            set
            {
                OnContractorIDChanging(value);
                ReportPropertyChanging("ContractorID");
                _ContractorID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ContractorID");
                OnContractorIDChanged();
            }
        }
        private Nullable<global::System.Int32> _ContractorID;
        partial void OnContractorIDChanging(Nullable<global::System.Int32> value);
        partial void OnContractorIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ToStructureObjectD
        {
            get
            {
                return _ToStructureObjectD;
            }
            set
            {
                OnToStructureObjectDChanging(value);
                ReportPropertyChanging("ToStructureObjectD");
                _ToStructureObjectD = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ToStructureObjectD");
                OnToStructureObjectDChanged();
            }
        }
        private Nullable<global::System.Int32> _ToStructureObjectD;
        partial void OnToStructureObjectDChanging(Nullable<global::System.Int32> value);
        partial void OnToStructureObjectDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> FromStructureObjectID
        {
            get
            {
                return _FromStructureObjectID;
            }
            set
            {
                OnFromStructureObjectIDChanging(value);
                ReportPropertyChanging("FromStructureObjectID");
                _FromStructureObjectID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FromStructureObjectID");
                OnFromStructureObjectIDChanged();
            }
        }
        private Nullable<global::System.Int32> _FromStructureObjectID;
        partial void OnFromStructureObjectIDChanging(Nullable<global::System.Int32> value);
        partial void OnFromStructureObjectIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> Date
        {
            get
            {
                return _Date;
            }
            set
            {
                OnDateChanging(value);
                ReportPropertyChanging("Date");
                _Date = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Date");
                OnDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _Date;
        partial void OnDateChanging(Nullable<global::System.DateTime> value);
        partial void OnDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal DocumentSum
        {
            get
            {
                return _DocumentSum;
            }
            set
            {
                OnDocumentSumChanging(value);
                ReportPropertyChanging("DocumentSum");
                _DocumentSum = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DocumentSum");
                OnDocumentSumChanged();
            }
        }
        private global::System.Decimal _DocumentSum;
        partial void OnDocumentSumChanging(global::System.Decimal value);
        partial void OnDocumentSumChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal PaySum
        {
            get
            {
                return _PaySum;
            }
            set
            {
                OnPaySumChanging(value);
                ReportPropertyChanging("PaySum");
                _PaySum = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PaySum");
                OnPaySumChanged();
            }
        }
        private global::System.Decimal _PaySum;
        partial void OnPaySumChanging(global::System.Decimal value);
        partial void OnPaySumChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DocumentTypeID
        {
            get
            {
                return _DocumentTypeID;
            }
            set
            {
                OnDocumentTypeIDChanging(value);
                ReportPropertyChanging("DocumentTypeID");
                _DocumentTypeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DocumentTypeID");
                OnDocumentTypeIDChanged();
            }
        }
        private global::System.Int32 _DocumentTypeID;
        partial void OnDocumentTypeIDChanging(global::System.Int32 value);
        partial void OnDocumentTypeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> CreatedEmployeeID
        {
            get
            {
                return _CreatedEmployeeID;
            }
            set
            {
                OnCreatedEmployeeIDChanging(value);
                ReportPropertyChanging("CreatedEmployeeID");
                _CreatedEmployeeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedEmployeeID");
                OnCreatedEmployeeIDChanged();
            }
        }
        private Nullable<global::System.Int32> _CreatedEmployeeID;
        partial void OnCreatedEmployeeIDChanging(Nullable<global::System.Int32> value);
        partial void OnCreatedEmployeeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CreatedUserID
        {
            get
            {
                return _CreatedUserID;
            }
            set
            {
                OnCreatedUserIDChanging(value);
                ReportPropertyChanging("CreatedUserID");
                _CreatedUserID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedUserID");
                OnCreatedUserIDChanged();
            }
        }
        private global::System.Int32 _CreatedUserID;
        partial void OnCreatedUserIDChanging(global::System.Int32 value);
        partial void OnCreatedUserIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime CreatedDate
        {
            get
            {
                return _CreatedDate;
            }
            set
            {
                OnCreatedDateChanging(value);
                ReportPropertyChanging("CreatedDate");
                _CreatedDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedDate");
                OnCreatedDateChanged();
            }
        }
        private global::System.DateTime _CreatedDate;
        partial void OnCreatedDateChanging(global::System.DateTime value);
        partial void OnCreatedDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> LinkedDocumentID
        {
            get
            {
                return _LinkedDocumentID;
            }
            set
            {
                OnLinkedDocumentIDChanging(value);
                ReportPropertyChanging("LinkedDocumentID");
                _LinkedDocumentID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LinkedDocumentID");
                OnLinkedDocumentIDChanged();
            }
        }
        private Nullable<global::System.Int32> _LinkedDocumentID;
        partial void OnLinkedDocumentIDChanging(Nullable<global::System.Int32> value);
        partial void OnLinkedDocumentIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CurrencyID
        {
            get
            {
                return _CurrencyID;
            }
            set
            {
                OnCurrencyIDChanging(value);
                ReportPropertyChanging("CurrencyID");
                _CurrencyID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CurrencyID");
                OnCurrencyIDChanged();
            }
        }
        private global::System.Int32 _CurrencyID;
        partial void OnCurrencyIDChanging(global::System.Int32 value);
        partial void OnCurrencyIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Active
        {
            get
            {
                return _Active;
            }
            set
            {
                OnActiveChanging(value);
                ReportPropertyChanging("Active");
                _Active = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Active");
                OnActiveChanged();
            }
        }
        private global::System.Boolean _Active;
        partial void OnActiveChanging(global::System.Boolean value);
        partial void OnActiveChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Address
        {
            get
            {
                return _Address;
            }
            set
            {
                OnAddressChanging(value);
                ReportPropertyChanging("Address");
                _Address = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Address");
                OnAddressChanged();
            }
        }
        private global::System.String _Address;
        partial void OnAddressChanging(global::System.String value);
        partial void OnAddressChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> EnterpriseID
        {
            get
            {
                return _EnterpriseID;
            }
            set
            {
                OnEnterpriseIDChanging(value);
                ReportPropertyChanging("EnterpriseID");
                _EnterpriseID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EnterpriseID");
                OnEnterpriseIDChanged();
            }
        }
        private Nullable<global::System.Int32> _EnterpriseID;
        partial void OnEnterpriseIDChanging(Nullable<global::System.Int32> value);
        partial void OnEnterpriseIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> CardID
        {
            get
            {
                return _CardID;
            }
            set
            {
                OnCardIDChanging(value);
                ReportPropertyChanging("CardID");
                _CardID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CardID");
                OnCardIDChanged();
            }
        }
        private Nullable<global::System.Int32> _CardID;
        partial void OnCardIDChanging(Nullable<global::System.Int32> value);
        partial void OnCardIDChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocuments_Contractors", "Contractor")]
        public Contractor Contractor
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Contractor>("CompasModel.FK_WareDocuments_Contractors", "Contractor").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Contractor>("CompasModel.FK_WareDocuments_Contractors", "Contractor").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Contractor> ContractorReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Contractor>("CompasModel.FK_WareDocuments_Contractors", "Contractor");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Contractor>("CompasModel.FK_WareDocuments_Contractors", "Contractor", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocuments_Currencies", "Currency")]
        public Currency Currency
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Currency>("CompasModel.FK_WareDocuments_Currencies", "Currency").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Currency>("CompasModel.FK_WareDocuments_Currencies", "Currency").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Currency> CurrencyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Currency>("CompasModel.FK_WareDocuments_Currencies", "Currency");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Currency>("CompasModel.FK_WareDocuments_Currencies", "Currency", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocuments_Enterprises", "Enterprise")]
        public Enterprise Enterprise
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Enterprise>("CompasModel.FK_WareDocuments_Enterprises", "Enterprise").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Enterprise>("CompasModel.FK_WareDocuments_Enterprises", "Enterprise").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Enterprise> EnterpriseReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Enterprise>("CompasModel.FK_WareDocuments_Enterprises", "Enterprise");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Enterprise>("CompasModel.FK_WareDocuments_Enterprises", "Enterprise", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocuments_SecurityUsers", "SecurityUser")]
        public SecurityUser SecurityUser
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecurityUser>("CompasModel.FK_WareDocuments_SecurityUsers", "SecurityUser").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecurityUser>("CompasModel.FK_WareDocuments_SecurityUsers", "SecurityUser").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<SecurityUser> SecurityUserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecurityUser>("CompasModel.FK_WareDocuments_SecurityUsers", "SecurityUser");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<SecurityUser>("CompasModel.FK_WareDocuments_SecurityUsers", "SecurityUser", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocuments_StaffEmployees", "StaffEmployee")]
        public StaffEmployee StaffEmployee
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffEmployee>("CompasModel.FK_WareDocuments_StaffEmployees", "StaffEmployee").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffEmployee>("CompasModel.FK_WareDocuments_StaffEmployees", "StaffEmployee").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<StaffEmployee> StaffEmployeeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffEmployee>("CompasModel.FK_WareDocuments_StaffEmployees", "StaffEmployee");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<StaffEmployee>("CompasModel.FK_WareDocuments_StaffEmployees", "StaffEmployee", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocuments_StaffDepartments", "StaffStructureObject")]
        public StaffStructureObject StaffStructureObject
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffStructureObject>("CompasModel.FK_WareDocuments_StaffDepartments", "StaffStructureObject").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffStructureObject>("CompasModel.FK_WareDocuments_StaffDepartments", "StaffStructureObject").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<StaffStructureObject> StaffStructureObjectReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffStructureObject>("CompasModel.FK_WareDocuments_StaffDepartments", "StaffStructureObject");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<StaffStructureObject>("CompasModel.FK_WareDocuments_StaffDepartments", "StaffStructureObject", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocuments_StaffDepartments1", "StaffStructureObject")]
        public StaffStructureObject StaffStructureObject1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffStructureObject>("CompasModel.FK_WareDocuments_StaffDepartments1", "StaffStructureObject").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffStructureObject>("CompasModel.FK_WareDocuments_StaffDepartments1", "StaffStructureObject").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<StaffStructureObject> StaffStructureObject1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffStructureObject>("CompasModel.FK_WareDocuments_StaffDepartments1", "StaffStructureObject");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<StaffStructureObject>("CompasModel.FK_WareDocuments_StaffDepartments1", "StaffStructureObject", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareCardBalanceOperations_WareDocuments", "WareCardBalanceOperation")]
        public EntityCollection<WareCardBalanceOperation> WareCardBalanceOperations
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareCardBalanceOperation>("CompasModel.FK_WareCardBalanceOperations_WareDocuments", "WareCardBalanceOperation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareCardBalanceOperation>("CompasModel.FK_WareCardBalanceOperations_WareDocuments", "WareCardBalanceOperation", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocumentCars_WareDocuments", "WareDocumentCar")]
        public EntityCollection<WareDocumentCar> WareDocumentCars
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareDocumentCar>("CompasModel.FK_WareDocumentCars_WareDocuments", "WareDocumentCar");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareDocumentCar>("CompasModel.FK_WareDocumentCars_WareDocuments", "WareDocumentCar", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocumentDetails_WareDocuments", "WareDocumentDetail")]
        public EntityCollection<WareDocumentDetail> WareDocumentDetails
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareDocumentDetail>("CompasModel.FK_WareDocumentDetails_WareDocuments", "WareDocumentDetail");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareDocumentDetail>("CompasModel.FK_WareDocumentDetails_WareDocuments", "WareDocumentDetail", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocumentPayments_WareDocuments", "WareDocumentPayment")]
        public EntityCollection<WareDocumentPayment> WareDocumentPayments
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareDocumentPayment>("CompasModel.FK_WareDocumentPayments_WareDocuments", "WareDocumentPayment");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareDocumentPayment>("CompasModel.FK_WareDocumentPayments_WareDocuments", "WareDocumentPayment", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocuments_WareDocumentTypes", "WareDocumentType")]
        public WareDocumentType WareDocumentType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDocumentType>("CompasModel.FK_WareDocuments_WareDocumentTypes", "WareDocumentType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDocumentType>("CompasModel.FK_WareDocuments_WareDocumentTypes", "WareDocumentType").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WareDocumentType> WareDocumentTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDocumentType>("CompasModel.FK_WareDocuments_WareDocumentTypes", "WareDocumentType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<WareDocumentType>("CompasModel.FK_WareDocuments_WareDocumentTypes", "WareDocumentType", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocumentStaffDetails_WareDocuments", "WareDocumentStaffDetail")]
        public EntityCollection<WareDocumentStaffDetail> WareDocumentStaffDetails
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareDocumentStaffDetail>("CompasModel.FK_WareDocumentStaffDetails_WareDocuments", "WareDocumentStaffDetail");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareDocumentStaffDetail>("CompasModel.FK_WareDocumentStaffDetails_WareDocuments", "WareDocumentStaffDetail", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocumentStates_WareDocuments", "WareDocumentState")]
        public EntityCollection<WareDocumentState> WareDocumentStates
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareDocumentState>("CompasModel.FK_WareDocumentStates_WareDocuments", "WareDocumentState");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareDocumentState>("CompasModel.FK_WareDocumentStates_WareDocuments", "WareDocumentState", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WarePrices_WareDocuments", "WarePrice")]
        public EntityCollection<WarePrice> WarePrices
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WarePrice>("CompasModel.FK_WarePrices_WareDocuments", "WarePrice");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WarePrice>("CompasModel.FK_WarePrices_WareDocuments", "WarePrice", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="WareDocumentCar")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WareDocumentCar : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта WareDocumentCar.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="documentID">Исходное значение свойства DocumentID.</param>
        /// <param name="carID">Исходное значение свойства CarID.</param>
        public static WareDocumentCar CreateWareDocumentCar(global::System.Int32 id, global::System.Int32 documentID, global::System.Int32 carID)
        {
            WareDocumentCar wareDocumentCar = new WareDocumentCar();
            wareDocumentCar.ID = id;
            wareDocumentCar.DocumentID = documentID;
            wareDocumentCar.CarID = carID;
            return wareDocumentCar;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DocumentID
        {
            get
            {
                return _DocumentID;
            }
            set
            {
                OnDocumentIDChanging(value);
                ReportPropertyChanging("DocumentID");
                _DocumentID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DocumentID");
                OnDocumentIDChanged();
            }
        }
        private global::System.Int32 _DocumentID;
        partial void OnDocumentIDChanging(global::System.Int32 value);
        partial void OnDocumentIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CarID
        {
            get
            {
                return _CarID;
            }
            set
            {
                OnCarIDChanging(value);
                ReportPropertyChanging("CarID");
                _CarID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CarID");
                OnCarIDChanged();
            }
        }
        private global::System.Int32 _CarID;
        partial void OnCarIDChanging(global::System.Int32 value);
        partial void OnCarIDChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocumentCars_CWCars", "CWCar")]
        public CWCar CWCar
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CWCar>("CompasModel.FK_WareDocumentCars_CWCars", "CWCar").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CWCar>("CompasModel.FK_WareDocumentCars_CWCars", "CWCar").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CWCar> CWCarReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CWCar>("CompasModel.FK_WareDocumentCars_CWCars", "CWCar");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CWCar>("CompasModel.FK_WareDocumentCars_CWCars", "CWCar", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocumentCars_WareDocuments", "WareDocument")]
        public WareDocument WareDocument
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDocument>("CompasModel.FK_WareDocumentCars_WareDocuments", "WareDocument").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDocument>("CompasModel.FK_WareDocumentCars_WareDocuments", "WareDocument").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WareDocument> WareDocumentReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDocument>("CompasModel.FK_WareDocumentCars_WareDocuments", "WareDocument");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<WareDocument>("CompasModel.FK_WareDocumentCars_WareDocuments", "WareDocument", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="WareDocumentDetail")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WareDocumentDetail : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта WareDocumentDetail.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="documentID">Исходное значение свойства DocumentID.</param>
        /// <param name="wareID">Исходное значение свойства WareID.</param>
        /// <param name="unitQuantity">Исходное значение свойства UnitQuantity.</param>
        /// <param name="secondaryUnitQuantity">Исходное значение свойства SecondaryUnitQuantity.</param>
        /// <param name="currencyID">Исходное значение свойства CurrencyID.</param>
        public static WareDocumentDetail CreateWareDocumentDetail(global::System.Int32 id, global::System.Int32 documentID, global::System.Int32 wareID, global::System.Decimal unitQuantity, global::System.Decimal secondaryUnitQuantity, global::System.Int32 currencyID)
        {
            WareDocumentDetail wareDocumentDetail = new WareDocumentDetail();
            wareDocumentDetail.ID = id;
            wareDocumentDetail.DocumentID = documentID;
            wareDocumentDetail.WareID = wareID;
            wareDocumentDetail.UnitQuantity = unitQuantity;
            wareDocumentDetail.SecondaryUnitQuantity = secondaryUnitQuantity;
            wareDocumentDetail.CurrencyID = currencyID;
            return wareDocumentDetail;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DocumentID
        {
            get
            {
                return _DocumentID;
            }
            set
            {
                OnDocumentIDChanging(value);
                ReportPropertyChanging("DocumentID");
                _DocumentID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DocumentID");
                OnDocumentIDChanged();
            }
        }
        private global::System.Int32 _DocumentID;
        partial void OnDocumentIDChanging(global::System.Int32 value);
        partial void OnDocumentIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 WareID
        {
            get
            {
                return _WareID;
            }
            set
            {
                OnWareIDChanging(value);
                ReportPropertyChanging("WareID");
                _WareID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("WareID");
                OnWareIDChanged();
            }
        }
        private global::System.Int32 _WareID;
        partial void OnWareIDChanging(global::System.Int32 value);
        partial void OnWareIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal UnitQuantity
        {
            get
            {
                return _UnitQuantity;
            }
            set
            {
                OnUnitQuantityChanging(value);
                ReportPropertyChanging("UnitQuantity");
                _UnitQuantity = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UnitQuantity");
                OnUnitQuantityChanged();
            }
        }
        private global::System.Decimal _UnitQuantity;
        partial void OnUnitQuantityChanging(global::System.Decimal value);
        partial void OnUnitQuantityChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal SecondaryUnitQuantity
        {
            get
            {
                return _SecondaryUnitQuantity;
            }
            set
            {
                OnSecondaryUnitQuantityChanging(value);
                ReportPropertyChanging("SecondaryUnitQuantity");
                _SecondaryUnitQuantity = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SecondaryUnitQuantity");
                OnSecondaryUnitQuantityChanged();
            }
        }
        private global::System.Decimal _SecondaryUnitQuantity;
        partial void OnSecondaryUnitQuantityChanging(global::System.Decimal value);
        partial void OnSecondaryUnitQuantityChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> PriceForUnit
        {
            get
            {
                return _PriceForUnit;
            }
            set
            {
                OnPriceForUnitChanging(value);
                ReportPropertyChanging("PriceForUnit");
                _PriceForUnit = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PriceForUnit");
                OnPriceForUnitChanged();
            }
        }
        private Nullable<global::System.Decimal> _PriceForUnit;
        partial void OnPriceForUnitChanging(Nullable<global::System.Decimal> value);
        partial void OnPriceForUnitChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> DiscountForUnit
        {
            get
            {
                return _DiscountForUnit;
            }
            set
            {
                OnDiscountForUnitChanging(value);
                ReportPropertyChanging("DiscountForUnit");
                _DiscountForUnit = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DiscountForUnit");
                OnDiscountForUnitChanged();
            }
        }
        private Nullable<global::System.Decimal> _DiscountForUnit;
        partial void OnDiscountForUnitChanging(Nullable<global::System.Decimal> value);
        partial void OnDiscountForUnitChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> EndPriceForUnit
        {
            get
            {
                return _EndPriceForUnit;
            }
            set
            {
                OnEndPriceForUnitChanging(value);
                ReportPropertyChanging("EndPriceForUnit");
                _EndPriceForUnit = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EndPriceForUnit");
                OnEndPriceForUnitChanged();
            }
        }
        private Nullable<global::System.Decimal> _EndPriceForUnit;
        partial void OnEndPriceForUnitChanging(Nullable<global::System.Decimal> value);
        partial void OnEndPriceForUnitChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> EndPrice
        {
            get
            {
                return _EndPrice;
            }
            set
            {
                OnEndPriceChanging(value);
                ReportPropertyChanging("EndPrice");
                _EndPrice = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EndPrice");
                OnEndPriceChanged();
            }
        }
        private Nullable<global::System.Decimal> _EndPrice;
        partial void OnEndPriceChanging(Nullable<global::System.Decimal> value);
        partial void OnEndPriceChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CurrencyID
        {
            get
            {
                return _CurrencyID;
            }
            set
            {
                OnCurrencyIDChanging(value);
                ReportPropertyChanging("CurrencyID");
                _CurrencyID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CurrencyID");
                OnCurrencyIDChanged();
            }
        }
        private global::System.Int32 _CurrencyID;
        partial void OnCurrencyIDChanging(global::System.Int32 value);
        partial void OnCurrencyIDChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocumentDetails_RefCurrencies", "Currency")]
        public Currency Currency
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Currency>("CompasModel.FK_WareDocumentDetails_RefCurrencies", "Currency").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Currency>("CompasModel.FK_WareDocumentDetails_RefCurrencies", "Currency").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Currency> CurrencyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Currency>("CompasModel.FK_WareDocumentDetails_RefCurrencies", "Currency");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Currency>("CompasModel.FK_WareDocumentDetails_RefCurrencies", "Currency", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocumentDetails_WareDocuments", "WareDocument")]
        public WareDocument WareDocument
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDocument>("CompasModel.FK_WareDocumentDetails_WareDocuments", "WareDocument").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDocument>("CompasModel.FK_WareDocumentDetails_WareDocuments", "WareDocument").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WareDocument> WareDocumentReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDocument>("CompasModel.FK_WareDocumentDetails_WareDocuments", "WareDocument");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<WareDocument>("CompasModel.FK_WareDocumentDetails_WareDocuments", "WareDocument", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocumentDetails_Wares", "Ware")]
        public Ware Ware
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Ware>("CompasModel.FK_WareDocumentDetails_Wares", "Ware").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Ware>("CompasModel.FK_WareDocumentDetails_Wares", "Ware").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Ware> WareReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Ware>("CompasModel.FK_WareDocumentDetails_Wares", "Ware");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Ware>("CompasModel.FK_WareDocumentDetails_Wares", "Ware", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocumentStaffDetails_WareDocumentDetails", "WareDocumentStaffDetail")]
        public EntityCollection<WareDocumentStaffDetail> WareDocumentStaffDetails
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareDocumentStaffDetail>("CompasModel.FK_WareDocumentStaffDetails_WareDocumentDetails", "WareDocumentStaffDetail");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareDocumentStaffDetail>("CompasModel.FK_WareDocumentStaffDetails_WareDocumentDetails", "WareDocumentStaffDetail", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="WareDocumentPayment")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WareDocumentPayment : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта WareDocumentPayment.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="date">Исходное значение свойства Date.</param>
        /// <param name="suma">Исходное значение свойства Suma.</param>
        /// <param name="createdUserID">Исходное значение свойства CreatedUserID.</param>
        /// <param name="createdDate">Исходное значение свойства CreatedDate.</param>
        /// <param name="active">Исходное значение свойства Active.</param>
        /// <param name="documentID">Исходное значение свойства DocumentID.</param>
        /// <param name="currencyID">Исходное значение свойства CurrencyID.</param>
        /// <param name="paymentTypeID">Исходное значение свойства PaymentTypeID.</param>
        /// <param name="structureObjectID">Исходное значение свойства StructureObjectID.</param>
        public static WareDocumentPayment CreateWareDocumentPayment(global::System.Int32 id, global::System.DateTime date, global::System.Decimal suma, global::System.Int32 createdUserID, global::System.DateTime createdDate, global::System.Boolean active, global::System.Int32 documentID, global::System.Int32 currencyID, global::System.Int32 paymentTypeID, global::System.Int32 structureObjectID)
        {
            WareDocumentPayment wareDocumentPayment = new WareDocumentPayment();
            wareDocumentPayment.ID = id;
            wareDocumentPayment.Date = date;
            wareDocumentPayment.Suma = suma;
            wareDocumentPayment.CreatedUserID = createdUserID;
            wareDocumentPayment.CreatedDate = createdDate;
            wareDocumentPayment.Active = active;
            wareDocumentPayment.DocumentID = documentID;
            wareDocumentPayment.CurrencyID = currencyID;
            wareDocumentPayment.PaymentTypeID = paymentTypeID;
            wareDocumentPayment.StructureObjectID = structureObjectID;
            return wareDocumentPayment;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Date
        {
            get
            {
                return _Date;
            }
            set
            {
                OnDateChanging(value);
                ReportPropertyChanging("Date");
                _Date = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Date");
                OnDateChanged();
            }
        }
        private global::System.DateTime _Date;
        partial void OnDateChanging(global::System.DateTime value);
        partial void OnDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal Suma
        {
            get
            {
                return _Suma;
            }
            set
            {
                OnSumaChanging(value);
                ReportPropertyChanging("Suma");
                _Suma = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Suma");
                OnSumaChanged();
            }
        }
        private global::System.Decimal _Suma;
        partial void OnSumaChanging(global::System.Decimal value);
        partial void OnSumaChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CreatedUserID
        {
            get
            {
                return _CreatedUserID;
            }
            set
            {
                OnCreatedUserIDChanging(value);
                ReportPropertyChanging("CreatedUserID");
                _CreatedUserID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedUserID");
                OnCreatedUserIDChanged();
            }
        }
        private global::System.Int32 _CreatedUserID;
        partial void OnCreatedUserIDChanging(global::System.Int32 value);
        partial void OnCreatedUserIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime CreatedDate
        {
            get
            {
                return _CreatedDate;
            }
            set
            {
                OnCreatedDateChanging(value);
                ReportPropertyChanging("CreatedDate");
                _CreatedDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedDate");
                OnCreatedDateChanged();
            }
        }
        private global::System.DateTime _CreatedDate;
        partial void OnCreatedDateChanging(global::System.DateTime value);
        partial void OnCreatedDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Active
        {
            get
            {
                return _Active;
            }
            set
            {
                OnActiveChanging(value);
                ReportPropertyChanging("Active");
                _Active = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Active");
                OnActiveChanged();
            }
        }
        private global::System.Boolean _Active;
        partial void OnActiveChanging(global::System.Boolean value);
        partial void OnActiveChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DocumentID
        {
            get
            {
                return _DocumentID;
            }
            set
            {
                OnDocumentIDChanging(value);
                ReportPropertyChanging("DocumentID");
                _DocumentID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DocumentID");
                OnDocumentIDChanged();
            }
        }
        private global::System.Int32 _DocumentID;
        partial void OnDocumentIDChanging(global::System.Int32 value);
        partial void OnDocumentIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CurrencyID
        {
            get
            {
                return _CurrencyID;
            }
            set
            {
                OnCurrencyIDChanging(value);
                ReportPropertyChanging("CurrencyID");
                _CurrencyID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CurrencyID");
                OnCurrencyIDChanged();
            }
        }
        private global::System.Int32 _CurrencyID;
        partial void OnCurrencyIDChanging(global::System.Int32 value);
        partial void OnCurrencyIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PaymentTypeID
        {
            get
            {
                return _PaymentTypeID;
            }
            set
            {
                OnPaymentTypeIDChanging(value);
                ReportPropertyChanging("PaymentTypeID");
                _PaymentTypeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PaymentTypeID");
                OnPaymentTypeIDChanged();
            }
        }
        private global::System.Int32 _PaymentTypeID;
        partial void OnPaymentTypeIDChanging(global::System.Int32 value);
        partial void OnPaymentTypeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 StructureObjectID
        {
            get
            {
                return _StructureObjectID;
            }
            set
            {
                OnStructureObjectIDChanging(value);
                ReportPropertyChanging("StructureObjectID");
                _StructureObjectID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StructureObjectID");
                OnStructureObjectIDChanged();
            }
        }
        private global::System.Int32 _StructureObjectID;
        partial void OnStructureObjectIDChanging(global::System.Int32 value);
        partial void OnStructureObjectIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> CardID
        {
            get
            {
                return _CardID;
            }
            set
            {
                OnCardIDChanging(value);
                ReportPropertyChanging("CardID");
                _CardID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CardID");
                OnCardIDChanged();
            }
        }
        private Nullable<global::System.Int32> _CardID;
        partial void OnCardIDChanging(Nullable<global::System.Int32> value);
        partial void OnCardIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CheckNumber
        {
            get
            {
                return _CheckNumber;
            }
            set
            {
                OnCheckNumberChanging(value);
                ReportPropertyChanging("CheckNumber");
                _CheckNumber = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CheckNumber");
                OnCheckNumberChanged();
            }
        }
        private global::System.String _CheckNumber;
        partial void OnCheckNumberChanging(global::System.String value);
        partial void OnCheckNumberChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocumentPayments_Currencies", "Currency")]
        public Currency Currency
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Currency>("CompasModel.FK_WareDocumentPayments_Currencies", "Currency").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Currency>("CompasModel.FK_WareDocumentPayments_Currencies", "Currency").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Currency> CurrencyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Currency>("CompasModel.FK_WareDocumentPayments_Currencies", "Currency");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Currency>("CompasModel.FK_WareDocumentPayments_Currencies", "Currency", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocumentPayments_SecurityUsers", "SecurityUser")]
        public SecurityUser SecurityUser
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecurityUser>("CompasModel.FK_WareDocumentPayments_SecurityUsers", "SecurityUser").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecurityUser>("CompasModel.FK_WareDocumentPayments_SecurityUsers", "SecurityUser").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<SecurityUser> SecurityUserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SecurityUser>("CompasModel.FK_WareDocumentPayments_SecurityUsers", "SecurityUser");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<SecurityUser>("CompasModel.FK_WareDocumentPayments_SecurityUsers", "SecurityUser", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocumentPayments_StaffStructureObjects", "StaffStructureObject")]
        public StaffStructureObject StaffStructureObject
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffStructureObject>("CompasModel.FK_WareDocumentPayments_StaffStructureObjects", "StaffStructureObject").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffStructureObject>("CompasModel.FK_WareDocumentPayments_StaffStructureObjects", "StaffStructureObject").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<StaffStructureObject> StaffStructureObjectReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffStructureObject>("CompasModel.FK_WareDocumentPayments_StaffStructureObjects", "StaffStructureObject");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<StaffStructureObject>("CompasModel.FK_WareDocumentPayments_StaffStructureObjects", "StaffStructureObject", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocumentPayments_WareCards", "WareCard")]
        public WareCard WareCard
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareCard>("CompasModel.FK_WareDocumentPayments_WareCards", "WareCard").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareCard>("CompasModel.FK_WareDocumentPayments_WareCards", "WareCard").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WareCard> WareCardReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareCard>("CompasModel.FK_WareDocumentPayments_WareCards", "WareCard");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<WareCard>("CompasModel.FK_WareDocumentPayments_WareCards", "WareCard", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocumentPayments_WareDocuments", "WareDocument")]
        public WareDocument WareDocument
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDocument>("CompasModel.FK_WareDocumentPayments_WareDocuments", "WareDocument").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDocument>("CompasModel.FK_WareDocumentPayments_WareDocuments", "WareDocument").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WareDocument> WareDocumentReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDocument>("CompasModel.FK_WareDocumentPayments_WareDocuments", "WareDocument");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<WareDocument>("CompasModel.FK_WareDocumentPayments_WareDocuments", "WareDocument", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocumentPayments_WarePayTypes", "WareDocumentPaymentType")]
        public WareDocumentPaymentType WareDocumentPaymentType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDocumentPaymentType>("CompasModel.FK_WareDocumentPayments_WarePayTypes", "WareDocumentPaymentType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDocumentPaymentType>("CompasModel.FK_WareDocumentPayments_WarePayTypes", "WareDocumentPaymentType").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WareDocumentPaymentType> WareDocumentPaymentTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDocumentPaymentType>("CompasModel.FK_WareDocumentPayments_WarePayTypes", "WareDocumentPaymentType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<WareDocumentPaymentType>("CompasModel.FK_WareDocumentPayments_WarePayTypes", "WareDocumentPaymentType", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="WareDocumentPaymentType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WareDocumentPaymentType : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта WareDocumentPaymentType.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        public static WareDocumentPaymentType CreateWareDocumentPaymentType(global::System.Int32 id, global::System.String name)
        {
            WareDocumentPaymentType wareDocumentPaymentType = new WareDocumentPaymentType();
            wareDocumentPaymentType.ID = id;
            wareDocumentPaymentType.Name = name;
            return wareDocumentPaymentType;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocumentPayments_WarePayTypes", "WareDocumentPayment")]
        public EntityCollection<WareDocumentPayment> WareDocumentPayments
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareDocumentPayment>("CompasModel.FK_WareDocumentPayments_WarePayTypes", "WareDocumentPayment");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareDocumentPayment>("CompasModel.FK_WareDocumentPayments_WarePayTypes", "WareDocumentPayment", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="WareDocumentStaffDetail")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WareDocumentStaffDetail : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта WareDocumentStaffDetail.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="documentID">Исходное значение свойства DocumentID.</param>
        public static WareDocumentStaffDetail CreateWareDocumentStaffDetail(global::System.Int32 id, global::System.Int32 documentID)
        {
            WareDocumentStaffDetail wareDocumentStaffDetail = new WareDocumentStaffDetail();
            wareDocumentStaffDetail.ID = id;
            wareDocumentStaffDetail.DocumentID = documentID;
            return wareDocumentStaffDetail;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DocumentID
        {
            get
            {
                return _DocumentID;
            }
            set
            {
                OnDocumentIDChanging(value);
                ReportPropertyChanging("DocumentID");
                _DocumentID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DocumentID");
                OnDocumentIDChanged();
            }
        }
        private global::System.Int32 _DocumentID;
        partial void OnDocumentIDChanging(global::System.Int32 value);
        partial void OnDocumentIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> DocumenDetailID
        {
            get
            {
                return _DocumenDetailID;
            }
            set
            {
                OnDocumenDetailIDChanging(value);
                ReportPropertyChanging("DocumenDetailID");
                _DocumenDetailID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DocumenDetailID");
                OnDocumenDetailIDChanged();
            }
        }
        private Nullable<global::System.Int32> _DocumenDetailID;
        partial void OnDocumenDetailIDChanging(Nullable<global::System.Int32> value);
        partial void OnDocumenDetailIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> StructureObjectID
        {
            get
            {
                return _StructureObjectID;
            }
            set
            {
                OnStructureObjectIDChanging(value);
                ReportPropertyChanging("StructureObjectID");
                _StructureObjectID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StructureObjectID");
                OnStructureObjectIDChanged();
            }
        }
        private Nullable<global::System.Int32> _StructureObjectID;
        partial void OnStructureObjectIDChanging(Nullable<global::System.Int32> value);
        partial void OnStructureObjectIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> TeamID
        {
            get
            {
                return _TeamID;
            }
            set
            {
                OnTeamIDChanging(value);
                ReportPropertyChanging("TeamID");
                _TeamID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TeamID");
                OnTeamIDChanged();
            }
        }
        private Nullable<global::System.Int32> _TeamID;
        partial void OnTeamIDChanging(Nullable<global::System.Int32> value);
        partial void OnTeamIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> EmployeeID
        {
            get
            {
                return _EmployeeID;
            }
            set
            {
                OnEmployeeIDChanging(value);
                ReportPropertyChanging("EmployeeID");
                _EmployeeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EmployeeID");
                OnEmployeeIDChanged();
            }
        }
        private Nullable<global::System.Int32> _EmployeeID;
        partial void OnEmployeeIDChanging(Nullable<global::System.Int32> value);
        partial void OnEmployeeIDChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocumentStaffDetails_StaffEmployees", "StaffEmployee")]
        public StaffEmployee StaffEmployee
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffEmployee>("CompasModel.FK_WareDocumentStaffDetails_StaffEmployees", "StaffEmployee").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffEmployee>("CompasModel.FK_WareDocumentStaffDetails_StaffEmployees", "StaffEmployee").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<StaffEmployee> StaffEmployeeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffEmployee>("CompasModel.FK_WareDocumentStaffDetails_StaffEmployees", "StaffEmployee");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<StaffEmployee>("CompasModel.FK_WareDocumentStaffDetails_StaffEmployees", "StaffEmployee", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocumentStaffDetails_StaffTeams", "StaffTeam")]
        public StaffTeam StaffTeam
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffTeam>("CompasModel.FK_WareDocumentStaffDetails_StaffTeams", "StaffTeam").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffTeam>("CompasModel.FK_WareDocumentStaffDetails_StaffTeams", "StaffTeam").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<StaffTeam> StaffTeamReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffTeam>("CompasModel.FK_WareDocumentStaffDetails_StaffTeams", "StaffTeam");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<StaffTeam>("CompasModel.FK_WareDocumentStaffDetails_StaffTeams", "StaffTeam", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocumentStaffDetails_WareDocumentDetails", "WareDocumentDetail")]
        public WareDocumentDetail WareDocumentDetail
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDocumentDetail>("CompasModel.FK_WareDocumentStaffDetails_WareDocumentDetails", "WareDocumentDetail").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDocumentDetail>("CompasModel.FK_WareDocumentStaffDetails_WareDocumentDetails", "WareDocumentDetail").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WareDocumentDetail> WareDocumentDetailReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDocumentDetail>("CompasModel.FK_WareDocumentStaffDetails_WareDocumentDetails", "WareDocumentDetail");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<WareDocumentDetail>("CompasModel.FK_WareDocumentStaffDetails_WareDocumentDetails", "WareDocumentDetail", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocumentStaffDetails_WareDocuments", "WareDocument")]
        public WareDocument WareDocument
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDocument>("CompasModel.FK_WareDocumentStaffDetails_WareDocuments", "WareDocument").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDocument>("CompasModel.FK_WareDocumentStaffDetails_WareDocuments", "WareDocument").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WareDocument> WareDocumentReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDocument>("CompasModel.FK_WareDocumentStaffDetails_WareDocuments", "WareDocument");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<WareDocument>("CompasModel.FK_WareDocumentStaffDetails_WareDocuments", "WareDocument", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="WareDocumentState")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WareDocumentState : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта WareDocumentState.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="documentID">Исходное значение свойства DocumentID.</param>
        /// <param name="stateID">Исходное значение свойства StateID.</param>
        /// <param name="startDate">Исходное значение свойства StartDate.</param>
        /// <param name="employeeID">Исходное значение свойства EmployeeID.</param>
        /// <param name="active">Исходное значение свойства Active.</param>
        public static WareDocumentState CreateWareDocumentState(global::System.Int32 id, global::System.Int32 documentID, global::System.Int32 stateID, global::System.DateTime startDate, global::System.Int32 employeeID, global::System.Boolean active)
        {
            WareDocumentState wareDocumentState = new WareDocumentState();
            wareDocumentState.ID = id;
            wareDocumentState.DocumentID = documentID;
            wareDocumentState.StateID = stateID;
            wareDocumentState.StartDate = startDate;
            wareDocumentState.EmployeeID = employeeID;
            wareDocumentState.Active = active;
            return wareDocumentState;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DocumentID
        {
            get
            {
                return _DocumentID;
            }
            set
            {
                OnDocumentIDChanging(value);
                ReportPropertyChanging("DocumentID");
                _DocumentID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DocumentID");
                OnDocumentIDChanged();
            }
        }
        private global::System.Int32 _DocumentID;
        partial void OnDocumentIDChanging(global::System.Int32 value);
        partial void OnDocumentIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 StateID
        {
            get
            {
                return _StateID;
            }
            set
            {
                OnStateIDChanging(value);
                ReportPropertyChanging("StateID");
                _StateID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StateID");
                OnStateIDChanged();
            }
        }
        private global::System.Int32 _StateID;
        partial void OnStateIDChanging(global::System.Int32 value);
        partial void OnStateIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime StartDate
        {
            get
            {
                return _StartDate;
            }
            set
            {
                OnStartDateChanging(value);
                ReportPropertyChanging("StartDate");
                _StartDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StartDate");
                OnStartDateChanged();
            }
        }
        private global::System.DateTime _StartDate;
        partial void OnStartDateChanging(global::System.DateTime value);
        partial void OnStartDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 EmployeeID
        {
            get
            {
                return _EmployeeID;
            }
            set
            {
                OnEmployeeIDChanging(value);
                ReportPropertyChanging("EmployeeID");
                _EmployeeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EmployeeID");
                OnEmployeeIDChanged();
            }
        }
        private global::System.Int32 _EmployeeID;
        partial void OnEmployeeIDChanging(global::System.Int32 value);
        partial void OnEmployeeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Active
        {
            get
            {
                return _Active;
            }
            set
            {
                OnActiveChanging(value);
                ReportPropertyChanging("Active");
                _Active = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Active");
                OnActiveChanged();
            }
        }
        private global::System.Boolean _Active;
        partial void OnActiveChanging(global::System.Boolean value);
        partial void OnActiveChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocumentStates_StaffEmployees", "StaffEmployee")]
        public StaffEmployee StaffEmployee
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffEmployee>("CompasModel.FK_WareDocumentStates_StaffEmployees", "StaffEmployee").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffEmployee>("CompasModel.FK_WareDocumentStates_StaffEmployees", "StaffEmployee").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<StaffEmployee> StaffEmployeeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffEmployee>("CompasModel.FK_WareDocumentStates_StaffEmployees", "StaffEmployee");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<StaffEmployee>("CompasModel.FK_WareDocumentStates_StaffEmployees", "StaffEmployee", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocumentStates_StatesOfDocuments", "StatesOfDocument")]
        public StatesOfDocument StatesOfDocument
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StatesOfDocument>("CompasModel.FK_WareDocumentStates_StatesOfDocuments", "StatesOfDocument").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StatesOfDocument>("CompasModel.FK_WareDocumentStates_StatesOfDocuments", "StatesOfDocument").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<StatesOfDocument> StatesOfDocumentReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StatesOfDocument>("CompasModel.FK_WareDocumentStates_StatesOfDocuments", "StatesOfDocument");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<StatesOfDocument>("CompasModel.FK_WareDocumentStates_StatesOfDocuments", "StatesOfDocument", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocumentStates_WareDocuments", "WareDocument")]
        public WareDocument WareDocument
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDocument>("CompasModel.FK_WareDocumentStates_WareDocuments", "WareDocument").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDocument>("CompasModel.FK_WareDocumentStates_WareDocuments", "WareDocument").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WareDocument> WareDocumentReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDocument>("CompasModel.FK_WareDocumentStates_WareDocuments", "WareDocument");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<WareDocument>("CompasModel.FK_WareDocumentStates_WareDocuments", "WareDocument", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="WareDocumentType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WareDocumentType : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта WareDocumentType.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        /// <param name="input">Исходное значение свойства Input.</param>
        /// <param name="output">Исходное значение свойства Output.</param>
        public static WareDocumentType CreateWareDocumentType(global::System.Int32 id, global::System.String name, global::System.Boolean input, global::System.Boolean output)
        {
            WareDocumentType wareDocumentType = new WareDocumentType();
            wareDocumentType.ID = id;
            wareDocumentType.Name = name;
            wareDocumentType.Input = input;
            wareDocumentType.Output = output;
            return wareDocumentType;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Input
        {
            get
            {
                return _Input;
            }
            set
            {
                OnInputChanging(value);
                ReportPropertyChanging("Input");
                _Input = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Input");
                OnInputChanged();
            }
        }
        private global::System.Boolean _Input;
        partial void OnInputChanging(global::System.Boolean value);
        partial void OnInputChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Output
        {
            get
            {
                return _Output;
            }
            set
            {
                OnOutputChanging(value);
                ReportPropertyChanging("Output");
                _Output = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Output");
                OnOutputChanged();
            }
        }
        private global::System.Boolean _Output;
        partial void OnOutputChanging(global::System.Boolean value);
        partial void OnOutputChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareDocuments_WareDocumentTypes", "WareDocument")]
        public EntityCollection<WareDocument> WareDocuments
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WareDocument>("CompasModel.FK_WareDocuments_WareDocumentTypes", "WareDocument");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WareDocument>("CompasModel.FK_WareDocuments_WareDocumentTypes", "WareDocument", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="WareExtra")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WareExtra : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта WareExtra.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="extraPercent">Исходное значение свойства ExtraPercent.</param>
        /// <param name="default">Исходное значение свойства Default.</param>
        public static WareExtra CreateWareExtra(global::System.Int32 id, global::System.Int32 extraPercent, global::System.Boolean @default)
        {
            WareExtra wareExtra = new WareExtra();
            wareExtra.ID = id;
            wareExtra.ExtraPercent = extraPercent;
            wareExtra.Default = @default;
            return wareExtra;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ExtraPercent
        {
            get
            {
                return _ExtraPercent;
            }
            set
            {
                OnExtraPercentChanging(value);
                ReportPropertyChanging("ExtraPercent");
                _ExtraPercent = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ExtraPercent");
                OnExtraPercentChanged();
            }
        }
        private global::System.Int32 _ExtraPercent;
        partial void OnExtraPercentChanging(global::System.Int32 value);
        partial void OnExtraPercentChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Default
        {
            get
            {
                return _Default;
            }
            set
            {
                OnDefaultChanging(value);
                ReportPropertyChanging("Default");
                _Default = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Default");
                OnDefaultChanged();
            }
        }
        private global::System.Boolean _Default;
        partial void OnDefaultChanging(global::System.Boolean value);
        partial void OnDefaultChanged();

        #endregion
    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="WareManufacturer")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WareManufacturer : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта WareManufacturer.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        public static WareManufacturer CreateWareManufacturer(global::System.Int32 id)
        {
            WareManufacturer wareManufacturer = new WareManufacturer();
            wareManufacturer.ID = id;
            return wareManufacturer;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_Wares_WareManufacturers", "Ware")]
        public EntityCollection<Ware> Wares
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Ware>("CompasModel.FK_Wares_WareManufacturers", "Ware");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Ware>("CompasModel.FK_Wares_WareManufacturers", "Ware", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="WareOrderCar")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WareOrderCar : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта WareOrderCar.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="orderID">Исходное значение свойства OrderID.</param>
        /// <param name="carID">Исходное значение свойства CarID.</param>
        public static WareOrderCar CreateWareOrderCar(global::System.Int32 id, global::System.Int32 orderID, global::System.Int32 carID)
        {
            WareOrderCar wareOrderCar = new WareOrderCar();
            wareOrderCar.ID = id;
            wareOrderCar.OrderID = orderID;
            wareOrderCar.CarID = carID;
            return wareOrderCar;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 OrderID
        {
            get
            {
                return _OrderID;
            }
            set
            {
                OnOrderIDChanging(value);
                ReportPropertyChanging("OrderID");
                _OrderID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("OrderID");
                OnOrderIDChanged();
            }
        }
        private global::System.Int32 _OrderID;
        partial void OnOrderIDChanging(global::System.Int32 value);
        partial void OnOrderIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CarID
        {
            get
            {
                return _CarID;
            }
            set
            {
                OnCarIDChanging(value);
                ReportPropertyChanging("CarID");
                _CarID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CarID");
                OnCarIDChanged();
            }
        }
        private global::System.Int32 _CarID;
        partial void OnCarIDChanging(global::System.Int32 value);
        partial void OnCarIDChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareOrderCars_CWCars", "CWCar")]
        public CWCar CWCar
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CWCar>("CompasModel.FK_WareOrderCars_CWCars", "CWCar").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CWCar>("CompasModel.FK_WareOrderCars_CWCars", "CWCar").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CWCar> CWCarReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CWCar>("CompasModel.FK_WareOrderCars_CWCars", "CWCar");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CWCar>("CompasModel.FK_WareOrderCars_CWCars", "CWCar", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="WarePrice")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WarePrice : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта WarePrice.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="wareID">Исходное значение свойства WareID.</param>
        /// <param name="warePriceGroupID">Исходное значение свойства WarePriceGroupID.</param>
        /// <param name="allowDiscount">Исходное значение свойства AllowDiscount.</param>
        /// <param name="purchasePriceForUnit">Исходное значение свойства PurchasePriceForUnit.</param>
        /// <param name="salePriceForUnit">Исходное значение свойства SalePriceForUnit.</param>
        /// <param name="active">Исходное значение свойства Active.</param>
        public static WarePrice CreateWarePrice(global::System.Int32 id, global::System.Int32 wareID, global::System.Int32 warePriceGroupID, global::System.Boolean allowDiscount, global::System.Decimal purchasePriceForUnit, global::System.Decimal salePriceForUnit, global::System.Boolean active)
        {
            WarePrice warePrice = new WarePrice();
            warePrice.ID = id;
            warePrice.WareID = wareID;
            warePrice.WarePriceGroupID = warePriceGroupID;
            warePrice.AllowDiscount = allowDiscount;
            warePrice.PurchasePriceForUnit = purchasePriceForUnit;
            warePrice.SalePriceForUnit = salePriceForUnit;
            warePrice.Active = active;
            return warePrice;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 WareID
        {
            get
            {
                return _WareID;
            }
            set
            {
                OnWareIDChanging(value);
                ReportPropertyChanging("WareID");
                _WareID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("WareID");
                OnWareIDChanged();
            }
        }
        private global::System.Int32 _WareID;
        partial void OnWareIDChanging(global::System.Int32 value);
        partial void OnWareIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 WarePriceGroupID
        {
            get
            {
                return _WarePriceGroupID;
            }
            set
            {
                OnWarePriceGroupIDChanging(value);
                ReportPropertyChanging("WarePriceGroupID");
                _WarePriceGroupID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("WarePriceGroupID");
                OnWarePriceGroupIDChanged();
            }
        }
        private global::System.Int32 _WarePriceGroupID;
        partial void OnWarePriceGroupIDChanging(global::System.Int32 value);
        partial void OnWarePriceGroupIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> DocumentID
        {
            get
            {
                return _DocumentID;
            }
            set
            {
                OnDocumentIDChanging(value);
                ReportPropertyChanging("DocumentID");
                _DocumentID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DocumentID");
                OnDocumentIDChanged();
            }
        }
        private Nullable<global::System.Int32> _DocumentID;
        partial void OnDocumentIDChanging(Nullable<global::System.Int32> value);
        partial void OnDocumentIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean AllowDiscount
        {
            get
            {
                return _AllowDiscount;
            }
            set
            {
                OnAllowDiscountChanging(value);
                ReportPropertyChanging("AllowDiscount");
                _AllowDiscount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AllowDiscount");
                OnAllowDiscountChanged();
            }
        }
        private global::System.Boolean _AllowDiscount;
        partial void OnAllowDiscountChanging(global::System.Boolean value);
        partial void OnAllowDiscountChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal PurchasePriceForUnit
        {
            get
            {
                return _PurchasePriceForUnit;
            }
            set
            {
                OnPurchasePriceForUnitChanging(value);
                ReportPropertyChanging("PurchasePriceForUnit");
                _PurchasePriceForUnit = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PurchasePriceForUnit");
                OnPurchasePriceForUnitChanged();
            }
        }
        private global::System.Decimal _PurchasePriceForUnit;
        partial void OnPurchasePriceForUnitChanging(global::System.Decimal value);
        partial void OnPurchasePriceForUnitChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal SalePriceForUnit
        {
            get
            {
                return _SalePriceForUnit;
            }
            set
            {
                OnSalePriceForUnitChanging(value);
                ReportPropertyChanging("SalePriceForUnit");
                _SalePriceForUnit = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SalePriceForUnit");
                OnSalePriceForUnitChanged();
            }
        }
        private global::System.Decimal _SalePriceForUnit;
        partial void OnSalePriceForUnitChanging(global::System.Decimal value);
        partial void OnSalePriceForUnitChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Active
        {
            get
            {
                return _Active;
            }
            set
            {
                OnActiveChanging(value);
                ReportPropertyChanging("Active");
                _Active = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Active");
                OnActiveChanged();
            }
        }
        private global::System.Boolean _Active;
        partial void OnActiveChanging(global::System.Boolean value);
        partial void OnActiveChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WarePrices_WareDocuments", "WareDocument")]
        public WareDocument WareDocument
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDocument>("CompasModel.FK_WarePrices_WareDocuments", "WareDocument").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDocument>("CompasModel.FK_WarePrices_WareDocuments", "WareDocument").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WareDocument> WareDocumentReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WareDocument>("CompasModel.FK_WarePrices_WareDocuments", "WareDocument");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<WareDocument>("CompasModel.FK_WarePrices_WareDocuments", "WareDocument", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WarePrices_WarePriceGroups", "WarePriceGroup")]
        public WarePriceGroup WarePriceGroup
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WarePriceGroup>("CompasModel.FK_WarePrices_WarePriceGroups", "WarePriceGroup").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WarePriceGroup>("CompasModel.FK_WarePrices_WarePriceGroups", "WarePriceGroup").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WarePriceGroup> WarePriceGroupReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WarePriceGroup>("CompasModel.FK_WarePrices_WarePriceGroups", "WarePriceGroup");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<WarePriceGroup>("CompasModel.FK_WarePrices_WarePriceGroups", "WarePriceGroup", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WarePrices_Wares", "Ware")]
        public Ware Ware
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Ware>("CompasModel.FK_WarePrices_Wares", "Ware").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Ware>("CompasModel.FK_WarePrices_Wares", "Ware").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Ware> WareReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Ware>("CompasModel.FK_WarePrices_Wares", "Ware");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Ware>("CompasModel.FK_WarePrices_Wares", "Ware", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="WarePriceGroup")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WarePriceGroup : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта WarePriceGroup.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        /// <param name="active">Исходное значение свойства Active.</param>
        public static WarePriceGroup CreateWarePriceGroup(global::System.Int32 id, global::System.String name, global::System.Boolean active)
        {
            WarePriceGroup warePriceGroup = new WarePriceGroup();
            warePriceGroup.ID = id;
            warePriceGroup.Name = name;
            warePriceGroup.Active = active;
            return warePriceGroup;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ParentGroupID
        {
            get
            {
                return _ParentGroupID;
            }
            set
            {
                OnParentGroupIDChanging(value);
                ReportPropertyChanging("ParentGroupID");
                _ParentGroupID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ParentGroupID");
                OnParentGroupIDChanged();
            }
        }
        private Nullable<global::System.Int32> _ParentGroupID;
        partial void OnParentGroupIDChanging(Nullable<global::System.Int32> value);
        partial void OnParentGroupIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Active
        {
            get
            {
                return _Active;
            }
            set
            {
                OnActiveChanging(value);
                ReportPropertyChanging("Active");
                _Active = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Active");
                OnActiveChanged();
            }
        }
        private global::System.Boolean _Active;
        partial void OnActiveChanging(global::System.Boolean value);
        partial void OnActiveChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> DefaultExtraPercent
        {
            get
            {
                return _DefaultExtraPercent;
            }
            set
            {
                OnDefaultExtraPercentChanging(value);
                ReportPropertyChanging("DefaultExtraPercent");
                _DefaultExtraPercent = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DefaultExtraPercent");
                OnDefaultExtraPercentChanged();
            }
        }
        private Nullable<global::System.Int32> _DefaultExtraPercent;
        partial void OnDefaultExtraPercentChanging(Nullable<global::System.Int32> value);
        partial void OnDefaultExtraPercentChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WarePriceGroups_WarePriceGroups", "WarePriceGroup1")]
        public EntityCollection<WarePriceGroup> WarePriceGroups1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WarePriceGroup>("CompasModel.FK_WarePriceGroups_WarePriceGroups", "WarePriceGroup1");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WarePriceGroup>("CompasModel.FK_WarePriceGroups_WarePriceGroups", "WarePriceGroup1", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WarePriceGroups_WarePriceGroups", "WarePriceGroup")]
        public WarePriceGroup WarePriceGroup1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WarePriceGroup>("CompasModel.FK_WarePriceGroups_WarePriceGroups", "WarePriceGroup").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WarePriceGroup>("CompasModel.FK_WarePriceGroups_WarePriceGroups", "WarePriceGroup").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<WarePriceGroup> WarePriceGroup1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<WarePriceGroup>("CompasModel.FK_WarePriceGroups_WarePriceGroups", "WarePriceGroup");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<WarePriceGroup>("CompasModel.FK_WarePriceGroups_WarePriceGroups", "WarePriceGroup", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WarePrices_WarePriceGroups", "WarePrice")]
        public EntityCollection<WarePrice> WarePrices
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WarePrice>("CompasModel.FK_WarePrices_WarePriceGroups", "WarePrice");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WarePrice>("CompasModel.FK_WarePrices_WarePriceGroups", "WarePrice", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="WareRemain")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WareRemain : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта WareRemain.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="structureObjectID">Исходное значение свойства StructureObjectID.</param>
        /// <param name="wareID">Исходное значение свойства WareID.</param>
        /// <param name="unitQuantity">Исходное значение свойства UnitQuantity.</param>
        /// <param name="startDate">Исходное значение свойства StartDate.</param>
        /// <param name="endDate">Исходное значение свойства EndDate.</param>
        public static WareRemain CreateWareRemain(global::System.Int32 id, global::System.Int32 structureObjectID, global::System.Int32 wareID, global::System.Decimal unitQuantity, global::System.DateTime startDate, global::System.DateTime endDate)
        {
            WareRemain wareRemain = new WareRemain();
            wareRemain.ID = id;
            wareRemain.StructureObjectID = structureObjectID;
            wareRemain.WareID = wareID;
            wareRemain.UnitQuantity = unitQuantity;
            wareRemain.StartDate = startDate;
            wareRemain.EndDate = endDate;
            return wareRemain;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 StructureObjectID
        {
            get
            {
                return _StructureObjectID;
            }
            set
            {
                OnStructureObjectIDChanging(value);
                ReportPropertyChanging("StructureObjectID");
                _StructureObjectID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StructureObjectID");
                OnStructureObjectIDChanged();
            }
        }
        private global::System.Int32 _StructureObjectID;
        partial void OnStructureObjectIDChanging(global::System.Int32 value);
        partial void OnStructureObjectIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 WareID
        {
            get
            {
                return _WareID;
            }
            set
            {
                OnWareIDChanging(value);
                ReportPropertyChanging("WareID");
                _WareID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("WareID");
                OnWareIDChanged();
            }
        }
        private global::System.Int32 _WareID;
        partial void OnWareIDChanging(global::System.Int32 value);
        partial void OnWareIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal UnitQuantity
        {
            get
            {
                return _UnitQuantity;
            }
            set
            {
                OnUnitQuantityChanging(value);
                ReportPropertyChanging("UnitQuantity");
                _UnitQuantity = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UnitQuantity");
                OnUnitQuantityChanged();
            }
        }
        private global::System.Decimal _UnitQuantity;
        partial void OnUnitQuantityChanging(global::System.Decimal value);
        partial void OnUnitQuantityChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime StartDate
        {
            get
            {
                return _StartDate;
            }
            set
            {
                OnStartDateChanging(value);
                ReportPropertyChanging("StartDate");
                _StartDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StartDate");
                OnStartDateChanged();
            }
        }
        private global::System.DateTime _StartDate;
        partial void OnStartDateChanging(global::System.DateTime value);
        partial void OnStartDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime EndDate
        {
            get
            {
                return _EndDate;
            }
            set
            {
                OnEndDateChanging(value);
                ReportPropertyChanging("EndDate");
                _EndDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EndDate");
                OnEndDateChanged();
            }
        }
        private global::System.DateTime _EndDate;
        partial void OnEndDateChanging(global::System.DateTime value);
        partial void OnEndDateChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareRemains_StaffStructureObjects", "StaffStructureObject")]
        public StaffStructureObject StaffStructureObject
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffStructureObject>("CompasModel.FK_WareRemains_StaffStructureObjects", "StaffStructureObject").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffStructureObject>("CompasModel.FK_WareRemains_StaffStructureObjects", "StaffStructureObject").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<StaffStructureObject> StaffStructureObjectReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StaffStructureObject>("CompasModel.FK_WareRemains_StaffStructureObjects", "StaffStructureObject");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<StaffStructureObject>("CompasModel.FK_WareRemains_StaffStructureObjects", "StaffStructureObject", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareRemains_Wares", "Ware")]
        public Ware Ware
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Ware>("CompasModel.FK_WareRemains_Wares", "Ware").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Ware>("CompasModel.FK_WareRemains_Wares", "Ware").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Ware> WareReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Ware>("CompasModel.FK_WareRemains_Wares", "Ware");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Ware>("CompasModel.FK_WareRemains_Wares", "Ware", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="WareTimeLimit")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WareTimeLimit : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта WareTimeLimit.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="wareID">Исходное значение свойства WareID.</param>
        /// <param name="timeLimit">Исходное значение свойства TimeLimit.</param>
        /// <param name="active">Исходное значение свойства Active.</param>
        public static WareTimeLimit CreateWareTimeLimit(global::System.Int32 id, global::System.Int32 wareID, global::System.Decimal timeLimit, global::System.Boolean active)
        {
            WareTimeLimit wareTimeLimit = new WareTimeLimit();
            wareTimeLimit.ID = id;
            wareTimeLimit.WareID = wareID;
            wareTimeLimit.TimeLimit = timeLimit;
            wareTimeLimit.Active = active;
            return wareTimeLimit;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 WareID
        {
            get
            {
                return _WareID;
            }
            set
            {
                OnWareIDChanging(value);
                ReportPropertyChanging("WareID");
                _WareID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("WareID");
                OnWareIDChanged();
            }
        }
        private global::System.Int32 _WareID;
        partial void OnWareIDChanging(global::System.Int32 value);
        partial void OnWareIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal TimeLimit
        {
            get
            {
                return _TimeLimit;
            }
            set
            {
                OnTimeLimitChanging(value);
                ReportPropertyChanging("TimeLimit");
                _TimeLimit = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TimeLimit");
                OnTimeLimitChanged();
            }
        }
        private global::System.Decimal _TimeLimit;
        partial void OnTimeLimitChanging(global::System.Decimal value);
        partial void OnTimeLimitChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Active
        {
            get
            {
                return _Active;
            }
            set
            {
                OnActiveChanging(value);
                ReportPropertyChanging("Active");
                _Active = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Active");
                OnActiveChanged();
            }
        }
        private global::System.Boolean _Active;
        partial void OnActiveChanging(global::System.Boolean value);
        partial void OnActiveChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_WareTimeLimits_Wares", "Ware")]
        public Ware Ware
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Ware>("CompasModel.FK_WareTimeLimits_Wares", "Ware").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Ware>("CompasModel.FK_WareTimeLimits_Wares", "Ware").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Ware> WareReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Ware>("CompasModel.FK_WareTimeLimits_Wares", "Ware");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Ware>("CompasModel.FK_WareTimeLimits_Wares", "Ware", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="CompasModel", Name="WareUnit")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WareUnit : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта WareUnit.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        public static WareUnit CreateWareUnit(global::System.Int32 id, global::System.String name)
        {
            WareUnit wareUnit = new WareUnit();
            wareUnit.ID = id;
            wareUnit.Name = name;
            return wareUnit;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_Wares_WareUnits", "Ware")]
        public EntityCollection<Ware> Wares
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Ware>("CompasModel.FK_Wares_WareUnits", "Ware");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Ware>("CompasModel.FK_Wares_WareUnits", "Ware", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CompasModel", "FK_Wares_WareUnits1", "Ware")]
        public EntityCollection<Ware> Wares1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Ware>("CompasModel.FK_Wares_WareUnits1", "Ware");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Ware>("CompasModel.FK_Wares_WareUnits1", "Ware", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
